
Assets_B-L4S5I-IOT01A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a360  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a854  0800a854  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a854  0800a854  0001a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a85c  0800a85c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a85c  0800a85c  0001a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000088  0800a8ec  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000994  0800a8ec  00020994  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031ea3  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ef6  00000000  00000000  00051f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  00056e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  00058c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033411  00000000  00000000  0005a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e7c  00000000  00000000  0008dcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012860a  00000000  00000000  000b1b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001da177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008778  00000000  00000000  001da1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a508 	.word	0x0800a508

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800a508 	.word	0x0800a508

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08e      	sub	sp, #56	; 0x38
 800059c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059e:	4a73      	ldr	r2, [pc, #460]	; (800076c <MX_BlueNRG_MS_Init+0x1d4>)
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	3304      	adds	r3, #4
 80005ac:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005ae:	4a70      	ldr	r2, [pc, #448]	; (8000770 <MX_BlueNRG_MS_Init+0x1d8>)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b8:	6018      	str	r0, [r3, #0]
 80005ba:	3304      	adds	r3, #4
 80005bc:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005be:	f000 f8fd 	bl	80007bc <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f001 fff8 	bl	80025b8 <BSP_PB_GetState>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b69      	ldr	r3, [pc, #420]	; (8000774 <MX_BlueNRG_MS_Init+0x1dc>)
 80005ce:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005d0:	2100      	movs	r1, #0
 80005d2:	4869      	ldr	r0, [pc, #420]	; (8000778 <MX_BlueNRG_MS_Init+0x1e0>)
 80005d4:	f008 fc0e 	bl	8008df4 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005d8:	1cba      	adds	r2, r7, #2
 80005da:	1d7b      	adds	r3, r7, #5
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 fa7d 	bl	8008ade <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005e4:	f008 fabf 	bl	8008b66 <hci_reset>

  HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f002 fa99 	bl	8002b20 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	4619      	mov	r1, r3
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4861      	ldr	r0, [pc, #388]	; (800077c <MX_BlueNRG_MS_Init+0x1e4>)
 80005f8:	f009 f9c0 	bl	800997c <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	2b30      	cmp	r3, #48	; 0x30
 8000600:	d902      	bls.n	8000608 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 8000602:	4b5f      	ldr	r3, [pc, #380]	; (8000780 <MX_BlueNRG_MS_Init+0x1e8>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000608:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <MX_BlueNRG_MS_Init+0x1ec>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d109      	bne.n	8000624 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	f107 021c 	add.w	r2, r7, #28
 8000618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	8019      	strh	r1, [r3, #0]
 8000622:	e008      	b.n	8000636 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	f107 0214 	add.w	r2, r7, #20
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	461a      	mov	r2, r3
 800063c:	2106      	movs	r1, #6
 800063e:	2000      	movs	r0, #0
 8000640:	f008 f9b5 	bl	80089ae <aci_hal_write_config_data>
 8000644:	4603      	mov	r3, r0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800064e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000650:	484d      	ldr	r0, [pc, #308]	; (8000788 <MX_BlueNRG_MS_Init+0x1f0>)
 8000652:	f009 f993 	bl	800997c <iprintf>
  }

  ret = aci_gatt_init();
 8000656:	f007 fe47 	bl	80082e8 <aci_gatt_init>
 800065a:	4603      	mov	r3, r0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 8000664:	4849      	ldr	r0, [pc, #292]	; (800078c <MX_BlueNRG_MS_Init+0x1f4>)
 8000666:	f009 fa25 	bl	8009ab4 <puts>
  }

  if (BLE_Role == SERVER) {
 800066a:	4b46      	ldr	r3, [pc, #280]	; (8000784 <MX_BlueNRG_MS_Init+0x1ec>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d11e      	bne.n	80006b0 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <MX_BlueNRG_MS_Init+0x1e8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10f      	bne.n	800069a <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800067a:	f107 020a 	add.w	r2, r7, #10
 800067e:	1dbb      	adds	r3, r7, #6
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	2207      	movs	r2, #7
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f007 fbf6 	bl	8007e80 <aci_gap_init_IDB05A1>
 8000694:	4603      	mov	r3, r0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	e028      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	f107 0208 	add.w	r2, r7, #8
 80006a0:	f107 010a 	add.w	r1, r7, #10
 80006a4:	2001      	movs	r0, #1
 80006a6:	f007 fc3b 	bl	8007f20 <aci_gap_init_IDB04A1>
 80006aa:	4603      	mov	r3, r0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
 80006ae:	e01d      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <MX_BlueNRG_MS_Init+0x1e8>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10f      	bne.n	80006d8 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006b8:	f107 020a 	add.w	r2, r7, #10
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4613      	mov	r3, r2
 80006c8:	2207      	movs	r2, #7
 80006ca:	2100      	movs	r1, #0
 80006cc:	2004      	movs	r0, #4
 80006ce:	f007 fbd7 	bl	8007e80 <aci_gap_init_IDB05A1>
 80006d2:	4603      	mov	r3, r0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
 80006d6:	e009      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	f107 0208 	add.w	r2, r7, #8
 80006de:	f107 010a 	add.w	r1, r7, #10
 80006e2:	2003      	movs	r0, #3
 80006e4:	f007 fc1c 	bl	8007f20 <aci_gap_init_IDB04A1>
 80006e8:	4603      	mov	r3, r0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006f2:	4827      	ldr	r0, [pc, #156]	; (8000790 <MX_BlueNRG_MS_Init+0x1f8>)
 80006f4:	f009 f9de 	bl	8009ab4 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006f8:	2301      	movs	r3, #1
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_BlueNRG_MS_Init+0x1fc>)
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2300      	movs	r3, #0
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2310      	movs	r3, #16
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2307      	movs	r3, #7
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2001      	movs	r0, #1
 8000710:	f007 fd3f 	bl	8008192 <aci_gap_set_auth_requirement>
 8000714:	4603      	mov	r3, r0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <MX_BlueNRG_MS_Init+0x200>)
 8000720:	f009 f9c8 	bl	8009ab4 <puts>
  }

  if (BLE_Role == SERVER) {
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_BlueNRG_MS_Init+0x1ec>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d111      	bne.n	8000750 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 800072c:	481b      	ldr	r0, [pc, #108]	; (800079c <MX_BlueNRG_MS_Init+0x204>)
 800072e:	f009 f9c1 	bl	8009ab4 <puts>
    ret = Add_Sample_Service();
 8000732:	f000 f8f1 	bl	8000918 <Add_Sample_Service>
 8000736:	4603      	mov	r3, r0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	2b00      	cmp	r3, #0
 800073e:	d103      	bne.n	8000748 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8000740:	4817      	ldr	r0, [pc, #92]	; (80007a0 <MX_BlueNRG_MS_Init+0x208>)
 8000742:	f009 f9b7 	bl	8009ab4 <puts>
 8000746:	e006      	b.n	8000756 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000748:	4816      	ldr	r0, [pc, #88]	; (80007a4 <MX_BlueNRG_MS_Init+0x20c>)
 800074a:	f009 f9b3 	bl	8009ab4 <puts>
 800074e:	e002      	b.n	8000756 <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000750:	4815      	ldr	r0, [pc, #84]	; (80007a8 <MX_BlueNRG_MS_Init+0x210>)
 8000752:	f009 f9af 	bl	8009ab4 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000756:	2104      	movs	r1, #4
 8000758:	2001      	movs	r0, #1
 800075a:	f008 f98f 	bl	8008a7c <aci_hal_set_tx_power_level>
 800075e:	4603      	mov	r3, r0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000762:	bf00      	nop
 8000764:	3728      	adds	r7, #40	; 0x28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	0800a60c 	.word	0x0800a60c
 8000770:	0800a614 	.word	0x0800a614
 8000774:	20000000 	.word	0x20000000
 8000778:	08000ddd 	.word	0x08000ddd
 800077c:	0800a520 	.word	0x0800a520
 8000780:	200000a4 	.word	0x200000a4
 8000784:	20000001 	.word	0x20000001
 8000788:	0800a534 	.word	0x0800a534
 800078c:	0800a554 	.word	0x0800a554
 8000790:	0800a568 	.word	0x0800a568
 8000794:	0001e240 	.word	0x0001e240
 8000798:	0800a57c 	.word	0x0800a57c
 800079c:	0800a594 	.word	0x0800a594
 80007a0:	0800a5b4 	.word	0x0800a5b4
 80007a4:	0800a5d0 	.word	0x0800a5d0
 80007a8:	0800a5ec 	.word	0x0800a5ec

080007ac <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80007b0:	f000 f812 	bl	80007d8 <User_Process>
  hci_user_evt_proc();
 80007b4:	f008 fc9a 	bl	80090ec <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}

080007bc <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007c0:	2101      	movs	r1, #1
 80007c2:	2000      	movs	r0, #0
 80007c4:	f001 fea4 	bl	8002510 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 fe0d 	bl	80023e8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 ff50 	bl	8002674 <BSP_COM_Init>
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
  if (set_connectable)
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <User_Process+0xfc>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d00b      	beq.n	8000800 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80007e8:	f000 f908 	bl	80009fc <Make_Connection>
    set_connectable = FALSE;
 80007ec:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <User_Process+0xfc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f001 fee0 	bl	80025b8 <BSP_PB_GetState>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <User_Process+0x100>)
 80007fe:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 8000800:	4b36      	ldr	r3, [pc, #216]	; (80008dc <User_Process+0x104>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d12e      	bne.n	8000866 <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <User_Process+0x108>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d007      	beq.n	8000820 <User_Process+0x48>
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <User_Process+0x10c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d102      	bne.n	8000820 <User_Process+0x48>
      startReadTXCharHandle();
 800081a:	f000 f967 	bl	8000aec <startReadTXCharHandle>
 800081e:	e00a      	b.n	8000836 <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <User_Process+0x108>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d006      	beq.n	8000836 <User_Process+0x5e>
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <User_Process+0x110>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <User_Process+0x5e>
      startReadRXCharHandle();
 8000832:	f000 f981 	bl	8000b38 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <User_Process+0x108>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d013      	beq.n	8000866 <User_Process+0x8e>
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <User_Process+0x10c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d00e      	beq.n	8000866 <User_Process+0x8e>
 8000848:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <User_Process+0x110>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d009      	beq.n	8000866 <User_Process+0x8e>
 8000852:	4b26      	ldr	r3, [pc, #152]	; (80008ec <User_Process+0x114>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800085c:	2000      	movs	r0, #0
 800085e:	f001 fdeb 	bl	8002438 <BSP_LED_Off>
      enableNotification();
 8000862:	f000 f9e5 	bl	8000c30 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <User_Process+0x118>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	d02c      	beq.n	80008ca <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000870:	2032      	movs	r0, #50	; 0x32
 8000872:	f002 f955 	bl	8002b20 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 8000876:	bf00      	nop
 8000878:	2000      	movs	r0, #0
 800087a:	f001 fe9d 	bl	80025b8 <BSP_PB_GetState>
 800087e:	4602      	mov	r2, r0
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <User_Process+0x100>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	bf0c      	ite	eq
 800088a:	2301      	moveq	r3, #1
 800088c:	2300      	movne	r3, #0
 800088e:	b2db      	uxtb	r3, r3
 8000890:	429a      	cmp	r2, r3
 8000892:	d0f1      	beq.n	8000878 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 8000894:	2032      	movs	r0, #50	; 0x32
 8000896:	f002 f943 	bl	8002b20 <HAL_Delay>

    if (connected && notification_enabled)
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <User_Process+0x108>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d010      	beq.n	80008c4 <User_Process+0xec>
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <User_Process+0x114>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d00b      	beq.n	80008c4 <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <User_Process+0x11c>)
 80008ae:	1d3c      	adds	r4, r7, #4
 80008b0:	461d      	mov	r5, r3
 80008b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b6:	682b      	ldr	r3, [r5, #0]
 80008b8:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2114      	movs	r1, #20
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f986 	bl	8000bd0 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <User_Process+0x118>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
  }
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bdb0      	pop	{r4, r5, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000002 	.word	0x20000002
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000001 	.word	0x20000001
 80008e0:	200000a8 	.word	0x200000a8
 80008e4:	200000b1 	.word	0x200000b1
 80008e8:	200000b2 	.word	0x200000b2
 80008ec:	200000ae 	.word	0x200000ae
 80008f0:	200000a5 	.word	0x200000a5
 80008f4:	0800a61c 	.word	0x0800a61c

080008f8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <BSP_PB_Callback+0x1c>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	200000a5 	.word	0x200000a5

08000918 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b095      	sub	sp, #84	; 0x54
 800091c:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <Add_Sample_Service+0xcc>)
 8000920:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000926:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <Add_Sample_Service+0xd0>)
 800092c:	f107 0414 	add.w	r4, r7, #20
 8000930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <Add_Sample_Service+0xd4>)
 8000938:	1d3c      	adds	r4, r7, #4
 800093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000940:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <Add_Sample_Service+0xd8>)
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2307      	movs	r3, #7
 800094a:	2201      	movs	r2, #1
 800094c:	2002      	movs	r0, #2
 800094e:	f007 fcee 	bl	800832e <aci_gatt_add_serv>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000958:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800095c:	2b00      	cmp	r3, #0
 800095e:	d136      	bne.n	80009ce <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000960:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <Add_Sample_Service+0xd8>)
 8000962:	8818      	ldrh	r0, [r3, #0]
 8000964:	f107 0214 	add.w	r2, r7, #20
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <Add_Sample_Service+0xdc>)
 800096a:	9305      	str	r3, [sp, #20]
 800096c:	2301      	movs	r3, #1
 800096e:	9304      	str	r3, [sp, #16]
 8000970:	2310      	movs	r3, #16
 8000972:	9303      	str	r3, [sp, #12]
 8000974:	2300      	movs	r3, #0
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2300      	movs	r3, #0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2310      	movs	r3, #16
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2314      	movs	r3, #20
 8000982:	2102      	movs	r1, #2
 8000984:	f007 fd5f 	bl	8008446 <aci_gatt_add_char>
 8000988:	4603      	mov	r3, r0
 800098a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800098e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11d      	bne.n	80009d2 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <Add_Sample_Service+0xd8>)
 8000998:	8818      	ldrh	r0, [r3, #0]
 800099a:	1d3a      	adds	r2, r7, #4
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <Add_Sample_Service+0xe0>)
 800099e:	9305      	str	r3, [sp, #20]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9304      	str	r3, [sp, #16]
 80009a4:	2310      	movs	r3, #16
 80009a6:	9303      	str	r3, [sp, #12]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	230c      	movs	r3, #12
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2314      	movs	r3, #20
 80009b6:	2102      	movs	r1, #2
 80009b8:	f007 fd45 	bl	8008446 <aci_gatt_add_char>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e005      	b.n	80009da <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ce:	bf00      	nop
 80009d0:	e002      	b.n	80009d8 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009d2:	bf00      	nop
 80009d4:	e000      	b.n	80009d8 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009d6:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80009d8:	2347      	movs	r3, #71	; 0x47
}
 80009da:	4618      	mov	r0, r3
 80009dc:	373c      	adds	r7, #60	; 0x3c
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd90      	pop	{r4, r7, pc}
 80009e2:	bf00      	nop
 80009e4:	0800a630 	.word	0x0800a630
 80009e8:	0800a640 	.word	0x0800a640
 80009ec:	0800a650 	.word	0x0800a650
 80009f0:	200004d2 	.word	0x200004d2
 80009f4:	200004d0 	.word	0x200004d0
 80009f8:	200004d4 	.word	0x200004d4

080009fc <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b091      	sub	sp, #68	; 0x44
 8000a00:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <Make_Connection+0xd8>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d132      	bne.n	8000a70 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8000a0a:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <Make_Connection+0xdc>)
 8000a0c:	f009 f852 	bl	8009ab4 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a10:	4a32      	ldr	r2, [pc, #200]	; (8000adc <Make_Connection+0xe0>)
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	6018      	str	r0, [r3, #0]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000a20:	2000      	movs	r0, #0
 8000a22:	f001 fcf3 	bl	800240c <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a2e:	9206      	str	r2, [sp, #24]
 8000a30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a34:	9205      	str	r2, [sp, #20]
 8000a36:	223c      	movs	r2, #60	; 0x3c
 8000a38:	9204      	str	r2, [sp, #16]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	9203      	str	r2, [sp, #12]
 8000a3e:	2228      	movs	r2, #40	; 0x28
 8000a40:	9202      	str	r2, [sp, #8]
 8000a42:	2228      	movs	r2, #40	; 0x28
 8000a44:	9201      	str	r2, [sp, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	9200      	str	r2, [sp, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a50:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a54:	f007 fbf4 	bl	8008240 <aci_gap_create_connection>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	77fb      	strb	r3, [r7, #31]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d034      	beq.n	8000acc <Make_Connection+0xd0>
      printf("Error while starting connection.\n");
 8000a62:	481f      	ldr	r0, [pc, #124]	; (8000ae0 <Make_Connection+0xe4>)
 8000a64:	f009 f826 	bl	8009ab4 <puts>
      HAL_Delay(100);
 8000a68:	2064      	movs	r0, #100	; 0x64
 8000a6a:	f002 f859 	bl	8002b20 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000a6e:	e02d      	b.n	8000acc <Make_Connection+0xd0>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <Make_Connection+0xe8>)
 8000a72:	f107 0408 	add.w	r4, r7, #8
 8000a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a78:	c407      	stmia	r4!, {r0, r1, r2}
 8000a7a:	7023      	strb	r3, [r4, #0]
    const uint8_t response_data[] = {6, AD_TYPE_MANUFACTURER_SPECIFIC_DATA,'h','e','l','l','o'};
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <Make_Connection+0xec>)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a84:	6018      	str	r0, [r3, #0]
 8000a86:	3304      	adds	r3, #4
 8000a88:	8019      	strh	r1, [r3, #0]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	0c0a      	lsrs	r2, r1, #16
 8000a8e:	701a      	strb	r2, [r3, #0]
    hci_le_set_scan_resp_data(31,response_data);
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	201f      	movs	r0, #31
 8000a96:	f008 f8d2 	bl	8008c3e <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	9306      	str	r3, [sp, #24]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	9305      	str	r3, [sp, #20]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	9304      	str	r3, [sp, #16]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	9303      	str	r3, [sp, #12]
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	230d      	movs	r3, #13
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f007 fa76 	bl	8007fb4 <aci_gap_set_discoverable>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	77fb      	strb	r3, [r7, #31]
}
 8000acc:	bf00      	nop
 8000ace:	3724      	adds	r7, #36	; 0x24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000001 	.word	0x20000001
 8000ad8:	0800a660 	.word	0x0800a660
 8000adc:	0800a6a0 	.word	0x0800a6a0
 8000ae0:	0800a67c 	.word	0x0800a67c
 8000ae4:	0800a6a8 	.word	0x0800a6a8
 8000ae8:	0800a6b8 	.word	0x0800a6b8

08000aec <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b087      	sub	sp, #28
 8000af0:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <startReadTXCharHandle+0x40>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d112      	bne.n	8000b22 <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <startReadTXCharHandle+0x44>)
 8000afe:	463c      	mov	r4, r7
 8000b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <startReadTXCharHandle+0x48>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b298      	uxth	r0, r3
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2302      	movs	r3, #2
 8000b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b16:	2101      	movs	r1, #1
 8000b18:	f007 fdf9 	bl	800870e <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <startReadTXCharHandle+0x40>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
  }
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000af 	.word	0x200000af
 8000b30:	0800a640 	.word	0x0800a640
 8000b34:	200000ac 	.word	0x200000ac

08000b38 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <startReadRXCharHandle+0x40>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d112      	bne.n	8000b6e <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <startReadRXCharHandle+0x44>)
 8000b4a:	463c      	mov	r4, r7
 8000b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <startReadRXCharHandle+0x48>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b298      	uxth	r0, r3
 8000b58:	463b      	mov	r3, r7
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b62:	2101      	movs	r1, #1
 8000b64:	f007 fdd3 	bl	800870e <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <startReadRXCharHandle+0x40>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd90      	pop	{r4, r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200000b0 	.word	0x200000b0
 8000b7c:	0800a650 	.word	0x0800a650
 8000b80:	200000ac 	.word	0x200000ac

08000b84 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 fc67 	bl	8002464 <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	e009      	b.n	8000bb0 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 ff01 	bl	80099ac <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	3301      	adds	r3, #1
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	78fb      	ldrb	r3, [r7, #3]
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <receiveData+0x18>
  }
  fflush(stdout);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <receiveData+0x48>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fcec 	bl	800959c <fflush>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000024 	.word	0x20000024

08000bd0 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af02      	add	r7, sp, #8
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <sendData+0x4c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10b      	bne.n	8000bfc <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <sendData+0x50>)
 8000be6:	8818      	ldrh	r0, [r3, #0]
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <sendData+0x54>)
 8000bea:	8819      	ldrh	r1, [r3, #0]
 8000bec:	78fa      	ldrb	r2, [r7, #3]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f007 fcf8 	bl	80085ea <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000bfa:	e00a      	b.n	8000c12 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <sendData+0x58>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b298      	uxth	r0, r3
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <sendData+0x5c>)
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	b299      	uxth	r1, r3
 8000c0a:	78fa      	ldrb	r2, [r7, #3]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f007 fe89 	bl	8008924 <aci_gatt_write_without_response>
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000001 	.word	0x20000001
 8000c20:	200004d2 	.word	0x200004d2
 8000c24:	200004d0 	.word	0x200004d0
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	200004ce 	.word	0x200004ce

08000c30 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000c36:	2301      	movs	r3, #1
 8000c38:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000c3a:	f001 ff65 	bl	8002b08 <HAL_GetTick>
 8000c3e:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c40:	e008      	b.n	8000c54 <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c42:	f001 ff61 	bl	8002b08 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d80e      	bhi.n	8000c72 <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <enableNotification+0x54>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	b298      	uxth	r0, r3
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <enableNotification+0x58>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	b299      	uxth	r1, r3
 8000c62:	463b      	mov	r3, r7
 8000c64:	2202      	movs	r2, #2
 8000c66:	f007 fde1 	bl	800882c <aci_gatt_write_charac_descriptor>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b46      	cmp	r3, #70	; 0x46
 8000c6e:	d0e8      	beq.n	8000c42 <enableNotification+0x12>
 8000c70:	e000      	b.n	8000c74 <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c72:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <enableNotification+0x5c>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000ac 	.word	0x200000ac
 8000c88:	200004cc 	.word	0x200004cc
 8000c8c:	200000ae 	.word	0x200000ae

08000c90 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	603a      	str	r2, [r7, #0]
 8000c9a:	80fb      	strh	r3, [r7, #6]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000ca0:	88fa      	ldrh	r2, [r7, #6]
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <Attribute_Modified_CB+0x4c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d105      	bne.n	8000cb8 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000cac:	797b      	ldrb	r3, [r7, #5]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6838      	ldr	r0, [r7, #0]
 8000cb2:	f7ff ff67 	bl	8000b84 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000cb6:	e00c      	b.n	8000cd2 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <Attribute_Modified_CB+0x50>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d106      	bne.n	8000cd2 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d102      	bne.n	8000cd2 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <Attribute_Modified_CB+0x54>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	701a      	strb	r2, [r3, #0]
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200004d4 	.word	0x200004d4
 8000ce0:	200004d0 	.word	0x200004d0
 8000ce4:	200000ae 	.word	0x200000ae

08000ce8 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <GAP_ConnectionComplete_CB+0x54>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <GAP_ConnectionComplete_CB+0x58>)
 8000cfc:	887b      	ldrh	r3, [r7, #2]
 8000cfe:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <GAP_ConnectionComplete_CB+0x5c>)
 8000d02:	f008 fe3b 	bl	800997c <iprintf>
  for(int i = 5; i > 0; i--){
 8000d06:	2305      	movs	r3, #5
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e00a      	b.n	8000d22 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <GAP_ConnectionComplete_CB+0x60>)
 8000d18:	f008 fe30 	bl	800997c <iprintf>
  for(int i = 5; i > 0; i--){
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	dcf1      	bgt.n	8000d0c <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	; (8000d4c <GAP_ConnectionComplete_CB+0x64>)
 8000d30:	f008 fe24 	bl	800997c <iprintf>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000a8 	.word	0x200000a8
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	0800a6c0 	.word	0x0800a6c0
 8000d48:	0800a6d8 	.word	0x0800a6d8
 8000d4c:	0800a6e0 	.word	0x0800a6e0

08000d50 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <GAP_DisconnectionComplete_CB+0x38>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <GAP_DisconnectionComplete_CB+0x3c>)
 8000d5c:	f008 feaa 	bl	8009ab4 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <GAP_DisconnectionComplete_CB+0x40>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <GAP_DisconnectionComplete_CB+0x44>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <GAP_DisconnectionComplete_CB+0x48>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <GAP_DisconnectionComplete_CB+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <GAP_DisconnectionComplete_CB+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <GAP_DisconnectionComplete_CB+0x54>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200000a8 	.word	0x200000a8
 8000d8c:	0800a6e8 	.word	0x0800a6e8
 8000d90:	20000002 	.word	0x20000002
 8000d94:	200000ae 	.word	0x200000ae
 8000d98:	200000af 	.word	0x200000af
 8000d9c:	200000b0 	.word	0x200000b0
 8000da0:	200000b1 	.word	0x200000b1
 8000da4:	200000b2 	.word	0x200000b2

08000da8 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	603a      	str	r2, [r7, #0]
 8000db2:	80fb      	strh	r3, [r7, #6]
 8000db4:	460b      	mov	r3, r1
 8000db6:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000db8:	88fa      	ldrh	r2, [r7, #6]
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <GATT_Notification_CB+0x30>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d104      	bne.n	8000dce <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000dc4:	797b      	ldrb	r3, [r7, #5]
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f7ff fedb 	bl	8000b84 <receiveData>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200004cc 	.word	0x200004cc

08000ddc <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08c      	sub	sp, #48	; 0x30
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dea:	3301      	adds	r3, #1
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	f040 80e2 	bne.w	8000fbc <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2bff      	cmp	r3, #255	; 0xff
 8000dfe:	d021      	beq.n	8000e44 <user_notify+0x68>
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	f300 80e0 	bgt.w	8000fc6 <user_notify+0x1ea>
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d002      	beq.n	8000e10 <user_notify+0x34>
 8000e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8000e0c:	d003      	beq.n	8000e16 <user_notify+0x3a>
 8000e0e:	e0da      	b.n	8000fc6 <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000e10:	f7ff ff9e 	bl	8000d50 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000e14:	e0d7      	b.n	8000fc6 <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e18:	3302      	adds	r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 80cd 	bne.w	8000fc0 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1d5a      	adds	r2, r3, #5
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	f7ff ff54 	bl	8000ce8 <GAP_ConnectionComplete_CB>
        }
        break;
 8000e40:	bf00      	nop
      }
    }
    break;
 8000e42:	e0bd      	b.n	8000fc0 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e46:	3302      	adds	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000e54:	2b11      	cmp	r3, #17
 8000e56:	f200 80b5 	bhi.w	8000fc4 <user_notify+0x1e8>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <user_notify+0x84>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000ea9 	.word	0x08000ea9
 8000e64:	08000fc5 	.word	0x08000fc5
 8000e68:	08000fc5 	.word	0x08000fc5
 8000e6c:	08000fc5 	.word	0x08000fc5
 8000e70:	08000fc5 	.word	0x08000fc5
 8000e74:	08000fc5 	.word	0x08000fc5
 8000e78:	08000fc5 	.word	0x08000fc5
 8000e7c:	08000fc5 	.word	0x08000fc5
 8000e80:	08000fc5 	.word	0x08000fc5
 8000e84:	08000fc5 	.word	0x08000fc5
 8000e88:	08000fc5 	.word	0x08000fc5
 8000e8c:	08000fc5 	.word	0x08000fc5
 8000e90:	08000fc5 	.word	0x08000fc5
 8000e94:	08000fc5 	.word	0x08000fc5
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000f75 	.word	0x08000f75
 8000ea0:	08000fc5 	.word	0x08000fc5
 8000ea4:	08000f0b 	.word	0x08000f0b

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000ea8:	4b48      	ldr	r3, [pc, #288]	; (8000fcc <user_notify+0x1f0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10d      	bne.n	8000ecc <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	885b      	ldrh	r3, [r3, #2]
 8000eba:	b298      	uxth	r0, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	7919      	ldrb	r1, [r3, #4]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	f7ff fee3 	bl	8000c90 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000eca:	e076      	b.n	8000fba <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ece:	3302      	adds	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	885b      	ldrh	r3, [r3, #2]
 8000ed6:	b298      	uxth	r0, r3
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	7919      	ldrb	r1, [r3, #4]
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	3305      	adds	r3, #5
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f7ff fed5 	bl	8000c90 <Attribute_Modified_CB>
        break;
 8000ee6:	e068      	b.n	8000fba <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	3302      	adds	r3, #2
 8000eec:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	3b02      	subs	r3, #2
 8000efc:	b2d9      	uxtb	r1, r3
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3305      	adds	r3, #5
 8000f02:	461a      	mov	r2, r3
 8000f04:	f7ff ff50 	bl	8000da8 <GATT_Notification_CB>
        }
        break;
 8000f08:	e057      	b.n	8000fba <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000f0a:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <user_notify+0x1f4>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d150      	bne.n	8000fb4 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	3302      	adds	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <user_notify+0x1f8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d011      	beq.n	8000f46 <user_notify+0x16a>
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <user_notify+0x1fc>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10c      	bne.n	8000f46 <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <user_notify+0x200>)
 8000f36:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000f38:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <user_notify+0x200>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4828      	ldr	r0, [pc, #160]	; (8000fe0 <user_notify+0x204>)
 8000f40:	f008 fd1c 	bl	800997c <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000f44:	e036      	b.n	8000fb4 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <user_notify+0x208>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d031      	beq.n	8000fb4 <user_notify+0x1d8>
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <user_notify+0x20c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d12c      	bne.n	8000fb4 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <user_notify+0x210>)
 8000f64:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <user_notify+0x210>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4820      	ldr	r0, [pc, #128]	; (8000ff0 <user_notify+0x214>)
 8000f6e:	f008 fd05 	bl	800997c <iprintf>
        break;
 8000f72:	e01f      	b.n	8000fb4 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <user_notify+0x1f4>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11d      	bne.n	8000fb8 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <user_notify+0x1f8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d008      	beq.n	8000f98 <user_notify+0x1bc>
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <user_notify+0x1fc>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <user_notify+0x1fc>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000f96:	e00f      	b.n	8000fb8 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <user_notify+0x208>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00a      	beq.n	8000fb8 <user_notify+0x1dc>
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <user_notify+0x20c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d105      	bne.n	8000fb8 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <user_notify+0x20c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
        break;
 8000fb2:	e001      	b.n	8000fb8 <user_notify+0x1dc>
        break;
 8000fb4:	bf00      	nop
 8000fb6:	e005      	b.n	8000fc4 <user_notify+0x1e8>
        break;
 8000fb8:	bf00      	nop
      }
    }
    break;
 8000fba:	e003      	b.n	8000fc4 <user_notify+0x1e8>
    return;
 8000fbc:	bf00      	nop
 8000fbe:	e002      	b.n	8000fc6 <user_notify+0x1ea>
    break;
 8000fc0:	bf00      	nop
 8000fc2:	e000      	b.n	8000fc6 <user_notify+0x1ea>
    break;
 8000fc4:	bf00      	nop
  }
}
 8000fc6:	3730      	adds	r7, #48	; 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200000a4 	.word	0x200000a4
 8000fd0:	20000001 	.word	0x20000001
 8000fd4:	200000af 	.word	0x200000af
 8000fd8:	200000b1 	.word	0x200000b1
 8000fdc:	200004cc 	.word	0x200004cc
 8000fe0:	0800a6f8 	.word	0x0800a6f8
 8000fe4:	200000b0 	.word	0x200000b0
 8000fe8:	200000b2 	.word	0x200000b2
 8000fec:	200004ce 	.word	0x200004ce
 8000ff0:	0800a710 	.word	0x0800a710

08000ff4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HCI_TL_SPI_Init+0x84>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HCI_TL_SPI_Init+0x84>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HCI_TL_SPI_Init+0x84>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HCI_TL_SPI_Init+0x88>)
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	4619      	mov	r1, r3
 8001026:	4816      	ldr	r0, [pc, #88]	; (8001080 <HCI_TL_SPI_Init+0x8c>)
 8001028:	f002 ff02 	bl	8003e30 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800102c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f002 fef2 	bl	8003e30 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <HCI_TL_SPI_Init+0x90>)
 8001066:	f002 fee3 	bl	8003e30 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 800106a:	f001 fbf3 	bl	8002854 <BSP_SPI3_Init>
 800106e:	4603      	mov	r3, r0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	10110000 	.word	0x10110000
 8001080:	48001000 	.word	0x48001000
 8001084:	48000c00 	.word	0x48000c00

08001088 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <HCI_TL_SPI_DeInit+0x28>)
 8001090:	f003 f860 	bl	8004154 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HCI_TL_SPI_DeInit+0x2c>)
 800109a:	f003 f85b 	bl	8004154 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f003 f855 	bl	8004154 <HAL_GPIO_DeInit>
  return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	48001000 	.word	0x48001000
 80010b4:	48000c00 	.word	0x48000c00

080010b8 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <HCI_TL_SPI_Reset+0x40>)
 80010c4:	f003 f950 	bl	8004368 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f003 f949 	bl	8004368 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 fd22 	bl	8002b20 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f003 f93f 	bl	8004368 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010ea:	2005      	movs	r0, #5
 80010ec:	f001 fd18 	bl	8002b20 <HAL_Delay>
  return 0;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000c00 	.word	0x48000c00

080010fc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 800110c:	23ff      	movs	r3, #255	; 0xff
 800110e:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001110:	4a26      	ldr	r2, [pc, #152]	; (80011ac <HCI_TL_SPI_Receive+0xb0>)
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	6018      	str	r0, [r3, #0]
 800111c:	3304      	adds	r3, #4
 800111e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <HCI_TL_SPI_Receive+0xb4>)
 8001128:	f003 f91e 	bl	8004368 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800112c:	f107 010c 	add.w	r1, r7, #12
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	2205      	movs	r2, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fbbc 	bl	80028b4 <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 800113c:	7b3b      	ldrb	r3, [r7, #12]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d129      	bne.n	8001196 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001142:	7c3b      	ldrb	r3, [r7, #16]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001152:	8bfb      	ldrh	r3, [r7, #30]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d01e      	beq.n	8001196 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001158:	8bfa      	ldrh	r2, [r7, #30]
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	429a      	cmp	r2, r3
 800115e:	d901      	bls.n	8001164 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001160:	887b      	ldrh	r3, [r7, #2]
 8001162:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001164:	2300      	movs	r3, #0
 8001166:	777b      	strb	r3, [r7, #29]
 8001168:	e010      	b.n	800118c <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800116a:	f107 011b 	add.w	r1, r7, #27
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	2201      	movs	r2, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fb9d 	bl	80028b4 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800117a:	7f7b      	ldrb	r3, [r7, #29]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	4413      	add	r3, r2
 8001180:	7efa      	ldrb	r2, [r7, #27]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001186:	7f7b      	ldrb	r3, [r7, #29]
 8001188:	3301      	adds	r3, #1
 800118a:	777b      	strb	r3, [r7, #29]
 800118c:	7f7b      	ldrb	r3, [r7, #29]
 800118e:	b29b      	uxth	r3, r3
 8001190:	8bfa      	ldrh	r2, [r7, #30]
 8001192:	429a      	cmp	r2, r3
 8001194:	d8e9      	bhi.n	800116a <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <HCI_TL_SPI_Receive+0xb4>)
 800119e:	f003 f8e3 	bl	8004368 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80011a2:	7f7b      	ldrb	r3, [r7, #29]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	0800a728 	.word	0x0800a728
 80011b0:	48000c00 	.word	0x48000c00

080011b4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80011c0:	4a24      	ldr	r2, [pc, #144]	; (8001254 <HCI_TL_SPI_Send+0xa0>)
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ca:	6018      	str	r0, [r3, #0]
 80011cc:	3304      	adds	r3, #4
 80011ce:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f001 fc9a 	bl	8002b08 <HAL_GetTick>
 80011d4:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	481d      	ldr	r0, [pc, #116]	; (8001258 <HCI_TL_SPI_Send+0xa4>)
 80011e2:	f003 f8c1 	bl	8004368 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80011e6:	f107 0108 	add.w	r1, r7, #8
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	2205      	movs	r2, #5
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fb5f 	bl	80028b4 <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80011f6:	7a3b      	ldrb	r3, [r7, #8]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d10f      	bne.n	800121c <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80011fc:	7a7b      	ldrb	r3, [r7, #9]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	887a      	ldrh	r2, [r7, #2]
 8001202:	429a      	cmp	r2, r3
 8001204:	d806      	bhi.n	8001214 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	461a      	mov	r2, r3
 800120a:	4914      	ldr	r1, [pc, #80]	; (800125c <HCI_TL_SPI_Send+0xa8>)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f001 fb51 	bl	80028b4 <BSP_SPI3_SendRecv>
 8001212:	e006      	b.n	8001222 <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001214:	f06f 0301 	mvn.w	r3, #1
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e002      	b.n	8001222 <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <HCI_TL_SPI_Send+0xa4>)
 800122a:	f003 f89d 	bl	8004368 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800122e:	f001 fc6b 	bl	8002b08 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d903      	bls.n	8001244 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 800123c:	f06f 0302 	mvn.w	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
      break;
 8001242:	e002      	b.n	800124a <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dbc5      	blt.n	80011d6 <HCI_TL_SPI_Send+0x22>

  return result;
 800124a:	69fb      	ldr	r3, [r7, #28]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800a730 	.word	0x0800a730
 8001258:	48000c00 	.word	0x48000c00
 800125c:	200000b4 	.word	0x200000b4

08001260 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <IsDataAvailable+0x1c>)
 8001268:	f003 f866 	bl	8004338 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	48001000 	.word	0x48001000

08001280 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <hci_tl_lowlevel_init+0x50>)
 8001288:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <hci_tl_lowlevel_init+0x54>)
 800128c:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <hci_tl_lowlevel_init+0x58>)
 8001290:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <hci_tl_lowlevel_init+0x5c>)
 8001294:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <hci_tl_lowlevel_init+0x60>)
 8001298:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <hci_tl_lowlevel_init+0x64>)
 800129c:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fde9 	bl	8008e78 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80012a6:	4910      	ldr	r1, [pc, #64]	; (80012e8 <hci_tl_lowlevel_init+0x68>)
 80012a8:	4810      	ldr	r0, [pc, #64]	; (80012ec <hci_tl_lowlevel_init+0x6c>)
 80012aa:	f002 fd7d 	bl	8003da8 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <hci_tl_lowlevel_init+0x70>)
 80012b0:	2100      	movs	r1, #0
 80012b2:	480e      	ldr	r0, [pc, #56]	; (80012ec <hci_tl_lowlevel_init+0x6c>)
 80012b4:	f002 fd5e 	bl	8003d74 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2017      	movs	r0, #23
 80012be:	f002 fc16 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012c2:	2017      	movs	r0, #23
 80012c4:	f002 fc2f 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	08000ff5 	.word	0x08000ff5
 80012d4:	08001089 	.word	0x08001089
 80012d8:	080011b5 	.word	0x080011b5
 80012dc:	080010fd 	.word	0x080010fd
 80012e0:	080010b9 	.word	0x080010b9
 80012e4:	080028f5 	.word	0x080028f5
 80012e8:	16000006 	.word	0x16000006
 80012ec:	200004d8 	.word	0x200004d8
 80012f0:	080012f5 	.word	0x080012f5

080012f4 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80012f8:	e005      	b.n	8001306 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80012fa:	2000      	movs	r0, #0
 80012fc:	f007 ff22 	bl	8009144 <hci_notify_asynch_evt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d105      	bne.n	8001312 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8001306:	f7ff ffab 	bl	8001260 <IsDataAvailable>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d1f4      	bne.n	80012fa <hci_tl_lowlevel_isr+0x6>
 8001310:	e000      	b.n	8001314 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8001312:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001314:	bd80      	pop	{r7, pc}

08001316 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f001 fb8d 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f81b 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001322:	f000 fb67 	bl	80019f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001326:	f000 f8c7 	bl	80014b8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 800132a:	f000 f929 	bl	8001580 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800132e:	f000 f95f 	bl	80015f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001332:	f000 f99d 	bl	8001670 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001336:	f000 f9db 	bl	80016f0 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800133a:	f000 fa2f 	bl	800179c <MX_SPI1_Init>
  MX_UART4_Init();
 800133e:	f000 fa6b 	bl	8001818 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001342:	f000 fab5 	bl	80018b0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001346:	f000 fb01 	bl	800194c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800134a:	f000 fb4b 	bl	80019e4 <MX_USB_OTG_FS_USB_Init>
  MX_BlueNRG_MS_Init();
 800134e:	f7ff f923 	bl	8000598 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 8001352:	f7ff fa2b 	bl	80007ac <MX_BlueNRG_MS_Process>
 8001356:	e7fc      	b.n	8001352 <main+0x3c>

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0bc      	sub	sp, #240	; 0xf0
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001362:	2244      	movs	r2, #68	; 0x44
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f008 fa55 	bl	8009816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2294      	movs	r2, #148	; 0x94
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f008 fa47 	bl	8009816 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001388:	2000      	movs	r0, #0
 800138a:	f003 fe8f 	bl	80050ac <HAL_PWREx_ControlVoltageScaling>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001394:	f000 fc6c 	bl	8001c70 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001398:	f003 fe58 	bl	800504c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800139c:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <SystemClock_Config+0x158>)
 800139e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a2:	4a43      	ldr	r2, [pc, #268]	; (80014b0 <SystemClock_Config+0x158>)
 80013a4:	f023 0318 	bic.w	r3, r3, #24
 80013a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013ac:	2314      	movs	r3, #20
 80013ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013dc:	233c      	movs	r3, #60	; 0x3c
 80013de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fefb 	bl	80051f4 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001404:	f000 fc34 	bl	8001c70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001426:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800142a:	2105      	movs	r1, #5
 800142c:	4618      	mov	r0, r3
 800142e:	f004 fb07 	bl	8005a40 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001438:	f000 fc1a 	bl	8001c70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <SystemClock_Config+0x15c>)
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001444:	2300      	movs	r3, #0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001448:	2300      	movs	r3, #0
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001450:	2300      	movs	r3, #0
 8001452:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001454:	2300      	movs	r3, #0
 8001456:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001458:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800145c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800146c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001470:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001472:	2301      	movs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001476:	2301      	movs	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800147a:	2318      	movs	r3, #24
 800147c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800147e:	2302      	movs	r3, #2
 8001480:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800148a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800148e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fd86 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800149e:	f000 fbe7 	bl	8001c70 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014a2:	f005 f8af 	bl	8006604 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014a6:	bf00      	nop
 80014a8:	37f0      	adds	r7, #240	; 0xf0
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	010160cf 	.word	0x010160cf

080014b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ce:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014d0:	4a29      	ldr	r2, [pc, #164]	; (8001578 <MX_ADC1_Init+0xc0>)
 80014d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014ee:	2204      	movs	r2, #4
 80014f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <MX_ADC1_Init+0xbc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001500:	2201      	movs	r2, #1
 8001502:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_ADC1_Init+0xbc>)
 800150e:	2200      	movs	r2, #0
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001514:	2200      	movs	r2, #0
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_ADC1_Init+0xbc>)
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_ADC1_Init+0xbc>)
 8001530:	f001 fcba 	bl	8002ea8 <HAL_ADC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800153a:	f000 fb99 	bl	8001c70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_ADC1_Init+0xc4>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001542:	2306      	movs	r3, #6
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154a:	237f      	movs	r3, #127	; 0x7f
 800154c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154e:	2304      	movs	r3, #4
 8001550:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	; (8001574 <MX_ADC1_Init+0xbc>)
 800155c:	f001 fdf0 	bl	8003140 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001566:	f000 fb83 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000658 	.word	0x20000658
 8001578:	50040000 	.word	0x50040000
 800157c:	04300002 	.word	0x04300002

08001580 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 8001586:	4a19      	ldr	r2, [pc, #100]	; (80015ec <MX_DFSDM1_Init+0x6c>)
 8001588:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 800158c:	2201      	movs	r2, #1
 800158e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 8001598:	2202      	movs	r2, #2
 800159a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015b6:	2204      	movs	r2, #4
 80015b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_DFSDM1_Init+0x68>)
 80015d4:	f002 fac2 	bl	8003b5c <HAL_DFSDM_ChannelInit>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80015de:	f000 fb47 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000844 	.word	0x20000844
 80015ec:	40016040 	.word	0x40016040

080015f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_I2C1_Init+0x74>)
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <MX_I2C1_Init+0x78>)
 80015f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_I2C1_Init+0x74>)
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <MX_I2C1_Init+0x7c>)
 80015fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_I2C1_Init+0x74>)
 8001608:	2201      	movs	r2, #1
 800160a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_I2C1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_I2C1_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_I2C1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_I2C1_Init+0x74>)
 800162c:	f002 fef1 	bl	8004412 <HAL_I2C_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001636:	f000 fb1b 	bl	8001c70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800163a:	2100      	movs	r1, #0
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <MX_I2C1_Init+0x74>)
 800163e:	f002 ff77 	bl	8004530 <HAL_I2CEx_ConfigAnalogFilter>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001648:	f000 fb12 	bl	8001c70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800164c:	2100      	movs	r1, #0
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_I2C1_Init+0x74>)
 8001650:	f002 ffb9 	bl	80045c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800165a:	f000 fb09 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000570 	.word	0x20000570
 8001668:	40005400 	.word	0x40005400
 800166c:	307075b1 	.word	0x307075b1

08001670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_I2C2_Init+0x74>)
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <MX_I2C2_Init+0x78>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_I2C2_Init+0x74>)
 800167c:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <MX_I2C2_Init+0x7c>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_I2C2_Init+0x74>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_I2C2_Init+0x74>)
 8001688:	2201      	movs	r2, #1
 800168a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_I2C2_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_I2C2_Init+0x74>)
 8001694:	2200      	movs	r2, #0
 8001696:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <MX_I2C2_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_I2C2_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_I2C2_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <MX_I2C2_Init+0x74>)
 80016ac:	f002 feb1 	bl	8004412 <HAL_I2C_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016b6:	f000 fadb 	bl	8001c70 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ba:	2100      	movs	r1, #0
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <MX_I2C2_Init+0x74>)
 80016be:	f002 ff37 	bl	8004530 <HAL_I2CEx_ConfigAnalogFilter>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016c8:	f000 fad2 	bl	8001c70 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_I2C2_Init+0x74>)
 80016d0:	f002 ff79 	bl	80045c6 <HAL_I2CEx_ConfigDigitalFilter>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016da:	f000 fac9 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000060c 	.word	0x2000060c
 80016e8:	40005800 	.word	0x40005800
 80016ec:	307075b1 	.word	0x307075b1

080016f0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001704:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <MX_OCTOSPI1_Init+0xa8>)
 8001708:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 800170c:	2201      	movs	r2, #1
 800170e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001718:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800171c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001720:	2220      	movs	r2, #32
 8001722:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001726:	2201      	movs	r2, #1
 8001728:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001738:	2201      	movs	r2, #1
 800173a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001744:	2200      	movs	r2, #0
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 800174a:	2200      	movs	r2, #0
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001750:	2208      	movs	r2, #8
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 8001756:	f002 ff83 	bl	8004660 <HAL_OSPI_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001760:	f000 fa86 	bl	8001c70 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001764:	2301      	movs	r3, #1
 8001766:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001768:	2301      	movs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800176c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001770:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_OCTOSPI1_Init+0xa4>)
 800177c:	f003 f82a 	bl	80047d4 <HAL_OSPIM_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001786:	f000 fa73 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200005bc 	.word	0x200005bc
 8001798:	a0001000 	.word	0xa0001000

0800179c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_SPI1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_SPI1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_SPI1_Init+0x74>)
 80017a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_SPI1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI1_Init+0x74>)
 80017b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_SPI1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI1_Init+0x74>)
 80017ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_SPI1_Init+0x74>)
 80017d2:	2208      	movs	r2, #8
 80017d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_SPI1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_SPI1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_SPI1_Init+0x74>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI1_Init+0x74>)
 80017f6:	2208      	movs	r2, #8
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_SPI1_Init+0x74>)
 80017fc:	f005 f8fa 	bl	80069f4 <HAL_SPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 fa33 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000750 	.word	0x20000750
 8001814:	40013000 	.word	0x40013000

08001818 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <MX_UART4_Init+0x90>)
 800181e:	4a23      	ldr	r2, [pc, #140]	; (80018ac <MX_UART4_Init+0x94>)
 8001820:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_UART4_Init+0x90>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_UART4_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b1d      	ldr	r3, [pc, #116]	; (80018a8 <MX_UART4_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_UART4_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <MX_UART4_Init+0x90>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_UART4_Init+0x90>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_UART4_Init+0x90>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_UART4_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_UART4_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_UART4_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001860:	4811      	ldr	r0, [pc, #68]	; (80018a8 <MX_UART4_Init+0x90>)
 8001862:	f005 fceb 	bl	800723c <HAL_UART_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800186c:	f000 fa00 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001870:	2100      	movs	r1, #0
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <MX_UART4_Init+0x90>)
 8001874:	f006 fa3a 	bl	8007cec <HAL_UARTEx_SetTxFifoThreshold>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800187e:	f000 f9f7 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <MX_UART4_Init+0x90>)
 8001886:	f006 fa6f 	bl	8007d68 <HAL_UARTEx_SetRxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001890:	f000 f9ee 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_UART4_Init+0x90>)
 8001896:	f006 f9f0 	bl	8007c7a <HAL_UARTEx_DisableFifoMode>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80018a0:	f000 f9e6 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	200006c0 	.word	0x200006c0
 80018ac:	40004c00 	.word	0x40004c00

080018b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <MX_USART2_UART_Init+0x98>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b1b      	ldr	r3, [pc, #108]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018e0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4812      	ldr	r0, [pc, #72]	; (8001944 <MX_USART2_UART_Init+0x94>)
 80018fc:	f005 fc9e 	bl	800723c <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001906:	f000 f9b3 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	480d      	ldr	r0, [pc, #52]	; (8001944 <MX_USART2_UART_Init+0x94>)
 800190e:	f006 f9ed 	bl	8007cec <HAL_UARTEx_SetTxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001918:	f000 f9aa 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191c:	2100      	movs	r1, #0
 800191e:	4809      	ldr	r0, [pc, #36]	; (8001944 <MX_USART2_UART_Init+0x94>)
 8001920:	f006 fa22 	bl	8007d68 <HAL_UARTEx_SetRxFifoThreshold>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800192a:	f000 f9a1 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART2_UART_Init+0x94>)
 8001930:	f006 f9a3 	bl	8007c7a <HAL_UARTEx_DisableFifoMode>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800193a:	f000 f999 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200007b4 	.word	0x200007b4
 8001948:	40004400 	.word	0x40004400

0800194c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <MX_USART3_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <MX_USART3_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_USART3_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_USART3_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198e:	4b13      	ldr	r3, [pc, #76]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	; (80019dc <MX_USART3_UART_Init+0x90>)
 8001996:	f005 fc51 	bl	800723c <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019a0:	f000 f966 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	; (80019dc <MX_USART3_UART_Init+0x90>)
 80019a8:	f006 f9a0 	bl	8007cec <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019b2:	f000 f95d 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <MX_USART3_UART_Init+0x90>)
 80019ba:	f006 f9d5 	bl	8007d68 <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019c4:	f000 f954 	bl	8001c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	; (80019dc <MX_USART3_UART_Init+0x90>)
 80019ca:	f006 f956 	bl	8007c7a <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f000 f94c 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200004e0 	.word	0x200004e0
 80019e0:	40004800 	.word	0x40004800

080019e4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08c      	sub	sp, #48	; 0x30
 80019f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a0a:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a92      	ldr	r2, [pc, #584]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a10:	f043 0310 	orr.w	r3, r3, #16
 8001a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a16:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1a:	f003 0310 	and.w	r3, r3, #16
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	4b8d      	ldr	r3, [pc, #564]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a8c      	ldr	r2, [pc, #560]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b8a      	ldr	r3, [pc, #552]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a3a:	4b87      	ldr	r3, [pc, #540]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a86      	ldr	r2, [pc, #536]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b81      	ldr	r3, [pc, #516]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a80      	ldr	r2, [pc, #512]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b7e      	ldr	r3, [pc, #504]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a74      	ldr	r2, [pc, #464]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <MX_GPIO_Init+0x264>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f240 1105 	movw	r1, #261	; 0x105
 8001aa0:	486e      	ldr	r0, [pc, #440]	; (8001c5c <MX_GPIO_Init+0x268>)
 8001aa2:	f002 fc61 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f248 111c 	movw	r1, #33052	; 0x811c
 8001aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab0:	f002 fc5a 	bl	8004368 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001aba:	4869      	ldr	r0, [pc, #420]	; (8001c60 <MX_GPIO_Init+0x26c>)
 8001abc:	f002 fc54 	bl	8004368 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f242 0183 	movw	r1, #8323	; 0x2083
 8001ac6:	4867      	ldr	r0, [pc, #412]	; (8001c64 <MX_GPIO_Init+0x270>)
 8001ac8:	f002 fc4e 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	4865      	ldr	r0, [pc, #404]	; (8001c68 <MX_GPIO_Init+0x274>)
 8001ad2:	f002 fc49 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001ad6:	f240 1305 	movw	r3, #261	; 0x105
 8001ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	4619      	mov	r1, r3
 8001aee:	485b      	ldr	r0, [pc, #364]	; (8001c5c <MX_GPIO_Init+0x268>)
 8001af0:	f002 f99e 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001af4:	237a      	movs	r3, #122	; 0x7a
 8001af6:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001af8:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <MX_GPIO_Init+0x278>)
 8001afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	4855      	ldr	r0, [pc, #340]	; (8001c5c <MX_GPIO_Init+0x268>)
 8001b08:	f002 f992 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001b0c:	f248 131c 	movw	r3, #33052	; 0x811c
 8001b10:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b28:	f002 f982 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b30:	4b4e      	ldr	r3, [pc, #312]	; (8001c6c <MX_GPIO_Init+0x278>)
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4848      	ldr	r0, [pc, #288]	; (8001c60 <MX_GPIO_Init+0x26c>)
 8001b40:	f002 f976 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b54:	2302      	movs	r3, #2
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4840      	ldr	r0, [pc, #256]	; (8001c60 <MX_GPIO_Init+0x26c>)
 8001b60:	f002 f966 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001b64:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001b68:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4838      	ldr	r0, [pc, #224]	; (8001c60 <MX_GPIO_Init+0x26c>)
 8001b7e:	f002 f957 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001b82:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001b86:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <MX_GPIO_Init+0x278>)
 8001b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4833      	ldr	r0, [pc, #204]	; (8001c64 <MX_GPIO_Init+0x270>)
 8001b98:	f002 f94a 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001b9c:	f242 0383 	movw	r3, #8323	; 0x2083
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	482b      	ldr	r0, [pc, #172]	; (8001c64 <MX_GPIO_Init+0x270>)
 8001bb6:	f002 f93b 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001bba:	2340      	movs	r3, #64	; 0x40
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4825      	ldr	r0, [pc, #148]	; (8001c68 <MX_GPIO_Init+0x274>)
 8001bd2:	f002 f92d 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001bd6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <MX_GPIO_Init+0x278>)
 8001bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481f      	ldr	r0, [pc, #124]	; (8001c68 <MX_GPIO_Init+0x274>)
 8001bec:	f002 f920 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 f912 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c1e:	230a      	movs	r3, #10
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2c:	f002 f900 	bl	8003e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2017      	movs	r0, #23
 8001c36:	f001 ff5a 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c3a:	2017      	movs	r0, #23
 8001c3c:	f001 ff73 	bl	8003b26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2028      	movs	r0, #40	; 0x28
 8001c46:	f001 ff52 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c4a:	2028      	movs	r0, #40	; 0x28
 8001c4c:	f001 ff6b 	bl	8003b26 <HAL_NVIC_EnableIRQ>

}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	48000400 	.word	0x48000400
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	10110000 	.word	0x10110000

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <Error_Handler+0x8>
	...

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_MspInit+0x44>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_MspInit+0x44>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <HAL_ADC_MspInit+0x74>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d123      	bne.n	8001d2e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_ADC_MspInit+0x78>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001d16:	233f      	movs	r3, #63	; 0x3f
 8001d18:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d1a:	230b      	movs	r3, #11
 8001d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4619      	mov	r1, r3
 8001d28:	4805      	ldr	r0, [pc, #20]	; (8001d40 <HAL_ADC_MspInit+0x7c>)
 8001d2a:	f002 f881 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d2e:	bf00      	nop
 8001d30:	3728      	adds	r7, #40	; 0x28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	50040000 	.word	0x50040000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	48000800 	.word	0x48000800

08001d44 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d12d      	bne.n	8001dc0 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d94:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001da6:	2306      	movs	r3, #6
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001db2:	f002 f83d 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	4a02      	ldr	r2, [pc, #8]	; (8001dc8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001dbe:	6013      	str	r3, [r2, #0]
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	200001b4 	.word	0x200001b4
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48001000 	.word	0x48001000

08001dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	; 0x30
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 031c 	add.w	r3, r7, #28
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a2f      	ldr	r2, [pc, #188]	; (8001eb0 <HAL_I2C_MspInit+0xdc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d129      	bne.n	8001e4a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e02:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e14:	2312      	movs	r3, #18
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e20:	2304      	movs	r3, #4
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4823      	ldr	r0, [pc, #140]	; (8001eb8 <HAL_I2C_MspInit+0xe4>)
 8001e2c:	f002 f800 	bl	8003e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e48:	e02d      	b.n	8001ea6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1b      	ldr	r2, [pc, #108]	; (8001ebc <HAL_I2C_MspInit+0xe8>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d128      	bne.n	8001ea6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e72:	2312      	movs	r3, #18
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	480b      	ldr	r0, [pc, #44]	; (8001eb8 <HAL_I2C_MspInit+0xe4>)
 8001e8a:	f001 ffd1 	bl	8003e30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_I2C_MspInit+0xe0>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	3730      	adds	r7, #48	; 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48000400 	.word	0x48000400
 8001ebc:	40005800 	.word	0x40005800

08001ec0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	; 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_OSPI_MspInit+0x94>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d134      	bne.n	8001f4c <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001efe:	4a16      	ldr	r2, [pc, #88]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6513      	str	r3, [r2, #80]	; 0x50
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001f18:	f043 0310 	orr.w	r3, r3, #16
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_OSPI_MspInit+0x98>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f2a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f2e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001f3c:	230a      	movs	r3, #10
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <HAL_OSPI_MspInit+0x9c>)
 8001f48:	f001 ff72 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	a0001000 	.word	0xa0001000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48001000 	.word	0x48001000

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_SPI_MspInit+0x7c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d128      	bne.n	8001fd4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_SPI_MspInit+0x80>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001fb2:	23e0      	movs	r3, #224	; 0xe0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f001 ff2e 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a46      	ldr	r2, [pc, #280]	; (800211c <HAL_UART_MspInit+0x138>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d129      	bne.n	800205a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	4a45      	ldr	r2, [pc, #276]	; (8002120 <HAL_UART_MspInit+0x13c>)
 800200c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201a:	623b      	str	r3, [r7, #32]
 800201c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201e:	4b40      	ldr	r3, [pc, #256]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a3f      	ldr	r2, [pc, #252]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_UART_MspInit+0x13c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002036:	2303      	movs	r3, #3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002046:	2308      	movs	r3, #8
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204e:	4619      	mov	r1, r3
 8002050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002054:	f001 feec 	bl	8003e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002058:	e05b      	b.n	8002112 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_UART_MspInit+0x140>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d128      	bne.n	80020b6 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <HAL_UART_MspInit+0x13c>)
 800206a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206e:	6593      	str	r3, [r2, #88]	; 0x58
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <HAL_UART_MspInit+0x13c>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	4a27      	ldr	r2, [pc, #156]	; (8002120 <HAL_UART_MspInit+0x13c>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_UART_MspInit+0x13c>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002094:	2378      	movs	r3, #120	; 0x78
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a4:	2307      	movs	r3, #7
 80020a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	481e      	ldr	r0, [pc, #120]	; (8002128 <HAL_UART_MspInit+0x144>)
 80020b0:	f001 febe 	bl	8003e30 <HAL_GPIO_Init>
}
 80020b4:	e02d      	b.n	8002112 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_UART_MspInit+0x148>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d128      	bne.n	8002112 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a16      	ldr	r2, [pc, #88]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b14      	ldr	r3, [pc, #80]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020dc:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_UART_MspInit+0x13c>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002102:	2307      	movs	r3, #7
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	4619      	mov	r1, r3
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <HAL_UART_MspInit+0x144>)
 800210e:	f001 fe8f 	bl	8003e30 <HAL_GPIO_Init>
}
 8002112:	bf00      	nop
 8002114:	3738      	adds	r7, #56	; 0x38
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40004c00 	.word	0x40004c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40004400 	.word	0x40004400
 8002128:	48000c00 	.word	0x48000c00
 800212c:	40004800 	.word	0x40004800

08002130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <NMI_Handler+0x4>

08002136 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <HardFault_Handler+0x4>

0800213c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <MemManage_Handler+0x4>

08002142 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002146:	e7fe      	b.n	8002146 <BusFault_Handler+0x4>

08002148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800214c:	e7fe      	b.n	800214c <UsageFault_Handler+0x4>

0800214e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 fcb0 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	bf00      	nop
 8002182:	bd80      	pop	{r7, pc}

08002184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002188:	2020      	movs	r0, #32
 800218a:	f002 f91f 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <EXTI9_5_IRQHandler+0x24>)
 8002190:	f001 fe1e 	bl	8003dd0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002194:	2080      	movs	r0, #128	; 0x80
 8002196:	f002 f919 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800219a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800219e:	f002 f915 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200004d8 	.word	0x200004d8

080021ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80021b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021b4:	f002 f90a 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80021b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021bc:	f002 f906 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021c4:	f002 f902 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80021c8:	4806      	ldr	r0, [pc, #24]	; (80021e4 <EXTI15_10_IRQHandler+0x38>)
 80021ca:	f001 fe01 	bl	8003dd0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d2:	f002 f8fb 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021d6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021da:	f002 f8f7 	bl	80043cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000010 	.word	0x20000010

080021e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e00a      	b.n	8002210 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fa:	f3af 8000 	nop.w
 80021fe:	4601      	mov	r1, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	60ba      	str	r2, [r7, #8]
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf0      	blt.n	80021fa <_read+0x12>
	}

return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e009      	b.n	8002248 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 faa9 	bl	8002794 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf1      	blt.n	8002234 <_write+0x12>
	}
	return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_close>:

int _close(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002282:	605a      	str	r2, [r3, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_isatty>:

int _isatty(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f007 f88a 	bl	800940c <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200a0000 	.word	0x200a0000
 8002324:	00000400 	.word	0x00000400
 8002328:	200001b8 	.word	0x200001b8
 800232c:	20000998 	.word	0x20000998

08002330 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <SystemInit+0x5c>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a14      	ldr	r2, [pc, #80]	; (800238c <SystemInit+0x5c>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <SystemInit+0x60>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a11      	ldr	r2, [pc, #68]	; (8002390 <SystemInit+0x60>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <SystemInit+0x60>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <SystemInit+0x60>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <SystemInit+0x60>)
 800235c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002360:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002364:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002366:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <SystemInit+0x60>)
 8002368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800236c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <SystemInit+0x60>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <SystemInit+0x60>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SystemInit+0x60>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00
 8002390:	40021000 	.word	0x40021000

08002394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002398:	f7ff ffca 	bl	8002330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800239c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800239e:	e003      	b.n	80023a8 <LoopCopyDataInit>

080023a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80023a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80023a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80023a6:	3104      	adds	r1, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80023a8:	480a      	ldr	r0, [pc, #40]	; (80023d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80023ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80023ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80023b0:	d3f6      	bcc.n	80023a0 <CopyDataInit>
	ldr	r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80023b4:	e002      	b.n	80023bc <LoopFillZerobss>

080023b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80023b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023b8:	f842 3b04 	str.w	r3, [r2], #4

080023bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023bc:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <LoopForever+0x16>)
	cmp	r2, r3
 80023be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023c0:	d3f9      	bcc.n	80023b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c2:	f007 f9f3 	bl	80097ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023c6:	f7fe ffa6 	bl	8001316 <main>

080023ca <LoopForever>:

LoopForever:
    b LoopForever
 80023ca:	e7fe      	b.n	80023ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023cc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80023d0:	0800a864 	.word	0x0800a864
	ldr	r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023d8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80023dc:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80023e0:	20000994 	.word	0x20000994

080023e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC1_IRQHandler>
	...

080023e8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <BSP_LED_Init+0x20>)
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	0800a780 	.word	0x0800a780

0800240c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <BSP_LED_On+0x28>)
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002422:	2201      	movs	r2, #1
 8002424:	4618      	mov	r0, r3
 8002426:	f001 ff9f 	bl	8004368 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000008 	.word	0x20000008

08002438 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4a06      	ldr	r2, [pc, #24]	; (8002460 <BSP_LED_Off+0x28>)
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244e:	2200      	movs	r2, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f001 ff89 	bl	8004368 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000008 	.word	0x20000008

08002464 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <BSP_LED_Toggle+0x28>)
 8002472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f001 ff8b 	bl	8004398 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000008 	.word	0x20000008

08002490 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
 80024bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <LED_USER_GPIO_Init+0x78>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80024d6:	2200      	movs	r2, #0
 80024d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024dc:	480b      	ldr	r0, [pc, #44]	; (800250c <LED_USER_GPIO_Init+0x7c>)
 80024de:	f001 ff43 	bl	8004368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80024e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	4619      	mov	r1, r3
 80024fa:	4804      	ldr	r0, [pc, #16]	; (800250c <LED_USER_GPIO_Init+0x7c>)
 80024fc:	f001 fc98 	bl	8003e30 <HAL_GPIO_Init>

}
 8002500:	bf00      	nop
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	48000800 	.word	0x48000800

08002510 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <BSP_PB_Init+0x94>)
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800252e:	79bb      	ldrb	r3, [r7, #6]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d132      	bne.n	800259a <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <BSP_PB_Init+0x98>)
 800253a:	441a      	add	r2, r3
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	491b      	ldr	r1, [pc, #108]	; (80025ac <BSP_PB_Init+0x9c>)
 8002540:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f001 fc2e 	bl	8003da8 <HAL_EXTI_GetHandle>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002552:	f06f 0303 	mvn.w	r3, #3
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e01f      	b.n	800259a <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <BSP_PB_Init+0x98>)
 8002560:	1898      	adds	r0, r3, r2
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <BSP_PB_Init+0xa0>)
 8002566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256a:	461a      	mov	r2, r3
 800256c:	2100      	movs	r1, #0
 800256e:	f001 fc01 	bl	8003d74 <HAL_EXTI_RegisterCallback>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002578:	f06f 0303 	mvn.w	r3, #3
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e00c      	b.n	800259a <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002580:	2028      	movs	r0, #40	; 0x28
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <BSP_PB_Init+0xa4>)
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	2200      	movs	r2, #0
 800258c:	4619      	mov	r1, r3
 800258e:	f001 faae 	bl	8003aee <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002592:	2328      	movs	r3, #40	; 0x28
 8002594:	4618      	mov	r0, r3
 8002596:	f001 fac6 	bl	8003b26 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	0800a784 	.word	0x0800a784
 80025a8:	20000010 	.word	0x20000010
 80025ac:	0800a788 	.word	0x0800a788
 80025b0:	0800a78c 	.word	0x0800a78c
 80025b4:	0800a790 	.word	0x0800a790

080025b8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	4a09      	ldr	r2, [pc, #36]	; (80025ec <BSP_PB_GetState+0x34>)
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 feb1 	bl	8004338 <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf0c      	ite	eq
 80025dc:	2301      	moveq	r3, #1
 80025de:	2300      	movne	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	2000000c 	.word	0x2000000c

080025f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7fe f97f 	bl	80008f8 <BSP_PB_Callback>
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002606:	4b18      	ldr	r3, [pc, #96]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	4a17      	ldr	r2, [pc, #92]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
 800262c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 8002634:	f043 0304 	orr.w	r3, r3, #4
 8002638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <BUTTON_USER_GPIO_Init+0x68>)
 800263c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800264a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <BUTTON_USER_GPIO_Init+0x6c>)
 800264e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	4619      	mov	r1, r3
 800265a:	4805      	ldr	r0, [pc, #20]	; (8002670 <BUTTON_USER_GPIO_Init+0x70>)
 800265c:	f001 fbe8 	bl	8003e30 <HAL_GPIO_Init>

}
 8002660:	bf00      	nop
 8002662:	3720      	adds	r7, #32
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	10110000 	.word	0x10110000
 8002670:	48000800 	.word	0x48000800

08002674 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d903      	bls.n	8002690 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002688:	f06f 0301 	mvn.w	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	e025      	b.n	80026dc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	4914      	ldr	r1, [pc, #80]	; (80026e8 <BSP_COM_Init+0x74>)
 8002696:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800269a:	4814      	ldr	r0, [pc, #80]	; (80026ec <BSP_COM_Init+0x78>)
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4403      	add	r3, r0
 80026a6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <BSP_COM_Init+0x78>)
 80026b4:	4413      	add	r3, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f888 	bl	80027cc <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80026bc:	79fa      	ldrb	r2, [r7, #7]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <BSP_COM_Init+0x78>)
 80026c8:	4413      	add	r3, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f810 	bl	80026f0 <MX_USART1_UART_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026d6:	f06f 0303 	mvn.w	r3, #3
 80026da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80026dc:	68fb      	ldr	r3, [r7, #12]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000018 	.word	0x20000018
 80026ec:	2000087c 	.word	0x2000087c

080026f0 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART1;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a24      	ldr	r2, [pc, #144]	; (8002790 <MX_USART1_UART_Init+0xa0>)
 8002700:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002708:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	220c      	movs	r2, #12
 8002720:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f004 fd7b 	bl	800723c <HAL_UART_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002750:	2100      	movs	r1, #0
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f005 faca 	bl	8007cec <HAL_UARTEx_SetTxFifoThreshold>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002762:	2100      	movs	r1, #0
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f005 faff 	bl	8007d68 <HAL_UARTEx_SetRxFifoThreshold>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f005 fa80 	bl	8007c7a <HAL_UARTEx_DisableFifoMode>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40013800 	.word	0x40013800

08002794 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <__io_putchar+0x30>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <__io_putchar+0x34>)
 80027ac:	1898      	adds	r0, r3, r2
 80027ae:	1d39      	adds	r1, r7, #4
 80027b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b4:	2201      	movs	r2, #1
 80027b6:	f004 fd91 	bl	80072dc <HAL_UART_Transmit>
  return ch;
 80027ba:	687b      	ldr	r3, [r7, #4]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200001bc 	.word	0x200001bc
 80027c8:	2000087c 	.word	0x2000087c

080027cc <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <USART1_MspInit+0x80>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	4a1c      	ldr	r2, [pc, #112]	; (800284c <USART1_MspInit+0x80>)
 80027da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027de:	6613      	str	r3, [r2, #96]	; 0x60
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <USART1_MspInit+0x80>)
 80027e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ec:	4b17      	ldr	r3, [pc, #92]	; (800284c <USART1_MspInit+0x80>)
 80027ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f0:	4a16      	ldr	r2, [pc, #88]	; (800284c <USART1_MspInit+0x80>)
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <USART1_MspInit+0x80>)
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002814:	2307      	movs	r3, #7
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <USART1_MspInit+0x84>)
 8002820:	f001 fb06 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8002834:	2307      	movs	r3, #7
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4804      	ldr	r0, [pc, #16]	; (8002850 <USART1_MspInit+0x84>)
 8002840:	f001 faf6 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8002844:	bf00      	nop
 8002846:	3728      	adds	r7, #40	; 0x28
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	48000400 	.word	0x48000400

08002854 <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <BSP_SPI3_Init+0x54>)
 8002860:	4a12      	ldr	r2, [pc, #72]	; (80028ac <BSP_SPI3_Init+0x58>)
 8002862:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <BSP_SPI3_Init+0x5c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	4911      	ldr	r1, [pc, #68]	; (80028b0 <BSP_SPI3_Init+0x5c>)
 800286c:	600a      	str	r2, [r1, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d114      	bne.n	800289c <BSP_SPI3_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 8002872:	480d      	ldr	r0, [pc, #52]	; (80028a8 <BSP_SPI3_Init+0x54>)
 8002874:	f004 fb74 	bl	8006f60 <HAL_SPI_GetState>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10e      	bne.n	800289c <BSP_SPI3_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI3_MspInit(&hspi3);
 800287e:	480a      	ldr	r0, [pc, #40]	; (80028a8 <BSP_SPI3_Init+0x54>)
 8002880:	f000 f882 	bl	8002988 <SPI3_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d108      	bne.n	800289c <BSP_SPI3_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800288a:	4807      	ldr	r0, [pc, #28]	; (80028a8 <BSP_SPI3_Init+0x54>)
 800288c:	f000 f83a 	bl	8002904 <MX_SPI3_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <BSP_SPI3_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 8002896:	f06f 0307 	mvn.w	r3, #7
 800289a:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 800289c:	687b      	ldr	r3, [r7, #4]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	2000090c 	.word	0x2000090c
 80028ac:	40003c00 	.word	0x40003c00
 80028b0:	200001c0 	.word	0x200001c0

080028b4 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	4807      	ldr	r0, [pc, #28]	; (80028f0 <BSP_SPI3_SendRecv+0x3c>)
 80028d4:	f004 f931 	bl	8006b3a <HAL_SPI_TransmitReceive>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80028de:	f06f 0305 	mvn.w	r3, #5
 80028e2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80028e4:	697b      	ldr	r3, [r7, #20]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000090c 	.word	0x2000090c

080028f4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028f8:	f000 f906 	bl	8002b08 <HAL_GetTick>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <MX_SPI3_Init+0x80>)
 8002914:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800291c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800292a:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293e:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2218      	movs	r2, #24
 8002944:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2207      	movs	r2, #7
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2208      	movs	r2, #8
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f004 f842 	bl	80069f4 <HAL_SPI_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40003c00 	.word	0x40003c00

08002988 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002990:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <SPI3_MspInit+0xa8>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <SPI3_MspInit+0xa8>)
 8002996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <SPI3_MspInit+0xa8>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <SPI3_MspInit+0xa8>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <SPI3_MspInit+0xa8>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <SPI3_MspInit+0xa8>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80029c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80029d2:	2306      	movs	r3, #6
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4815      	ldr	r0, [pc, #84]	; (8002a34 <SPI3_MspInit+0xac>)
 80029de:	f001 fa27 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80029e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f0:	2303      	movs	r3, #3
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80029f4:	2306      	movs	r3, #6
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	480d      	ldr	r0, [pc, #52]	; (8002a34 <SPI3_MspInit+0xac>)
 8002a00:	f001 fa16 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 8002a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 8002a16:	2306      	movs	r3, #6
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4804      	ldr	r0, [pc, #16]	; (8002a34 <SPI3_MspInit+0xac>)
 8002a22:	f001 fa05 	bl	8003e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002a26:	bf00      	nop
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000800 	.word	0x48000800

08002a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a42:	2003      	movs	r0, #3
 8002a44:	f001 f848 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f000 f80d 	bl	8002a68 <HAL_InitTick>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	e001      	b.n	8002a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a5a:	f7ff f90f 	bl	8001c7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <HAL_InitTick+0x70>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 f855 	bl	8003b42 <HAL_SYSTICK_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d809      	bhi.n	8002ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	f001 f81f 	bl	8003aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_InitTick+0x74>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e007      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e004      	b.n	8002ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e001      	b.n	8002ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000020 	.word	0x20000020
 8002ad8:	20000004 	.word	0x20000004
 8002adc:	2000001c 	.word	0x2000001c

08002ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x20>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x24>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_IncTick+0x24>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000020 	.word	0x20000020
 8002b04:	20000970 	.word	0x20000970

08002b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <HAL_GetTick+0x14>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000970 	.word	0x20000970

08002b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b28:	f7ff ffee 	bl	8002b08 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d005      	beq.n	8002b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_Delay+0x44>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4413      	add	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b46:	bf00      	nop
 8002b48:	f7ff ffde 	bl	8002b08 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d8f7      	bhi.n	8002b48 <HAL_Delay+0x28>
  {
  }
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000020 	.word	0x20000020

08002b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	609a      	str	r2, [r3, #8]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	3360      	adds	r3, #96	; 0x60
 8002be2:	461a      	mov	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <LL_ADC_SetOffset+0x44>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	03fff000 	.word	0x03fff000

08002c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c6e:	bf00      	nop
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	615a      	str	r2, [r3, #20]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3330      	adds	r3, #48	; 0x30
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	4413      	add	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	211f      	movs	r1, #31
 8002ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0e9b      	lsrs	r3, r3, #26
 8002cd8:	f003 011f 	and.w	r1, r3, #31
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cec:	bf00      	nop
 8002cee:	371c      	adds	r7, #28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3314      	adds	r3, #20
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0e5b      	lsrs	r3, r3, #25
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	0d1b      	lsrs	r3, r3, #20
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2107      	movs	r1, #7
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0d1b      	lsrs	r3, r3, #20
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0318 	and.w	r3, r3, #24
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	400b      	ands	r3, r1
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	0007ffff 	.word	0x0007ffff

08002d98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002da8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6093      	str	r3, [r2, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d101      	bne.n	8002dd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002df4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <LL_ADC_IsEnabled+0x18>
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <LL_ADC_IsEnabled+0x1a>
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d101      	bne.n	8002e72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d101      	bne.n	8002e98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e12f      	b.n	8003122 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d109      	bne.n	8002ee4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7fe fef7 	bl	8001cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff67 	bl	8002dbc <LL_ADC_IsDeepPowerDownEnabled>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff4d 	bl	8002d98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff ff82 	bl	8002e0c <LL_ADC_IsInternalRegulatorEnabled>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d115      	bne.n	8002f3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff ff66 	bl	8002de4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f18:	4b84      	ldr	r3, [pc, #528]	; (800312c <HAL_ADC_Init+0x284>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	099b      	lsrs	r3, r3, #6
 8002f1e:	4a84      	ldr	r2, [pc, #528]	; (8003130 <HAL_ADC_Init+0x288>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f2c:	e002      	b.n	8002f34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f9      	bne.n	8002f2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff64 	bl	8002e0c <LL_ADC_IsInternalRegulatorEnabled>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10d      	bne.n	8002f66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff ff75 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8002f70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80c8 	bne.w	8003110 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 80c4 	bne.w	8003110 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f90:	f043 0202 	orr.w	r2, r3, #2
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff49 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa8:	4862      	ldr	r0, [pc, #392]	; (8003134 <HAL_ADC_Init+0x28c>)
 8002faa:	f7ff ff43 	bl	8002e34 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	485f      	ldr	r0, [pc, #380]	; (8003138 <HAL_ADC_Init+0x290>)
 8002fbc:	f7ff fdd4 	bl	8002b68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7e5b      	ldrb	r3, [r3, #25]
 8002fc4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fd0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fd6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fde:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	045b      	lsls	r3, r3, #17
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4313      	orrs	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_ADC_Init+0x294>)
 8003020:	4013      	ands	r3, r2
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	430b      	orrs	r3, r1
 800302a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff12 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8003036:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff1f 	bl	8002e80 <LL_ADC_INJ_IsConversionOngoing>
 8003042:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d140      	bne.n	80030cc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13d      	bne.n	80030cc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	7e1b      	ldrb	r3, [r3, #24]
 8003058:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800305a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003062:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003072:	f023 0306 	bic.w	r3, r3, #6
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	430b      	orrs	r3, r1
 800307e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003086:	2b01      	cmp	r3, #1
 8003088:	d118      	bne.n	80030bc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030a0:	4311      	orrs	r1, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80030a6:	4311      	orrs	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030ac:	430a      	orrs	r2, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	611a      	str	r2, [r3, #16]
 80030ba:	e007      	b.n	80030cc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d10c      	bne.n	80030ee <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f023 010f 	bic.w	r1, r3, #15
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	1e5a      	subs	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
 80030ec:	e007      	b.n	80030fe <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 020f 	bic.w	r2, r2, #15
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	f023 0303 	bic.w	r3, r3, #3
 8003106:	f043 0201 	orr.w	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	659a      	str	r2, [r3, #88]	; 0x58
 800310e:	e007      	b.n	8003120 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f043 0210 	orr.w	r2, r3, #16
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003120:	7ffb      	ldrb	r3, [r7, #31]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000004 	.word	0x20000004
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	50040000 	.word	0x50040000
 8003138:	50040300 	.word	0x50040300
 800313c:	fff0c007 	.word	0xfff0c007

08003140 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b0b6      	sub	sp, #216	; 0xd8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x22>
 800315e:	2302      	movs	r3, #2
 8003160:	e3d5      	b.n	800390e <HAL_ADC_ConfigChannel+0x7ce>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fe73 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 83ba 	bne.w	80038f0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d824      	bhi.n	80031ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	3b02      	subs	r3, #2
 800318a:	2b03      	cmp	r3, #3
 800318c:	d81b      	bhi.n	80031c6 <HAL_ADC_ConfigChannel+0x86>
 800318e:	a201      	add	r2, pc, #4	; (adr r2, 8003194 <HAL_ADC_ConfigChannel+0x54>)
 8003190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003194:	080031a5 	.word	0x080031a5
 8003198:	080031ad 	.word	0x080031ad
 800319c:	080031b5 	.word	0x080031b5
 80031a0:	080031bd 	.word	0x080031bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	220c      	movs	r2, #12
 80031a8:	605a      	str	r2, [r3, #4]
          break;
 80031aa:	e011      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	2212      	movs	r2, #18
 80031b0:	605a      	str	r2, [r3, #4]
          break;
 80031b2:	e00d      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2218      	movs	r2, #24
 80031b8:	605a      	str	r2, [r3, #4]
          break;
 80031ba:	e009      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c2:	605a      	str	r2, [r3, #4]
          break;
 80031c4:	e004      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2206      	movs	r2, #6
 80031ca:	605a      	str	r2, [r3, #4]
          break;
 80031cc:	e000      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6859      	ldr	r1, [r3, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	461a      	mov	r2, r3
 80031de:	f7ff fd5f 	bl	8002ca0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fe37 	bl	8002e5a <LL_ADC_REG_IsConversionOngoing>
 80031ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fe43 	bl	8002e80 <LL_ADC_INJ_IsConversionOngoing>
 80031fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 81c1 	bne.w	800358a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 81bc 	bne.w	800358a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321a:	d10f      	bne.n	800323c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2200      	movs	r2, #0
 8003226:	4619      	mov	r1, r3
 8003228:	f7ff fd66 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fd20 	bl	8002c7a <LL_ADC_SetSamplingTimeCommonConfig>
 800323a:	e00e      	b.n	800325a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	461a      	mov	r2, r3
 800324a:	f7ff fd55 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd10 	bl	8002c7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d00a      	beq.n	8003292 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	6919      	ldr	r1, [r3, #16]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800328c:	f7ff fca0 	bl	8002bd0 <LL_ADC_SetOffset>
 8003290:	e17b      	b.n	800358a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2100      	movs	r1, #0
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fcbd 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <HAL_ADC_ConfigChannel+0x17e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fcb2 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	e01e      	b.n	80032fc <HAL_ADC_ConfigChannel+0x1bc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fca7 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d4:	fa93 f3a3 	rbit	r3, r3
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80032ec:	2320      	movs	r3, #32
 80032ee:	e004      	b.n	80032fa <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80032f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x1d4>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	e018      	b.n	8003346 <HAL_ADC_ConfigChannel+0x206>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003338:	2320      	movs	r3, #32
 800333a:	e004      	b.n	8003346 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800333c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003340:	fab3 f383 	clz	r3, r3
 8003344:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003346:	429a      	cmp	r2, r3
 8003348:	d106      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fc76 	bl	8002c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fc5a 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003364:	4603      	mov	r3, r0
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x244>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fc4f 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 800337a:	4603      	mov	r3, r0
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	f003 021f 	and.w	r2, r3, #31
 8003382:	e01e      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x282>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f7ff fc44 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003390:	4603      	mov	r3, r0
 8003392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80033b2:	2320      	movs	r3, #32
 80033b4:	e004      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80033b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d105      	bne.n	80033da <HAL_ADC_ConfigChannel+0x29a>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	0e9b      	lsrs	r3, r3, #26
 80033d4:	f003 031f 	and.w	r3, r3, #31
 80033d8:	e018      	b.n	800340c <HAL_ADC_ConfigChannel+0x2cc>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e004      	b.n	800340c <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003406:	fab3 f383 	clz	r3, r3
 800340a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340c:	429a      	cmp	r2, r3
 800340e:	d106      	bne.n	800341e <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fc13 	bl	8002c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2102      	movs	r1, #2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fbf7 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10a      	bne.n	800344a <HAL_ADC_ConfigChannel+0x30a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2102      	movs	r1, #2
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fbec 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	f003 021f 	and.w	r2, r3, #31
 8003448:	e01e      	b.n	8003488 <HAL_ADC_ConfigChannel+0x348>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fbe1 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003456:	4603      	mov	r3, r0
 8003458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e004      	b.n	8003486 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800347c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x360>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	0e9b      	lsrs	r3, r3, #26
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	e016      	b.n	80034ce <HAL_ADC_ConfigChannel+0x38e>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80034c0:	2320      	movs	r3, #32
 80034c2:	e004      	b.n	80034ce <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d106      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fbb2 	bl	8002c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2103      	movs	r1, #3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff fb96 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_ADC_ConfigChannel+0x3cc>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2103      	movs	r1, #3
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fb8b 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	f003 021f 	and.w	r2, r3, #31
 800350a:	e017      	b.n	800353c <HAL_ADC_ConfigChannel+0x3fc>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2103      	movs	r1, #3
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff fb80 	bl	8002c18 <LL_ADC_GetOffsetChannel>
 8003518:	4603      	mov	r3, r0
 800351a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003526:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e003      	b.n	800353a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x414>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0e9b      	lsrs	r3, r3, #26
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	e011      	b.n	8003578 <HAL_ADC_ConfigChannel+0x438>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003564:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003578:	429a      	cmp	r2, r3
 800357a:	d106      	bne.n	800358a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	2103      	movs	r1, #3
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fb5d 	bl	8002c44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff fc50 	bl	8002e34 <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	f040 8140 	bne.w	800381c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	461a      	mov	r2, r3
 80035aa:	f7ff fbd1 	bl	8002d50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a8f      	ldr	r2, [pc, #572]	; (80037f0 <HAL_ADC_ConfigChannel+0x6b0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	f040 8131 	bne.w	800381c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10b      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x4a2>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	0e9b      	lsrs	r3, r3, #26
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2b09      	cmp	r3, #9
 80035d8:	bf94      	ite	ls
 80035da:	2301      	movls	r3, #1
 80035dc:	2300      	movhi	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	e019      	b.n	8003616 <HAL_ADC_ConfigChannel+0x4d6>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80035fa:	2320      	movs	r3, #32
 80035fc:	e003      	b.n	8003606 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80035fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	2b09      	cmp	r3, #9
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003616:	2b00      	cmp	r3, #0
 8003618:	d079      	beq.n	800370e <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003622:	2b00      	cmp	r3, #0
 8003624:	d107      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x4f6>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0e9b      	lsrs	r3, r3, #26
 800362c:	3301      	adds	r3, #1
 800362e:	069b      	lsls	r3, r3, #26
 8003630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003634:	e015      	b.n	8003662 <HAL_ADC_ConfigChannel+0x522>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003646:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800364e:	2320      	movs	r3, #32
 8003650:	e003      	b.n	800365a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003654:	fab3 f383 	clz	r3, r3
 8003658:	b2db      	uxtb	r3, r3
 800365a:	3301      	adds	r3, #1
 800365c:	069b      	lsls	r3, r3, #26
 800365e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x542>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	3301      	adds	r3, #1
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2101      	movs	r1, #1
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	e017      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x572>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800369e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	3301      	adds	r3, #1
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	ea42 0103 	orr.w	r1, r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x598>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0e9b      	lsrs	r3, r3, #26
 80036c8:	3301      	adds	r3, #1
 80036ca:	f003 021f 	and.w	r2, r3, #31
 80036ce:	4613      	mov	r3, r2
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	4413      	add	r3, r2
 80036d4:	051b      	lsls	r3, r3, #20
 80036d6:	e018      	b.n	800370a <HAL_ADC_ConfigChannel+0x5ca>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80036f0:	2320      	movs	r3, #32
 80036f2:	e003      	b.n	80036fc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80036f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	3301      	adds	r3, #1
 80036fe:	f003 021f 	and.w	r2, r3, #31
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800370a:	430b      	orrs	r3, r1
 800370c:	e081      	b.n	8003812 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003716:	2b00      	cmp	r3, #0
 8003718:	d107      	bne.n	800372a <HAL_ADC_ConfigChannel+0x5ea>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	0e9b      	lsrs	r3, r3, #26
 8003720:	3301      	adds	r3, #1
 8003722:	069b      	lsls	r3, r3, #26
 8003724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003728:	e015      	b.n	8003756 <HAL_ADC_ConfigChannel+0x616>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	fa93 f3a3 	rbit	r3, r3
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003742:	2320      	movs	r3, #32
 8003744:	e003      	b.n	800374e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	fab3 f383 	clz	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	3301      	adds	r3, #1
 8003750:	069b      	lsls	r3, r3, #26
 8003752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x636>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	0e9b      	lsrs	r3, r3, #26
 8003768:	3301      	adds	r3, #1
 800376a:	f003 031f 	and.w	r3, r3, #31
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	e017      	b.n	80037a6 <HAL_ADC_ConfigChannel+0x666>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	61fb      	str	r3, [r7, #28]
  return result;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800378e:	2320      	movs	r3, #32
 8003790:	e003      	b.n	800379a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	fab3 f383 	clz	r3, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	3301      	adds	r3, #1
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	2101      	movs	r1, #1
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	ea42 0103 	orr.w	r1, r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x692>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	3301      	adds	r3, #1
 80037be:	f003 021f 	and.w	r2, r3, #31
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	3b1e      	subs	r3, #30
 80037ca:	051b      	lsls	r3, r3, #20
 80037cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d0:	e01e      	b.n	8003810 <HAL_ADC_ConfigChannel+0x6d0>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	613b      	str	r3, [r7, #16]
  return result;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80037ea:	2320      	movs	r3, #32
 80037ec:	e006      	b.n	80037fc <HAL_ADC_ConfigChannel+0x6bc>
 80037ee:	bf00      	nop
 80037f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 021f 	and.w	r2, r3, #31
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	3b1e      	subs	r3, #30
 800380a:	051b      	lsls	r3, r3, #20
 800380c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003810:	430b      	orrs	r3, r1
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	4619      	mov	r1, r3
 8003818:	f7ff fa6e 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_ADC_ConfigChannel+0x7d8>)
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d06c      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003828:	483c      	ldr	r0, [pc, #240]	; (800391c <HAL_ADC_ConfigChannel+0x7dc>)
 800382a:	f7ff f9c3 	bl	8002bb4 <LL_ADC_GetCommonPathInternalCh>
 800382e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3a      	ldr	r2, [pc, #232]	; (8003920 <HAL_ADC_ConfigChannel+0x7e0>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d127      	bne.n	800388c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800383c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d121      	bne.n	800388c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a35      	ldr	r2, [pc, #212]	; (8003924 <HAL_ADC_ConfigChannel+0x7e4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d157      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800385a:	4619      	mov	r1, r3
 800385c:	482f      	ldr	r0, [pc, #188]	; (800391c <HAL_ADC_ConfigChannel+0x7dc>)
 800385e:	f7ff f996 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_ADC_ConfigChannel+0x7e8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	099b      	lsrs	r3, r3, #6
 8003868:	4a30      	ldr	r2, [pc, #192]	; (800392c <HAL_ADC_ConfigChannel+0x7ec>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	099b      	lsrs	r3, r3, #6
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	4613      	mov	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800387c:	e002      	b.n	8003884 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3b01      	subs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f9      	bne.n	800387e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800388a:	e03a      	b.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <HAL_ADC_ConfigChannel+0x7f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d113      	bne.n	80038be <HAL_ADC_ConfigChannel+0x77e>
 8003896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800389a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10d      	bne.n	80038be <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_ADC_ConfigChannel+0x7e4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d12a      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b4:	4619      	mov	r1, r3
 80038b6:	4819      	ldr	r0, [pc, #100]	; (800391c <HAL_ADC_ConfigChannel+0x7dc>)
 80038b8:	f7ff f969 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038bc:	e021      	b.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1c      	ldr	r2, [pc, #112]	; (8003934 <HAL_ADC_ConfigChannel+0x7f4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d11c      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_ADC_ConfigChannel+0x7e4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038e6:	4619      	mov	r1, r3
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <HAL_ADC_ConfigChannel+0x7dc>)
 80038ea:	f7ff f950 	bl	8002b8e <LL_ADC_SetCommonPathInternalCh>
 80038ee:	e008      	b.n	8003902 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800390a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800390e:	4618      	mov	r0, r3
 8003910:	37d8      	adds	r7, #216	; 0xd8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	80080000 	.word	0x80080000
 800391c:	50040300 	.word	0x50040300
 8003920:	c7520000 	.word	0xc7520000
 8003924:	50040000 	.word	0x50040000
 8003928:	20000004 	.word	0x20000004
 800392c:	053e2d63 	.word	0x053e2d63
 8003930:	cb840000 	.word	0xcb840000
 8003934:	80000001 	.word	0x80000001

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4907      	ldr	r1, [pc, #28]	; (80039d4 <__NVIC_EnableIRQ+0x38>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d301      	bcc.n	8003aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <SysTick_Config+0x40>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f7ff ff8e 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <SysTick_Config+0x40>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SysTick_Config+0x40>)
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff29 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b00:	f7ff ff3e 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff ff8e 	bl	8003a2c <NVIC_EncodePriority>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff5d 	bl	80039d8 <__NVIC_SetPriority>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff31 	bl	800399c <__NVIC_EnableIRQ>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff ffa2 	bl	8003a94 <SysTick_Config>
 8003b50:	4603      	mov	r3, r0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0ac      	b.n	8003cc8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f8b2 	bl	8003cdc <DFSDM_GetChannelFromInstance>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a55      	ldr	r2, [pc, #340]	; (8003cd0 <HAL_DFSDM_ChannelInit+0x174>)
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e09f      	b.n	8003cc8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fe f8db 	bl	8001d44 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_DFSDM_ChannelInit+0x178>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a4f      	ldr	r2, [pc, #316]	; (8003cd4 <HAL_DFSDM_ChannelInit+0x178>)
 8003b96:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b98:	4b4e      	ldr	r3, [pc, #312]	; (8003cd4 <HAL_DFSDM_ChannelInit+0x178>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d125      	bne.n	8003bec <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ba0:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003baa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003bac:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4948      	ldr	r1, [pc, #288]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a46      	ldr	r2, [pc, #280]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bc0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003bc4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	791b      	ldrb	r3, [r3, #4]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d108      	bne.n	8003be0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003bce:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	041b      	lsls	r3, r3, #16
 8003bda:	493f      	ldr	r1, [pc, #252]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3c      	ldr	r2, [pc, #240]	; (8003cd8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bea:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003bfa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c0a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003c10:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 020f 	bic.w	r2, r2, #15
 8003c28:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003c50:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	3b01      	subs	r3, #1
 8003c62:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f002 0207 	and.w	r2, r2, #7
 8003c7c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ca8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f810 	bl	8003cdc <DFSDM_GetChannelFromInstance>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4904      	ldr	r1, [pc, #16]	; (8003cd0 <HAL_DFSDM_ChannelInit+0x174>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200001c8 	.word	0x200001c8
 8003cd4:	200001c4 	.word	0x200001c4
 8003cd8:	40016000 	.word	0x40016000

08003cdc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <DFSDM_GetChannelFromInstance+0x7c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d102      	bne.n	8003cf2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e02b      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <DFSDM_GetChannelFromInstance+0x80>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d102      	bne.n	8003d00 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e024      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <DFSDM_GetChannelFromInstance+0x84>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d102      	bne.n	8003d0e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e01d      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <DFSDM_GetChannelFromInstance+0x88>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d102      	bne.n	8003d1c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003d16:	2304      	movs	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e016      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <DFSDM_GetChannelFromInstance+0x8c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d102      	bne.n	8003d2a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d24:	2305      	movs	r3, #5
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e00f      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <DFSDM_GetChannelFromInstance+0x90>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d102      	bne.n	8003d38 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d32:	2306      	movs	r3, #6
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e008      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <DFSDM_GetChannelFromInstance+0x94>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d102      	bne.n	8003d46 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d40:	2307      	movs	r3, #7
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e001      	b.n	8003d4a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d46:	2303      	movs	r3, #3
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40016000 	.word	0x40016000
 8003d5c:	40016020 	.word	0x40016020
 8003d60:	40016040 	.word	0x40016040
 8003d64:	40016080 	.word	0x40016080
 8003d68:	400160a0 	.word	0x400160a0
 8003d6c:	400160c0 	.word	0x400160c0
 8003d70:	400160e0 	.word	0x400160e0

08003d74 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d103      	bne.n	8003d94 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	605a      	str	r2, [r3, #4]
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	bf00      	nop
  }

  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e003      	b.n	8003dc4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
  }
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2201      	movs	r2, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <HAL_EXTI_IRQHandler+0x5c>)
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	4013      	ands	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	4798      	blx	r3
    }
  }
}
 8003e22:	bf00      	nop
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40010414 	.word	0x40010414

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3e:	e166      	b.n	800410e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	2101      	movs	r1, #1
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8158 	beq.w	8004108 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d00b      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e6c:	2b11      	cmp	r3, #17
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b12      	cmp	r3, #18
 8003e76:	d130      	bne.n	8003eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	2203      	movs	r2, #3
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eae:	2201      	movs	r2, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0201 	and.w	r2, r3, #1
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	2203      	movs	r2, #3
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43db      	mvns	r3, r3
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0xea>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b12      	cmp	r3, #18
 8003f18:	d123      	bne.n	8003f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	6939      	ldr	r1, [r7, #16]
 8003f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4013      	ands	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80b2 	beq.w	8004108 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_GPIO_Init+0x2fc>)
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	4a60      	ldr	r2, [pc, #384]	; (800412c <HAL_GPIO_Init+0x2fc>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6613      	str	r3, [r2, #96]	; 0x60
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_GPIO_Init+0x2fc>)
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fbc:	4a5c      	ldr	r2, [pc, #368]	; (8004130 <HAL_GPIO_Init+0x300>)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	220f      	movs	r2, #15
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fe6:	d02b      	beq.n	8004040 <HAL_GPIO_Init+0x210>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_GPIO_Init+0x304>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d025      	beq.n	800403c <HAL_GPIO_Init+0x20c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a51      	ldr	r2, [pc, #324]	; (8004138 <HAL_GPIO_Init+0x308>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d01f      	beq.n	8004038 <HAL_GPIO_Init+0x208>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a50      	ldr	r2, [pc, #320]	; (800413c <HAL_GPIO_Init+0x30c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d019      	beq.n	8004034 <HAL_GPIO_Init+0x204>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_GPIO_Init+0x310>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_GPIO_Init+0x200>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_GPIO_Init+0x314>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00d      	beq.n	800402c <HAL_GPIO_Init+0x1fc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <HAL_GPIO_Init+0x318>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <HAL_GPIO_Init+0x1f8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_GPIO_Init+0x31c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d101      	bne.n	8004024 <HAL_GPIO_Init+0x1f4>
 8004020:	2307      	movs	r3, #7
 8004022:	e00e      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004024:	2308      	movs	r3, #8
 8004026:	e00c      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004028:	2306      	movs	r3, #6
 800402a:	e00a      	b.n	8004042 <HAL_GPIO_Init+0x212>
 800402c:	2305      	movs	r3, #5
 800402e:	e008      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004030:	2304      	movs	r3, #4
 8004032:	e006      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004034:	2303      	movs	r3, #3
 8004036:	e004      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004038:	2302      	movs	r3, #2
 800403a:	e002      	b.n	8004042 <HAL_GPIO_Init+0x212>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <HAL_GPIO_Init+0x212>
 8004040:	2300      	movs	r3, #0
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	f002 0203 	and.w	r2, r2, #3
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	4093      	lsls	r3, r2
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004052:	4937      	ldr	r1, [pc, #220]	; (8004130 <HAL_GPIO_Init+0x300>)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	089b      	lsrs	r3, r3, #2
 8004058:	3302      	adds	r3, #2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_GPIO_Init+0x320>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004084:	4a32      	ldr	r2, [pc, #200]	; (8004150 <HAL_GPIO_Init+0x320>)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800408a:	4b31      	ldr	r3, [pc, #196]	; (8004150 <HAL_GPIO_Init+0x320>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <HAL_GPIO_Init+0x320>)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040b4:	4b26      	ldr	r3, [pc, #152]	; (8004150 <HAL_GPIO_Init+0x320>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43db      	mvns	r3, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040d8:	4a1d      	ldr	r2, [pc, #116]	; (8004150 <HAL_GPIO_Init+0x320>)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_GPIO_Init+0x320>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_GPIO_Init+0x320>)
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	f47f ae91 	bne.w	8003e40 <HAL_GPIO_Init+0x10>
  }
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	40021000 	.word	0x40021000
 8004130:	40010000 	.word	0x40010000
 8004134:	48000400 	.word	0x48000400
 8004138:	48000800 	.word	0x48000800
 800413c:	48000c00 	.word	0x48000c00
 8004140:	48001000 	.word	0x48001000
 8004144:	48001400 	.word	0x48001400
 8004148:	48001800 	.word	0x48001800
 800414c:	48001c00 	.word	0x48001c00
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004162:	e0c9      	b.n	80042f8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004164:	2201      	movs	r2, #1
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80bc 	beq.w	80042f2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800417a:	4a66      	ldr	r2, [pc, #408]	; (8004314 <HAL_GPIO_DeInit+0x1c0>)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3302      	adds	r3, #2
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	220f      	movs	r2, #15
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4013      	ands	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041a2:	d02b      	beq.n	80041fc <HAL_GPIO_DeInit+0xa8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a5c      	ldr	r2, [pc, #368]	; (8004318 <HAL_GPIO_DeInit+0x1c4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d025      	beq.n	80041f8 <HAL_GPIO_DeInit+0xa4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a5b      	ldr	r2, [pc, #364]	; (800431c <HAL_GPIO_DeInit+0x1c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01f      	beq.n	80041f4 <HAL_GPIO_DeInit+0xa0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a5a      	ldr	r2, [pc, #360]	; (8004320 <HAL_GPIO_DeInit+0x1cc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d019      	beq.n	80041f0 <HAL_GPIO_DeInit+0x9c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a59      	ldr	r2, [pc, #356]	; (8004324 <HAL_GPIO_DeInit+0x1d0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <HAL_GPIO_DeInit+0x98>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a58      	ldr	r2, [pc, #352]	; (8004328 <HAL_GPIO_DeInit+0x1d4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00d      	beq.n	80041e8 <HAL_GPIO_DeInit+0x94>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_GPIO_DeInit+0x1d8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <HAL_GPIO_DeInit+0x90>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a56      	ldr	r2, [pc, #344]	; (8004330 <HAL_GPIO_DeInit+0x1dc>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_GPIO_DeInit+0x8c>
 80041dc:	2307      	movs	r3, #7
 80041de:	e00e      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041e0:	2308      	movs	r3, #8
 80041e2:	e00c      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041e4:	2306      	movs	r3, #6
 80041e6:	e00a      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041e8:	2305      	movs	r3, #5
 80041ea:	e008      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041ec:	2304      	movs	r3, #4
 80041ee:	e006      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041f0:	2303      	movs	r3, #3
 80041f2:	e004      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e002      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_GPIO_DeInit+0xaa>
 80041fc:	2300      	movs	r3, #0
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f002 0203 	and.w	r2, r2, #3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4093      	lsls	r3, r2
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d132      	bne.n	8004274 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800420e:	4b49      	ldr	r3, [pc, #292]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	43db      	mvns	r3, r3
 8004216:	4947      	ldr	r1, [pc, #284]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 8004218:	4013      	ands	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800421c:	4b45      	ldr	r3, [pc, #276]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	4943      	ldr	r1, [pc, #268]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 8004226:	4013      	ands	r3, r2
 8004228:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800422a:	4b42      	ldr	r3, [pc, #264]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	43db      	mvns	r3, r3
 8004232:	4940      	ldr	r1, [pc, #256]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 8004234:	4013      	ands	r3, r2
 8004236:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004238:	4b3e      	ldr	r3, [pc, #248]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	493c      	ldr	r1, [pc, #240]	; (8004334 <HAL_GPIO_DeInit+0x1e0>)
 8004242:	4013      	ands	r3, r2
 8004244:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	220f      	movs	r2, #15
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004256:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <HAL_GPIO_DeInit+0x1c0>)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	089b      	lsrs	r3, r3, #2
 800425c:	3302      	adds	r3, #2
 800425e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43da      	mvns	r2, r3
 8004266:	482b      	ldr	r0, [pc, #172]	; (8004314 <HAL_GPIO_DeInit+0x1c0>)
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	089b      	lsrs	r3, r3, #2
 800426c:	400a      	ands	r2, r1
 800426e:	3302      	adds	r3, #2
 8004270:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2103      	movs	r1, #3
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	08da      	lsrs	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3208      	adds	r2, #8
 8004290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	220f      	movs	r2, #15
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	08d2      	lsrs	r2, r2, #3
 80042a8:	4019      	ands	r1, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3208      	adds	r2, #8
 80042ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2103      	movs	r1, #3
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	401a      	ands	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	2101      	movs	r1, #1
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	2103      	movs	r1, #3
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	401a      	ands	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f af2f 	bne.w	8004164 <HAL_GPIO_DeInit+0x10>
  }
}
 8004306:	bf00      	nop
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40010000 	.word	0x40010000
 8004318:	48000400 	.word	0x48000400
 800431c:	48000800 	.word	0x48000800
 8004320:	48000c00 	.word	0x48000c00
 8004324:	48001000 	.word	0x48001000
 8004328:	48001400 	.word	0x48001400
 800432c:	48001800 	.word	0x48001800
 8004330:	48001c00 	.word	0x48001c00
 8004334:	40010400 	.word	0x40010400

08004338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004350:	2301      	movs	r3, #1
 8004352:	73fb      	strb	r3, [r7, #15]
 8004354:	e001      	b.n	800435a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	807b      	strh	r3, [r7, #2]
 8004374:	4613      	mov	r3, r2
 8004376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004378:	787b      	ldrb	r3, [r7, #1]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800437e:	887a      	ldrh	r2, [r7, #2]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004384:	e002      	b.n	800438c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	041a      	lsls	r2, r3, #16
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43d9      	mvns	r1, r3
 80043b6:	887b      	ldrh	r3, [r7, #2]
 80043b8:	400b      	ands	r3, r1
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	619a      	str	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	88fb      	ldrh	r3, [r7, #6]
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043e2:	4a05      	ldr	r2, [pc, #20]	; (80043f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 f806 	bl	80043fc <HAL_GPIO_EXTI_Callback>
  }
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010400 	.word	0x40010400

080043fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e081      	b.n	8004528 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7fd fccb 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2224      	movs	r2, #36	; 0x24
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d107      	bne.n	800448c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	e006      	b.n	800449a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004498:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d104      	bne.n	80044ac <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	ea42 0103 	orr.w	r1, r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	021a      	lsls	r2, r3, #8
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69d9      	ldr	r1, [r3, #28]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d138      	bne.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004550:	2302      	movs	r3, #2
 8004552:	e032      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6819      	ldr	r1, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	e000      	b.n	80045ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
  }
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
 80045ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d139      	bne.n	8004650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e033      	b.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	; 0x24
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004650:	2302      	movs	r3, #2
  }
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7fe fa4c 	bl	8002b08 <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	e092      	b.n	80047a4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	2b00      	cmp	r3, #0
 800468a:	f040 808b 	bne.w	80047a4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fd fc16 	bl	8001ec0 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004694:	f241 3188 	movw	r1, #5000	; 0x1388
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f88b 	bl	80047b4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <HAL_OSPI_Init+0x150>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	68d1      	ldr	r1, [r2, #12]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	4311      	orrs	r1, r2
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6952      	ldr	r2, [r2, #20]
 80046ba:	3a01      	subs	r2, #1
 80046bc:	0212      	lsls	r2, r2, #8
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046c4:	4311      	orrs	r1, r2
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	69d2      	ldr	r2, [r2, #28]
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0412      	lsls	r2, r2, #16
 80046de:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	021a      	lsls	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	2120      	movs	r1, #32
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fbb8 	bl	8004e7c <OSPI_WaitFlagStateUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d146      	bne.n	80047a4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	1e5a      	subs	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800474c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0201 	orr.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d107      	bne.n	800478c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0202 	orr.w	r2, r2, #2
 800478a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004794:	d103      	bne.n	800479e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	645a      	str	r2, [r3, #68]	; 0x44
 800479c:	e002      	b.n	80047a4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2202      	movs	r2, #2
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	f8e0f8f4 	.word	0xf8e0f8f4

080047b4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b092      	sub	sp, #72	; 0x48
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_OSPIM_Config+0x40>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d105      	bne.n	8004802 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004800:	e004      	b.n	800480c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8004802:	2301      	movs	r3, #1
 8004804:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800480c:	2300      	movs	r3, #0
 800480e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004812:	e01f      	b.n	8004854 <HAL_OSPIM_Config+0x80>
 8004814:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800481c:	3301      	adds	r3, #1
 800481e:	b2d8      	uxtb	r0, r3
 8004820:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004824:	f107 0114 	add.w	r1, r7, #20
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	4619      	mov	r1, r3
 8004834:	f000 fb5a 	bl	8004eec <OSPIM_GetConfig>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2208      	movs	r2, #8
 8004848:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800484a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800484e:	3301      	adds	r3, #1
 8004850:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004854:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004858:	2b01      	cmp	r3, #1
 800485a:	d9dd      	bls.n	8004818 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 800485c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004860:	2b00      	cmp	r3, #0
 8004862:	f040 82fe 	bne.w	8004e62 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8004866:	4bcd      	ldr	r3, [pc, #820]	; (8004b9c <HAL_OSPIM_Config+0x3c8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004872:	4bca      	ldr	r3, [pc, #808]	; (8004b9c <HAL_OSPIM_Config+0x3c8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4ac9      	ldr	r2, [pc, #804]	; (8004b9c <HAL_OSPIM_Config+0x3c8>)
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800487e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800488a:	4bc5      	ldr	r3, [pc, #788]	; (8004ba0 <HAL_OSPIM_Config+0x3cc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00b      	beq.n	80048ae <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004896:	4bc2      	ldr	r3, [pc, #776]	; (8004ba0 <HAL_OSPIM_Config+0x3cc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4ac1      	ldr	r2, [pc, #772]	; (8004ba0 <HAL_OSPIM_Config+0x3cc>)
 800489c:	f023 0301 	bic.w	r3, r3, #1
 80048a0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80048a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80048ae:	49bd      	ldr	r1, [pc, #756]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 80048b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048be:	4413      	add	r3, r2
 80048c0:	3b2c      	subs	r3, #44	; 0x2c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	48b5      	ldr	r0, [pc, #724]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 80048ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048dc:	4413      	add	r3, r2
 80048de:	3b2c      	subs	r3, #44	; 0x2c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4403      	add	r3, r0
 80048ec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80048ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048fc:	4413      	add	r3, r2
 80048fe:	3b34      	subs	r3, #52	; 0x34
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80ac 	beq.w	8004a60 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004908:	49a6      	ldr	r1, [pc, #664]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 800490a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004918:	4413      	add	r3, r2
 800491a:	3b34      	subs	r3, #52	; 0x34
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3b01      	subs	r3, #1
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	489f      	ldr	r0, [pc, #636]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004936:	4413      	add	r3, r2
 8004938:	3b34      	subs	r3, #52	; 0x34
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	f021 0201 	bic.w	r2, r1, #1
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4403      	add	r3, r0
 8004946:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004956:	4413      	add	r3, r2
 8004958:	3b30      	subs	r3, #48	; 0x30
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d01f      	beq.n	80049a0 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004960:	4990      	ldr	r1, [pc, #576]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004970:	4413      	add	r3, r2
 8004972:	3b30      	subs	r3, #48	; 0x30
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	6859      	ldr	r1, [r3, #4]
 800497e:	4889      	ldr	r0, [pc, #548]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800498e:	4413      	add	r3, r2
 8004990:	3b30      	subs	r3, #48	; 0x30
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3b01      	subs	r3, #1
 8004996:	f021 0210 	bic.w	r2, r1, #16
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4403      	add	r3, r0
 800499e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80049a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ae:	4413      	add	r3, r2
 80049b0:	3b28      	subs	r3, #40	; 0x28
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d023      	beq.n	8004a00 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80049b8:	497a      	ldr	r1, [pc, #488]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 80049ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049c8:	4413      	add	r3, r2
 80049ca:	3b28      	subs	r3, #40	; 0x28
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	4872      	ldr	r0, [pc, #456]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 80049dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ea:	4413      	add	r3, r2
 80049ec:	3b28      	subs	r3, #40	; 0x28
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4403      	add	r3, r0
 80049fe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a0e:	4413      	add	r3, r2
 8004a10:	3b24      	subs	r3, #36	; 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d023      	beq.n	8004a60 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004a18:	4962      	ldr	r1, [pc, #392]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a28:	4413      	add	r3, r2
 8004a2a:	3b24      	subs	r3, #36	; 0x24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	6859      	ldr	r1, [r3, #4]
 8004a3a:	485a      	ldr	r0, [pc, #360]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004a3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3b24      	subs	r3, #36	; 0x24
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4403      	add	r3, r0
 8004a5e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	6819      	ldr	r1, [r3, #0]
 8004a64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a74:	4413      	add	r3, r2
 8004a76:	3b34      	subs	r3, #52	; 0x34
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4299      	cmp	r1, r3
 8004a7c:	d03c      	beq.n	8004af8 <HAL_OSPIM_Config+0x324>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a92:	4413      	add	r3, r2
 8004a94:	3b30      	subs	r3, #48	; 0x30
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	d02d      	beq.n	8004af8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6899      	ldr	r1, [r3, #8]
 8004aa0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b2c      	subs	r3, #44	; 0x2c
 8004ab4:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	d01e      	beq.n	8004af8 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	68d9      	ldr	r1, [r3, #12]
 8004abe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ace:	4413      	add	r3, r2
 8004ad0:	3b28      	subs	r3, #40	; 0x28
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	d00f      	beq.n	8004af8 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6919      	ldr	r1, [r3, #16]
 8004adc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004aec:	4413      	add	r3, r2
 8004aee:	3b24      	subs	r3, #36	; 0x24
 8004af0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004af2:	4299      	cmp	r1, r3
 8004af4:	f040 80e0 	bne.w	8004cb8 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004af8:	492a      	ldr	r1, [pc, #168]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004afa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3b34      	subs	r3, #52	; 0x34
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	4822      	ldr	r0, [pc, #136]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004b1a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3b34      	subs	r3, #52	; 0x34
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	f021 0201 	bic.w	r2, r1, #1
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4403      	add	r3, r0
 8004b3a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004b3c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3b30      	subs	r3, #48	; 0x30
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d028      	beq.n	8004ba8 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004b56:	4913      	ldr	r1, [pc, #76]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004b58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b68:	4413      	add	r3, r2
 8004b6a:	3b30      	subs	r3, #48	; 0x30
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	6859      	ldr	r1, [r3, #4]
 8004b76:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <HAL_OSPIM_Config+0x3d0>)
 8004b78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b88:	4413      	add	r3, r2
 8004b8a:	3b30      	subs	r3, #48	; 0x30
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	f021 0210 	bic.w	r2, r1, #16
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4403      	add	r3, r0
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e005      	b.n	8004ba8 <HAL_OSPIM_Config+0x3d4>
 8004b9c:	a0001000 	.word	0xa0001000
 8004ba0:	a0001400 	.word	0xa0001400
 8004ba4:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004ba8:	49b1      	ldr	r1, [pc, #708]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004baa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bba:	4413      	add	r3, r2
 8004bbc:	3b2c      	subs	r3, #44	; 0x2c
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	48a9      	ldr	r0, [pc, #676]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004bca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b2c      	subs	r3, #44	; 0x2c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4403      	add	r3, r0
 8004bea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004bec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b28      	subs	r3, #40	; 0x28
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d025      	beq.n	8004c52 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004c06:	499a      	ldr	r1, [pc, #616]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004c08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c18:	4413      	add	r3, r2
 8004c1a:	3b28      	subs	r3, #40	; 0x28
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	4891      	ldr	r0, [pc, #580]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004c2c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3b28      	subs	r3, #40	; 0x28
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	f003 0301 	and.w	r3, r3, #1
 8004c48:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4403      	add	r3, r0
 8004c50:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c52:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c62:	4413      	add	r3, r2
 8004c64:	3b24      	subs	r3, #36	; 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d025      	beq.n	8004cb8 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004c6c:	4980      	ldr	r1, [pc, #512]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004c6e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c72:	4613      	mov	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c7e:	4413      	add	r3, r2
 8004c80:	3b24      	subs	r3, #36	; 0x24
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	6859      	ldr	r1, [r3, #4]
 8004c90:	4877      	ldr	r0, [pc, #476]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004c92:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3b24      	subs	r3, #36	; 0x24
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4403      	add	r3, r0
 8004cb6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8004cb8:	4a6d      	ldr	r2, [pc, #436]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ccc:	025b      	lsls	r3, r3, #9
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	4967      	ldr	r1, [pc, #412]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8004ce2:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 0203 	bic.w	r2, r3, #3
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	495d      	ldr	r1, [pc, #372]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d014      	beq.n	8004d3e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8004d14:	4a56      	ldr	r2, [pc, #344]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	015b      	lsls	r3, r3, #5
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	4950      	ldr	r1, [pc, #320]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	f042 0210 	orr.w	r2, r2, #16
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004d4a:	4a49      	ldr	r2, [pc, #292]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d62:	049b      	lsls	r3, r3, #18
 8004d64:	431a      	orrs	r2, r3
 8004d66:	4942      	ldr	r1, [pc, #264]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	605a      	str	r2, [r3, #4]
 8004d7c:	e01c      	b.n	8004db8 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d018      	beq.n	8004db8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004d86:	4a3a      	ldr	r2, [pc, #232]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d9e:	069b      	lsls	r3, r3, #26
 8004da0:	431a      	orrs	r2, r3
 8004da2:	4933      	ldr	r1, [pc, #204]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	3b01      	subs	r3, #1
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d019      	beq.n	8004df8 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004dc4:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ddc:	049b      	lsls	r3, r3, #18
 8004dde:	431a      	orrs	r2, r3
 8004de0:	4923      	ldr	r1, [pc, #140]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	605a      	str	r2, [r3, #4]
 8004df6:	e01c      	b.n	8004e32 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d018      	beq.n	8004e32 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004e00:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e18:	069b      	lsls	r3, r3, #26
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	4914      	ldr	r1, [pc, #80]	; (8004e70 <HAL_OSPIM_Config+0x69c>)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004e32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <HAL_OSPIM_Config+0x6a0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <HAL_OSPIM_Config+0x6a0>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004e4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004e56:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <HAL_OSPIM_Config+0x6a4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <HAL_OSPIM_Config+0x6a4>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004e62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3748      	adds	r7, #72	; 0x48
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	50061c00 	.word	0x50061c00
 8004e74:	a0001000 	.word	0xa0001000
 8004e78:	a0001400 	.word	0xa0001400

08004e7c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e8c:	e01a      	b.n	8004ec4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d016      	beq.n	8004ec4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fd fe37 	bl	8002b08 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb8:	f043 0201 	orr.w	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e00e      	b.n	8004ee2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d1d6      	bne.n	8004e8e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
	...

08004eec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	6039      	str	r1, [r7, #0]
 8004ef6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d005      	beq.n	8004f12 <OSPIM_GetConfig+0x26>
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d802      	bhi.n	8004f12 <OSPIM_GetConfig+0x26>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
 8004f16:	e08e      	b.n	8005036 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2200      	movs	r2, #0
 8004f34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d101      	bne.n	8004f40 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8004f3c:	4b41      	ldr	r3, [pc, #260]	; (8005044 <OSPIM_GetConfig+0x158>)
 8004f3e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e074      	b.n	8005030 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004f46:	4a40      	ldr	r2, [pc, #256]	; (8005048 <OSPIM_GetConfig+0x15c>)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4053      	eors	r3, r2
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4053      	eors	r3, r2
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4053      	eors	r3, r2
 8004fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d018      	beq.n	8004fee <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4053      	eors	r3, r2
 8004fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d111      	bne.n	8004fee <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	e005      	b.n	8004fee <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d018      	beq.n	800502a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4053      	eors	r3, r2
 8004ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d111      	bne.n	800502a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	611a      	str	r2, [r3, #16]
 800501c:	e005      	b.n	800502a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d987      	bls.n	8004f46 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8005036:	7dfb      	ldrb	r3, [r7, #23]
}
 8005038:	4618      	mov	r0, r3
 800503a:	371c      	adds	r7, #28
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	04040222 	.word	0x04040222
 8005048:	50061c00 	.word	0x50061c00

0800504c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40007000 	.word	0x40007000

0800506c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507c:	d102      	bne.n	8005084 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800507e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005082:	e00b      	b.n	800509c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005084:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800508a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d102      	bne.n	800509a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005098:	e000      	b.n	800509c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800509a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40007000 	.word	0x40007000

080050ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d141      	bne.n	800513e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050ba:	4b4b      	ldr	r3, [pc, #300]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d131      	bne.n	800512c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050c8:	4b47      	ldr	r3, [pc, #284]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ce:	4a46      	ldr	r2, [pc, #280]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050d8:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050e0:	4a41      	ldr	r2, [pc, #260]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050e8:	4b40      	ldr	r3, [pc, #256]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2232      	movs	r2, #50	; 0x32
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	0c9b      	lsrs	r3, r3, #18
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050fe:	e002      	b.n	8005106 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3b01      	subs	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d102      	bne.n	800511a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f2      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800511a:	4b33      	ldr	r3, [pc, #204]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005126:	d158      	bne.n	80051da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e057      	b.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800512c:	4b2e      	ldr	r3, [pc, #184]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005132:	4a2d      	ldr	r2, [pc, #180]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800513c:	e04d      	b.n	80051da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005144:	d141      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005146:	4b28      	ldr	r3, [pc, #160]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800514e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005152:	d131      	bne.n	80051b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515a:	4a23      	ldr	r2, [pc, #140]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800515c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005164:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800516c:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005172:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005174:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2232      	movs	r2, #50	; 0x32
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005180:	fba2 2303 	umull	r2, r3, r2, r3
 8005184:	0c9b      	lsrs	r3, r3, #18
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800518a:	e002      	b.n	8005192 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3b01      	subs	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519e:	d102      	bne.n	80051a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f2      	bne.n	800518c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051a6:	4b10      	ldr	r3, [pc, #64]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d112      	bne.n	80051da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e011      	b.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051c8:	e007      	b.n	80051da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ca:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	40007000 	.word	0x40007000
 80051ec:	20000004 	.word	0x20000004
 80051f0:	431bde83 	.word	0x431bde83

080051f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f000 bc16 	b.w	8005a34 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005208:	4ba0      	ldr	r3, [pc, #640]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005212:	4b9e      	ldr	r3, [pc, #632]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80e4 	beq.w	80053f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_RCC_OscConfig+0x4c>
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	2b0c      	cmp	r3, #12
 8005234:	f040 808b 	bne.w	800534e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b01      	cmp	r3, #1
 800523c:	f040 8087 	bne.w	800534e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005240:	4b92      	ldr	r3, [pc, #584]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <HAL_RCC_OscConfig+0x64>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e3ed      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	4b8b      	ldr	r3, [pc, #556]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_RCC_OscConfig+0x7e>
 8005268:	4b88      	ldr	r3, [pc, #544]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005270:	e005      	b.n	800527e <HAL_RCC_OscConfig+0x8a>
 8005272:	4b86      	ldr	r3, [pc, #536]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527e:	4293      	cmp	r3, r2
 8005280:	d223      	bcs.n	80052ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fdca 	bl	8005e20 <RCC_SetFlashLatencyFromMSIRange>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e3ce      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005296:	4b7d      	ldr	r3, [pc, #500]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7c      	ldr	r2, [pc, #496]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800529c:	f043 0308 	orr.w	r3, r3, #8
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b7a      	ldr	r3, [pc, #488]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	4977      	ldr	r1, [pc, #476]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052b4:	4b75      	ldr	r3, [pc, #468]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	4972      	ldr	r1, [pc, #456]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	604b      	str	r3, [r1, #4]
 80052c8:	e025      	b.n	8005316 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ca:	4b70      	ldr	r3, [pc, #448]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6f      	ldr	r2, [pc, #444]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052d0:	f043 0308 	orr.w	r3, r3, #8
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b6d      	ldr	r3, [pc, #436]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	496a      	ldr	r1, [pc, #424]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052e8:	4b68      	ldr	r3, [pc, #416]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	4965      	ldr	r1, [pc, #404]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fd8a 	bl	8005e20 <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e38e      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005316:	f000 fcbf 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 800531a:	4602      	mov	r2, r0
 800531c:	4b5b      	ldr	r3, [pc, #364]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	091b      	lsrs	r3, r3, #4
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	495a      	ldr	r1, [pc, #360]	; (8005490 <HAL_RCC_OscConfig+0x29c>)
 8005328:	5ccb      	ldrb	r3, [r1, r3]
 800532a:	f003 031f 	and.w	r3, r3, #31
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_OscConfig+0x2a0>)
 8005334:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005336:	4b58      	ldr	r3, [pc, #352]	; (8005498 <HAL_RCC_OscConfig+0x2a4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd fb94 	bl	8002a68 <HAL_InitTick>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005344:	7bfb      	ldrb	r3, [r7, #15]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d052      	beq.n	80053f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	e372      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d032      	beq.n	80053bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005356:	4b4d      	ldr	r3, [pc, #308]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800535c:	f043 0301 	orr.w	r3, r3, #1
 8005360:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005362:	f7fd fbd1 	bl	8002b08 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800536a:	f7fd fbcd 	bl	8002b08 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e35b      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800537c:	4b43      	ldr	r3, [pc, #268]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005388:	4b40      	ldr	r3, [pc, #256]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a3f      	ldr	r2, [pc, #252]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800538e:	f043 0308 	orr.w	r3, r3, #8
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b3d      	ldr	r3, [pc, #244]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	493a      	ldr	r1, [pc, #232]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053a6:	4b39      	ldr	r3, [pc, #228]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	021b      	lsls	r3, r3, #8
 80053b4:	4935      	ldr	r1, [pc, #212]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
 80053ba:	e01a      	b.n	80053f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a32      	ldr	r2, [pc, #200]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053c8:	f7fd fb9e 	bl	8002b08 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053d0:	f7fd fb9a 	bl	8002b08 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e328      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053e2:	4b2a      	ldr	r3, [pc, #168]	; (800548c <HAL_RCC_OscConfig+0x298>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x1dc>
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d073      	beq.n	80054e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d005      	beq.n	8005410 <HAL_RCC_OscConfig+0x21c>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b0c      	cmp	r3, #12
 8005408:	d10e      	bne.n	8005428 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d10b      	bne.n	8005428 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d063      	beq.n	80054e4 <HAL_RCC_OscConfig+0x2f0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d15f      	bne.n	80054e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e305      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005430:	d106      	bne.n	8005440 <HAL_RCC_OscConfig+0x24c>
 8005432:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a15      	ldr	r2, [pc, #84]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0x288>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x270>
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a0f      	ldr	r2, [pc, #60]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0x288>
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a08      	ldr	r2, [pc, #32]	; (800548c <HAL_RCC_OscConfig+0x298>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a05      	ldr	r2, [pc, #20]	; (800548c <HAL_RCC_OscConfig+0x298>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01b      	beq.n	80054bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd fb40 	bl	8002b08 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548a:	e010      	b.n	80054ae <HAL_RCC_OscConfig+0x2ba>
 800548c:	40021000 	.word	0x40021000
 8005490:	0800a738 	.word	0x0800a738
 8005494:	20000004 	.word	0x20000004
 8005498:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800549c:	f7fd fb34 	bl	8002b08 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e2c2      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ae:	4baf      	ldr	r3, [pc, #700]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x2a8>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fd fb24 	bl	8002b08 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fd fb20 	bl	8002b08 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e2ae      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054d6:	4ba5      	ldr	r3, [pc, #660]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x2d0>
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d060      	beq.n	80055b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d005      	beq.n	8005504 <HAL_RCC_OscConfig+0x310>
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	2b0c      	cmp	r3, #12
 80054fc:	d119      	bne.n	8005532 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d116      	bne.n	8005532 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	4b99      	ldr	r3, [pc, #612]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x328>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e28b      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b93      	ldr	r3, [pc, #588]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4990      	ldr	r1, [pc, #576]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005530:	e040      	b.n	80055b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d023      	beq.n	8005582 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800553a:	4b8c      	ldr	r3, [pc, #560]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a8b      	ldr	r2, [pc, #556]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005546:	f7fd fadf 	bl	8002b08 <HAL_GetTick>
 800554a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554c:	e008      	b.n	8005560 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800554e:	f7fd fadb 	bl	8002b08 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e269      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005560:	4b82      	ldr	r3, [pc, #520]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0f0      	beq.n	800554e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556c:	4b7f      	ldr	r3, [pc, #508]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	061b      	lsls	r3, r3, #24
 800557a:	497c      	ldr	r1, [pc, #496]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800557c:	4313      	orrs	r3, r2
 800557e:	604b      	str	r3, [r1, #4]
 8005580:	e018      	b.n	80055b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005582:	4b7a      	ldr	r3, [pc, #488]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a79      	ldr	r2, [pc, #484]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800558c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558e:	f7fd fabb 	bl	8002b08 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005596:	f7fd fab7 	bl	8002b08 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e245      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055a8:	4b70      	ldr	r3, [pc, #448]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f0      	bne.n	8005596 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d03c      	beq.n	800563a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01c      	beq.n	8005602 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055c8:	4b68      	ldr	r3, [pc, #416]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80055ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ce:	4a67      	ldr	r2, [pc, #412]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fd fa96 	bl	8002b08 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fd fa92 	bl	8002b08 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e220      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f2:	4b5e      	ldr	r3, [pc, #376]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80055f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <HAL_RCC_OscConfig+0x3ec>
 8005600:	e01b      	b.n	800563a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005602:	4b5a      	ldr	r3, [pc, #360]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005608:	4a58      	ldr	r2, [pc, #352]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005612:	f7fd fa79 	bl	8002b08 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561a:	f7fd fa75 	bl	8002b08 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e203      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800562c:	4b4f      	ldr	r3, [pc, #316]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ef      	bne.n	800561a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0304 	and.w	r3, r3, #4
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80a6 	beq.w	8005794 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800564c:	4b47      	ldr	r3, [pc, #284]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800564e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10d      	bne.n	8005674 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005658:	4b44      	ldr	r3, [pc, #272]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	4a43      	ldr	r2, [pc, #268]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800565e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005662:	6593      	str	r3, [r2, #88]	; 0x58
 8005664:	4b41      	ldr	r3, [pc, #260]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005670:	2301      	movs	r3, #1
 8005672:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005674:	4b3e      	ldr	r3, [pc, #248]	; (8005770 <HAL_RCC_OscConfig+0x57c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	2b00      	cmp	r3, #0
 800567e:	d118      	bne.n	80056b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005680:	4b3b      	ldr	r3, [pc, #236]	; (8005770 <HAL_RCC_OscConfig+0x57c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a3a      	ldr	r2, [pc, #232]	; (8005770 <HAL_RCC_OscConfig+0x57c>)
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568c:	f7fd fa3c 	bl	8002b08 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005694:	f7fd fa38 	bl	8002b08 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e1c6      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a6:	4b32      	ldr	r3, [pc, #200]	; (8005770 <HAL_RCC_OscConfig+0x57c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f0      	beq.n	8005694 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d108      	bne.n	80056cc <HAL_RCC_OscConfig+0x4d8>
 80056ba:	4b2c      	ldr	r3, [pc, #176]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	4a2a      	ldr	r2, [pc, #168]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ca:	e024      	b.n	8005716 <HAL_RCC_OscConfig+0x522>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d110      	bne.n	80056f6 <HAL_RCC_OscConfig+0x502>
 80056d4:	4b25      	ldr	r3, [pc, #148]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056da:	4a24      	ldr	r2, [pc, #144]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056dc:	f043 0304 	orr.w	r3, r3, #4
 80056e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056e4:	4b21      	ldr	r3, [pc, #132]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ea:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056f4:	e00f      	b.n	8005716 <HAL_RCC_OscConfig+0x522>
 80056f6:	4b1d      	ldr	r3, [pc, #116]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fc:	4a1b      	ldr	r2, [pc, #108]	; (800576c <HAL_RCC_OscConfig+0x578>)
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005706:	4b19      	ldr	r3, [pc, #100]	; (800576c <HAL_RCC_OscConfig+0x578>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571e:	f7fd f9f3 	bl	8002b08 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005724:	e00a      	b.n	800573c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fd f9ef 	bl	8002b08 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e17b      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <HAL_RCC_OscConfig+0x578>)
 800573e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ed      	beq.n	8005726 <HAL_RCC_OscConfig+0x532>
 800574a:	e01a      	b.n	8005782 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fd f9dc 	bl	8002b08 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005752:	e00f      	b.n	8005774 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fd f9d8 	bl	8002b08 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d906      	bls.n	8005774 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e164      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005774:	4ba8      	ldr	r3, [pc, #672]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e8      	bne.n	8005754 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005782:	7ffb      	ldrb	r3, [r7, #31]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005788:	4ba3      	ldr	r3, [pc, #652]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	4aa2      	ldr	r2, [pc, #648]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005792:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d03c      	beq.n	800581a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01c      	beq.n	80057e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a8:	4b9b      	ldr	r3, [pc, #620]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80057aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ae:	4a9a      	ldr	r2, [pc, #616]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fd f9a6 	bl	8002b08 <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057be:	e008      	b.n	80057d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057c0:	f7fd f9a2 	bl	8002b08 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d901      	bls.n	80057d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e130      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057d2:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80057d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0ef      	beq.n	80057c0 <HAL_RCC_OscConfig+0x5cc>
 80057e0:	e01b      	b.n	800581a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057e2:	4b8d      	ldr	r3, [pc, #564]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80057e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e8:	4a8b      	ldr	r2, [pc, #556]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fd f989 	bl	8002b08 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057fa:	f7fd f985 	bl	8002b08 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e113      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800580c:	4b82      	ldr	r3, [pc, #520]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800580e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1ef      	bne.n	80057fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8107 	beq.w	8005a32 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	2b02      	cmp	r3, #2
 800582a:	f040 80cb 	bne.w	80059c4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800582e:	4b7a      	ldr	r3, [pc, #488]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f003 0203 	and.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	429a      	cmp	r2, r3
 8005840:	d12c      	bne.n	800589c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	3b01      	subs	r3, #1
 800584e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d123      	bne.n	800589c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d11b      	bne.n	800589c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d113      	bne.n	800589c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	3b01      	subs	r3, #1
 8005882:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d109      	bne.n	800589c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	3b01      	subs	r3, #1
 8005896:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d06d      	beq.n	8005978 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d068      	beq.n	8005974 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058a2:	4b5d      	ldr	r3, [pc, #372]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058ae:	4b5a      	ldr	r3, [pc, #360]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0ba      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058be:	4b56      	ldr	r3, [pc, #344]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a55      	ldr	r2, [pc, #340]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ca:	f7fd f91d 	bl	8002b08 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d0:	e008      	b.n	80058e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d2:	f7fd f919 	bl	8002b08 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d901      	bls.n	80058e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e0a7      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058e4:	4b4c      	ldr	r3, [pc, #304]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1f0      	bne.n	80058d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058f0:	4b49      	ldr	r3, [pc, #292]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	4b49      	ldr	r3, [pc, #292]	; (8005a1c <HAL_RCC_OscConfig+0x828>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005900:	3a01      	subs	r2, #1
 8005902:	0112      	lsls	r2, r2, #4
 8005904:	4311      	orrs	r1, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800590a:	0212      	lsls	r2, r2, #8
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	3a01      	subs	r2, #1
 8005916:	0552      	lsls	r2, r2, #21
 8005918:	4311      	orrs	r1, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800591e:	0852      	lsrs	r2, r2, #1
 8005920:	3a01      	subs	r2, #1
 8005922:	0652      	lsls	r2, r2, #25
 8005924:	4311      	orrs	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800592a:	06d2      	lsls	r2, r2, #27
 800592c:	430a      	orrs	r2, r1
 800592e:	493a      	ldr	r1, [pc, #232]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005930:	4313      	orrs	r3, r2
 8005932:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005934:	4b38      	ldr	r3, [pc, #224]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800593a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800593e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005940:	4b35      	ldr	r3, [pc, #212]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4a34      	ldr	r2, [pc, #208]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800594a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800594c:	f7fd f8dc 	bl	8002b08 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005954:	f7fd f8d8 	bl	8002b08 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e066      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005972:	e05e      	b.n	8005a32 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e05d      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d156      	bne.n	8005a32 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a23      	ldr	r2, [pc, #140]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 800598a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800598e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005990:	4b21      	ldr	r3, [pc, #132]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a20      	ldr	r2, [pc, #128]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 8005996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800599c:	f7fd f8b4 	bl	8002b08 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059a4:	f7fd f8b0 	bl	8002b08 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e03e      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x7b0>
 80059c2:	e036      	b.n	8005a32 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b0c      	cmp	r3, #12
 80059c8:	d031      	beq.n	8005a2e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ca:	4b13      	ldr	r3, [pc, #76]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d105      	bne.n	80059ee <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059ee:	4b0a      	ldr	r3, [pc, #40]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <HAL_RCC_OscConfig+0x824>)
 80059f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80059f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fe:	f7fd f883 	bl	8002b08 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	e00c      	b.n	8005a20 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fd f87f 	bl	8002b08 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d905      	bls.n	8005a20 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e00d      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_OscConfig+0x848>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ec      	bne.n	8005a06 <HAL_RCC_OscConfig+0x812>
 8005a2c:	e001      	b.n	8005a32 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40021000 	.word	0x40021000

08005a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e10f      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b89      	ldr	r3, [pc, #548]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d910      	bls.n	8005a88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b86      	ldr	r3, [pc, #536]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f023 020f 	bic.w	r2, r3, #15
 8005a6e:	4984      	ldr	r1, [pc, #528]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a76:	4b82      	ldr	r3, [pc, #520]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0f7      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8089 	beq.w	8005ba8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d133      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a9e:	4b79      	ldr	r3, [pc, #484]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e0e4      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005aae:	f000 fa11 	bl	8005ed4 <RCC_GetSysClockFreqFromPLLSource>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a74      	ldr	r2, [pc, #464]	; (8005c88 <HAL_RCC_ClockConfig+0x248>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d955      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005aba:	4b72      	ldr	r3, [pc, #456]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10a      	bne.n	8005adc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ac6:	4b6f      	ldr	r3, [pc, #444]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ace:	4a6d      	ldr	r2, [pc, #436]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e044      	b.n	8005b66 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03e      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x126>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d13a      	bne.n	8005b66 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005af0:	4b64      	ldr	r3, [pc, #400]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005af8:	4a62      	ldr	r2, [pc, #392]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b00:	2380      	movs	r3, #128	; 0x80
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e02f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0e:	4b5d      	ldr	r3, [pc, #372]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d115      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e0ac      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b26:	4b57      	ldr	r3, [pc, #348]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e0a0      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b36:	4b53      	ldr	r3, [pc, #332]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e098      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b46:	f000 f8a7 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a4e      	ldr	r2, [pc, #312]	; (8005c88 <HAL_RCC_ClockConfig+0x248>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d909      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b52:	4b4c      	ldr	r3, [pc, #304]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b5a:	4a4a      	ldr	r2, [pc, #296]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b47      	ldr	r3, [pc, #284]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4944      	ldr	r1, [pc, #272]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b78:	f7fc ffc6 	bl	8002b08 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fc ffc2 	bl	8002b08 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e070      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b3b      	ldr	r3, [pc, #236]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb4:	4b33      	ldr	r3, [pc, #204]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4930      	ldr	r1, [pc, #192]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b80      	cmp	r3, #128	; 0x80
 8005bcc:	d105      	bne.n	8005bda <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bce:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bd8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d210      	bcs.n	8005c0a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f023 020f 	bic.w	r2, r3, #15
 8005bf0:	4923      	ldr	r1, [pc, #140]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf8:	4b21      	ldr	r3, [pc, #132]	; (8005c80 <HAL_RCC_ClockConfig+0x240>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d001      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e036      	b.n	8005c78 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d008      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	4918      	ldr	r1, [pc, #96]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d009      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c34:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4910      	ldr	r1, [pc, #64]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c48:	f000 f826 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <HAL_RCC_ClockConfig+0x244>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	091b      	lsrs	r3, r3, #4
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	490c      	ldr	r1, [pc, #48]	; (8005c8c <HAL_RCC_ClockConfig+0x24c>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	f003 031f 	and.w	r3, r3, #31
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	4a0a      	ldr	r2, [pc, #40]	; (8005c90 <HAL_RCC_ClockConfig+0x250>)
 8005c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c68:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <HAL_RCC_ClockConfig+0x254>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fc fefb 	bl	8002a68 <HAL_InitTick>
 8005c72:	4603      	mov	r3, r0
 8005c74:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40022000 	.word	0x40022000
 8005c84:	40021000 	.word	0x40021000
 8005c88:	04c4b400 	.word	0x04c4b400
 8005c8c:	0800a738 	.word	0x0800a738
 8005c90:	20000004 	.word	0x20000004
 8005c94:	2000001c 	.word	0x2000001c

08005c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cb0:	4b3b      	ldr	r3, [pc, #236]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x34>
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	2b0c      	cmp	r3, #12
 8005cc4:	d121      	bne.n	8005d0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d11e      	bne.n	8005d0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ccc:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0308 	and.w	r3, r3, #8
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cd8:	4b31      	ldr	r3, [pc, #196]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e005      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cf4:	4a2b      	ldr	r2, [pc, #172]	; (8005da4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10d      	bne.n	8005d20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d102      	bne.n	8005d16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e004      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d1c:	4b23      	ldr	r3, [pc, #140]	; (8005dac <HAL_RCC_GetSysClockFreq+0x114>)
 8005d1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d134      	bne.n	8005d90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d26:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d003      	beq.n	8005d3e <HAL_RCC_GetSysClockFreq+0xa6>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d003      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0xac>
 8005d3c:	e005      	b.n	8005d4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d40:	617b      	str	r3, [r7, #20]
      break;
 8005d42:	e005      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d44:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_RCC_GetSysClockFreq+0x114>)
 8005d46:	617b      	str	r3, [r7, #20]
      break;
 8005d48:	e002      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	617b      	str	r3, [r7, #20]
      break;
 8005d4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d50:	4b13      	ldr	r3, [pc, #76]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d5e:	4b10      	ldr	r3, [pc, #64]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	fb02 f203 	mul.w	r2, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	0e5b      	lsrs	r3, r3, #25
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	3301      	adds	r3, #1
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d90:	69bb      	ldr	r3, [r7, #24]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3724      	adds	r7, #36	; 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40021000 	.word	0x40021000
 8005da4:	0800a750 	.word	0x0800a750
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	007a1200 	.word	0x007a1200

08005db0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005db6:	681b      	ldr	r3, [r3, #0]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	20000004 	.word	0x20000004

08005dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dcc:	f7ff fff0 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4904      	ldr	r1, [pc, #16]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dde:	5ccb      	ldrb	r3, [r1, r3]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40021000 	.word	0x40021000
 8005df0:	0800a748 	.word	0x0800a748

08005df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005df8:	f7ff ffda 	bl	8005db0 <HAL_RCC_GetHCLKFreq>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	0adb      	lsrs	r3, r3, #11
 8005e04:	f003 0307 	and.w	r3, r3, #7
 8005e08:	4904      	ldr	r1, [pc, #16]	; (8005e1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e0a:	5ccb      	ldrb	r3, [r1, r3]
 8005e0c:	f003 031f 	and.w	r3, r3, #31
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	0800a748 	.word	0x0800a748

08005e20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e2c:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e38:	f7ff f918 	bl	800506c <HAL_PWREx_GetVoltageRange>
 8005e3c:	6178      	str	r0, [r7, #20]
 8005e3e:	e014      	b.n	8005e6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e40:	4b22      	ldr	r3, [pc, #136]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e58:	f7ff f908 	bl	800506c <HAL_PWREx_GetVoltageRange>
 8005e5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e5e:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e70:	d10b      	bne.n	8005e8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b80      	cmp	r3, #128	; 0x80
 8005e76:	d913      	bls.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2ba0      	cmp	r3, #160	; 0xa0
 8005e7c:	d902      	bls.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e7e:	2302      	movs	r3, #2
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e00d      	b.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e84:	2301      	movs	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	e00a      	b.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e8e:	d902      	bls.n	8005e96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e90:	2302      	movs	r3, #2
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	e004      	b.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b70      	cmp	r3, #112	; 0x70
 8005e9a:	d101      	bne.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ea0:	4b0b      	ldr	r3, [pc, #44]	; (8005ed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 020f 	bic.w	r2, r3, #15
 8005ea8:	4909      	ldr	r1, [pc, #36]	; (8005ed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d001      	beq.n	8005ec2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40022000 	.word	0x40022000

08005ed4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005ede:	4b2d      	ldr	r3, [pc, #180]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d118      	bne.n	8005f1c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eea:	4b2a      	ldr	r3, [pc, #168]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ef6:	4b27      	ldr	r3, [pc, #156]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e005      	b.n	8005f12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d003      	beq.n	8005f34 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d003      	beq.n	8005f3a <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005f32:	e005      	b.n	8005f40 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f34:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f36:	613b      	str	r3, [r7, #16]
    break;
 8005f38:	e005      	b.n	8005f46 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f3a:	4b19      	ldr	r3, [pc, #100]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005f3c:	613b      	str	r3, [r7, #16]
    break;
 8005f3e:	e002      	b.n	8005f46 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	613b      	str	r3, [r7, #16]
    break;
 8005f44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	091b      	lsrs	r3, r3, #4
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	3301      	adds	r3, #1
 8005f52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	0a1b      	lsrs	r3, r3, #8
 8005f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	fb02 f203 	mul.w	r2, r2, r3
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	0e5b      	lsrs	r3, r3, #25
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	3301      	adds	r3, #1
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f86:	683b      	ldr	r3, [r7, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	40021000 	.word	0x40021000
 8005f98:	0800a750 	.word	0x0800a750
 8005f9c:	00f42400 	.word	0x00f42400
 8005fa0:	007a1200 	.word	0x007a1200

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fac:	2300      	movs	r3, #0
 8005fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d040      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d02a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fc8:	2b80      	cmp	r3, #128	; 0x80
 8005fca:	d825      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fcc:	2b60      	cmp	r3, #96	; 0x60
 8005fce:	d026      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005fd0:	2b60      	cmp	r3, #96	; 0x60
 8005fd2:	d821      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d006      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d81d      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d009      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d010      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005fe4:	e018      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fe6:	4b89      	ldr	r3, [pc, #548]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4a88      	ldr	r2, [pc, #544]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ff2:	e015      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 fb12 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006000:	4603      	mov	r3, r0
 8006002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006004:	e00c      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3320      	adds	r3, #32
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fbfd 	bl	800680c <RCCEx_PLLSAI2_Config>
 8006012:	4603      	mov	r3, r0
 8006014:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006016:	e003      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	74fb      	strb	r3, [r7, #19]
      break;
 800601c:	e000      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800601e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006020:	7cfb      	ldrb	r3, [r7, #19]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006026:	4b79      	ldr	r3, [pc, #484]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006034:	4975      	ldr	r1, [pc, #468]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800603c:	e001      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603e:	7cfb      	ldrb	r3, [r7, #19]
 8006040:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d047      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006056:	d030      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605c:	d82a      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800605e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006062:	d02a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006068:	d824      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800606a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606e:	d008      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d81e      	bhi.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800607a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607e:	d010      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006080:	e018      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006082:	4b62      	ldr	r3, [pc, #392]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	4a61      	ldr	r2, [pc, #388]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800608c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800608e:	e015      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	2100      	movs	r1, #0
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fac4 	bl	8006624 <RCCEx_PLLSAI1_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060a0:	e00c      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3320      	adds	r3, #32
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 fbaf 	bl	800680c <RCCEx_PLLSAI2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	74fb      	strb	r3, [r7, #19]
      break;
 80060b8:	e000      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80060ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060bc:	7cfb      	ldrb	r3, [r7, #19]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060c2:	4b52      	ldr	r3, [pc, #328]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	494e      	ldr	r1, [pc, #312]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80060d8:	e001      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060da:	7cfb      	ldrb	r3, [r7, #19]
 80060dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 809f 	beq.w	800622a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ec:	2300      	movs	r3, #0
 80060ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060f0:	4b46      	ldr	r3, [pc, #280]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006100:	2300      	movs	r3, #0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006106:	4b41      	ldr	r3, [pc, #260]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610a:	4a40      	ldr	r2, [pc, #256]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800610c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006110:	6593      	str	r3, [r2, #88]	; 0x58
 8006112:	4b3e      	ldr	r3, [pc, #248]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800611e:	2301      	movs	r3, #1
 8006120:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006122:	4b3b      	ldr	r3, [pc, #236]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3a      	ldr	r2, [pc, #232]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800612e:	f7fc fceb 	bl	8002b08 <HAL_GetTick>
 8006132:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006134:	e009      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006136:	f7fc fce7 	bl	8002b08 <HAL_GetTick>
 800613a:	4602      	mov	r2, r0
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	1ad3      	subs	r3, r2, r3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d902      	bls.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	74fb      	strb	r3, [r7, #19]
        break;
 8006148:	e005      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0ef      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006156:	7cfb      	ldrb	r3, [r7, #19]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d15b      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800615c:	4b2b      	ldr	r3, [pc, #172]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01f      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	429a      	cmp	r2, r3
 8006178:	d019      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800617a:	4b24      	ldr	r3, [pc, #144]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006184:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800618e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619c:	4a1b      	ldr	r2, [pc, #108]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800619e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061a6:	4a19      	ldr	r2, [pc, #100]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d016      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b8:	f7fc fca6 	bl	8002b08 <HAL_GetTick>
 80061bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061be:	e00b      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c0:	f7fc fca2 	bl	8002b08 <HAL_GetTick>
 80061c4:	4602      	mov	r2, r0
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d902      	bls.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	74fb      	strb	r3, [r7, #19]
            break;
 80061d6:	e006      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0ec      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80061e6:	7cfb      	ldrb	r3, [r7, #19]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10c      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fc:	4903      	ldr	r1, [pc, #12]	; (800620c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006204:	e008      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006206:	7cfb      	ldrb	r3, [r7, #19]
 8006208:	74bb      	strb	r3, [r7, #18]
 800620a:	e005      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800620c:	40021000 	.word	0x40021000
 8006210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006214:	7cfb      	ldrb	r3, [r7, #19]
 8006216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006218:	7c7b      	ldrb	r3, [r7, #17]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d105      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621e:	4ba0      	ldr	r3, [pc, #640]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006222:	4a9f      	ldr	r2, [pc, #636]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006236:	4b9a      	ldr	r3, [pc, #616]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623c:	f023 0203 	bic.w	r2, r3, #3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	4996      	ldr	r1, [pc, #600]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006246:	4313      	orrs	r3, r2
 8006248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006258:	4b91      	ldr	r3, [pc, #580]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f023 020c 	bic.w	r2, r3, #12
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	498e      	ldr	r1, [pc, #568]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800627a:	4b89      	ldr	r3, [pc, #548]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006288:	4985      	ldr	r1, [pc, #532]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628a:	4313      	orrs	r3, r2
 800628c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0308 	and.w	r3, r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00a      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800629c:	4b80      	ldr	r3, [pc, #512]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800629e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062aa:	497d      	ldr	r1, [pc, #500]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80062be:	4b78      	ldr	r3, [pc, #480]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062cc:	4974      	ldr	r1, [pc, #464]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00a      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062e0:	4b6f      	ldr	r3, [pc, #444]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ee:	496c      	ldr	r1, [pc, #432]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00a      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006302:	4b67      	ldr	r3, [pc, #412]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006310:	4963      	ldr	r1, [pc, #396]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006324:	4b5e      	ldr	r3, [pc, #376]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006332:	495b      	ldr	r1, [pc, #364]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006334:	4313      	orrs	r3, r2
 8006336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006346:	4b56      	ldr	r3, [pc, #344]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006354:	4952      	ldr	r1, [pc, #328]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006368:	4b4d      	ldr	r3, [pc, #308]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	494a      	ldr	r1, [pc, #296]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800638a:	4b45      	ldr	r3, [pc, #276]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006398:	4941      	ldr	r1, [pc, #260]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ac:	4b3c      	ldr	r3, [pc, #240]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b2:	f023 0203 	bic.w	r2, r3, #3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ba:	4939      	ldr	r1, [pc, #228]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d028      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063ce:	4b34      	ldr	r3, [pc, #208]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063dc:	4930      	ldr	r1, [pc, #192]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ec:	d106      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063ee:	4b2c      	ldr	r3, [pc, #176]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063f8:	60d3      	str	r3, [r2, #12]
 80063fa:	e011      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006404:	d10c      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	2101      	movs	r1, #1
 800640c:	4618      	mov	r0, r3
 800640e:	f000 f909 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006416:	7cfb      	ldrb	r3, [r7, #19]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800641c:	7cfb      	ldrb	r3, [r7, #19]
 800641e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d04d      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006434:	d108      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006436:	4b1a      	ldr	r3, [pc, #104]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006438:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800643c:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800643e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006442:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006446:	e012      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006448:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800644e:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006454:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800645a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006466:	490e      	ldr	r1, [pc, #56]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006476:	d106      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800647e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006482:	60d3      	str	r3, [r2, #12]
 8006484:	e020      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800648a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648e:	d109      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	4a02      	ldr	r2, [pc, #8]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649a:	60d3      	str	r3, [r2, #12]
 800649c:	e014      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f8b5 	bl	8006624 <RCCEx_PLLSAI1_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064be:	7cfb      	ldrb	r3, [r7, #19]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80064c4:	7cfb      	ldrb	r3, [r7, #19]
 80064c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d028      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064d4:	4b4a      	ldr	r3, [pc, #296]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064e2:	4947      	ldr	r1, [pc, #284]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064f2:	d106      	bne.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064f4:	4b42      	ldr	r3, [pc, #264]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4a41      	ldr	r2, [pc, #260]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064fe:	60d3      	str	r3, [r2, #12]
 8006500:	e011      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006506:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800650a:	d10c      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	3304      	adds	r3, #4
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f886 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800651c:	7cfb      	ldrb	r3, [r7, #19]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d001      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006522:	7cfb      	ldrb	r3, [r7, #19]
 8006524:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01e      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006532:	4b33      	ldr	r3, [pc, #204]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006542:	492f      	ldr	r1, [pc, #188]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006550:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006554:	d10c      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3304      	adds	r3, #4
 800655a:	2102      	movs	r1, #2
 800655c:	4618      	mov	r0, r3
 800655e:	f000 f861 	bl	8006624 <RCCEx_PLLSAI1_Config>
 8006562:	4603      	mov	r3, r0
 8006564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006566:	7cfb      	ldrb	r3, [r7, #19]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800656c:	7cfb      	ldrb	r3, [r7, #19]
 800656e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800657c:	4b20      	ldr	r3, [pc, #128]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800657e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006582:	f023 0204 	bic.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800658c:	491c      	ldr	r1, [pc, #112]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80065a0:	4b17      	ldr	r3, [pc, #92]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065a6:	f023 0218 	bic.w	r2, r3, #24
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b0:	4913      	ldr	r1, [pc, #76]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d4:	490a      	ldr	r1, [pc, #40]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e6:	d105      	bne.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a04      	ldr	r2, [pc, #16]	; (8006600 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80065ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40021000 	.word	0x40021000

08006604 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a04      	ldr	r2, [pc, #16]	; (8006620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800660e:	f043 0304 	orr.w	r3, r3, #4
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	40021000 	.word	0x40021000

08006624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006632:	4b72      	ldr	r3, [pc, #456]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00e      	beq.n	800665c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800663e:	4b6f      	ldr	r3, [pc, #444]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f003 0203 	and.w	r2, r3, #3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d103      	bne.n	8006656 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
       ||
 8006652:	2b00      	cmp	r3, #0
 8006654:	d142      	bne.n	80066dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	73fb      	strb	r3, [r7, #15]
 800665a:	e03f      	b.n	80066dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d018      	beq.n	8006696 <RCCEx_PLLSAI1_Config+0x72>
 8006664:	2b03      	cmp	r3, #3
 8006666:	d825      	bhi.n	80066b4 <RCCEx_PLLSAI1_Config+0x90>
 8006668:	2b01      	cmp	r3, #1
 800666a:	d002      	beq.n	8006672 <RCCEx_PLLSAI1_Config+0x4e>
 800666c:	2b02      	cmp	r3, #2
 800666e:	d009      	beq.n	8006684 <RCCEx_PLLSAI1_Config+0x60>
 8006670:	e020      	b.n	80066b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006672:	4b62      	ldr	r3, [pc, #392]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11d      	bne.n	80066ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006682:	e01a      	b.n	80066ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006684:	4b5d      	ldr	r3, [pc, #372]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668c:	2b00      	cmp	r3, #0
 800668e:	d116      	bne.n	80066be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006694:	e013      	b.n	80066be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006696:	4b59      	ldr	r3, [pc, #356]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10f      	bne.n	80066c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066a2:	4b56      	ldr	r3, [pc, #344]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066b2:	e006      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	73fb      	strb	r3, [r7, #15]
      break;
 80066b8:	e004      	b.n	80066c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80066c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d108      	bne.n	80066dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80066ca:	4b4c      	ldr	r3, [pc, #304]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f023 0203 	bic.w	r2, r3, #3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4949      	ldr	r1, [pc, #292]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 8086 	bne.w	80067f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066e4:	4b45      	ldr	r3, [pc, #276]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a44      	ldr	r2, [pc, #272]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80066ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f0:	f7fc fa0a 	bl	8002b08 <HAL_GetTick>
 80066f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066f6:	e009      	b.n	800670c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066f8:	f7fc fa06 	bl	8002b08 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d902      	bls.n	800670c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	73fb      	strb	r3, [r7, #15]
        break;
 800670a:	e005      	b.n	8006718 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800670c:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1ef      	bne.n	80066f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d168      	bne.n	80067f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d113      	bne.n	800674c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006724:	4b35      	ldr	r3, [pc, #212]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	4b35      	ldr	r3, [pc, #212]	; (8006800 <RCCEx_PLLSAI1_Config+0x1dc>)
 800672a:	4013      	ands	r3, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	6892      	ldr	r2, [r2, #8]
 8006730:	0211      	lsls	r1, r2, #8
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	68d2      	ldr	r2, [r2, #12]
 8006736:	06d2      	lsls	r2, r2, #27
 8006738:	4311      	orrs	r1, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6852      	ldr	r2, [r2, #4]
 800673e:	3a01      	subs	r2, #1
 8006740:	0112      	lsls	r2, r2, #4
 8006742:	430a      	orrs	r2, r1
 8006744:	492d      	ldr	r1, [pc, #180]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006746:	4313      	orrs	r3, r2
 8006748:	610b      	str	r3, [r1, #16]
 800674a:	e02d      	b.n	80067a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d115      	bne.n	800677e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006752:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	4b2b      	ldr	r3, [pc, #172]	; (8006804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006758:	4013      	ands	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6892      	ldr	r2, [r2, #8]
 800675e:	0211      	lsls	r1, r2, #8
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6912      	ldr	r2, [r2, #16]
 8006764:	0852      	lsrs	r2, r2, #1
 8006766:	3a01      	subs	r2, #1
 8006768:	0552      	lsls	r2, r2, #21
 800676a:	4311      	orrs	r1, r2
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6852      	ldr	r2, [r2, #4]
 8006770:	3a01      	subs	r2, #1
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	430a      	orrs	r2, r1
 8006776:	4921      	ldr	r1, [pc, #132]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006778:	4313      	orrs	r3, r2
 800677a:	610b      	str	r3, [r1, #16]
 800677c:	e014      	b.n	80067a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800677e:	4b1f      	ldr	r3, [pc, #124]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006784:	4013      	ands	r3, r2
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6892      	ldr	r2, [r2, #8]
 800678a:	0211      	lsls	r1, r2, #8
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6952      	ldr	r2, [r2, #20]
 8006790:	0852      	lsrs	r2, r2, #1
 8006792:	3a01      	subs	r2, #1
 8006794:	0652      	lsls	r2, r2, #25
 8006796:	4311      	orrs	r1, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	3a01      	subs	r2, #1
 800679e:	0112      	lsls	r2, r2, #4
 80067a0:	430a      	orrs	r2, r1
 80067a2:	4916      	ldr	r1, [pc, #88]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80067a8:	4b14      	ldr	r3, [pc, #80]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a13      	ldr	r2, [pc, #76]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067b4:	f7fc f9a8 	bl	8002b08 <HAL_GetTick>
 80067b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067ba:	e009      	b.n	80067d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067bc:	f7fc f9a4 	bl	8002b08 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d902      	bls.n	80067d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	73fb      	strb	r3, [r7, #15]
          break;
 80067ce:	e005      	b.n	80067dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0ef      	beq.n	80067bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067e2:	4b06      	ldr	r3, [pc, #24]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	4904      	ldr	r1, [pc, #16]	; (80067fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40021000 	.word	0x40021000
 8006800:	07ff800f 	.word	0x07ff800f
 8006804:	ff9f800f 	.word	0xff9f800f
 8006808:	f9ff800f 	.word	0xf9ff800f

0800680c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800681a:	4b72      	ldr	r3, [pc, #456]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00e      	beq.n	8006844 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006826:	4b6f      	ldr	r3, [pc, #444]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0203 	and.w	r2, r3, #3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d103      	bne.n	800683e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
       ||
 800683a:	2b00      	cmp	r3, #0
 800683c:	d142      	bne.n	80068c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
 8006842:	e03f      	b.n	80068c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d018      	beq.n	800687e <RCCEx_PLLSAI2_Config+0x72>
 800684c:	2b03      	cmp	r3, #3
 800684e:	d825      	bhi.n	800689c <RCCEx_PLLSAI2_Config+0x90>
 8006850:	2b01      	cmp	r3, #1
 8006852:	d002      	beq.n	800685a <RCCEx_PLLSAI2_Config+0x4e>
 8006854:	2b02      	cmp	r3, #2
 8006856:	d009      	beq.n	800686c <RCCEx_PLLSAI2_Config+0x60>
 8006858:	e020      	b.n	800689c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800685a:	4b62      	ldr	r3, [pc, #392]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d11d      	bne.n	80068a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800686a:	e01a      	b.n	80068a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800686c:	4b5d      	ldr	r3, [pc, #372]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006874:	2b00      	cmp	r3, #0
 8006876:	d116      	bne.n	80068a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800687c:	e013      	b.n	80068a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800687e:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800688a:	4b56      	ldr	r3, [pc, #344]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800689a:	e006      	b.n	80068aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
      break;
 80068a0:	e004      	b.n	80068ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80068aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d108      	bne.n	80068c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80068b2:	4b4c      	ldr	r3, [pc, #304]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f023 0203 	bic.w	r2, r3, #3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4949      	ldr	r1, [pc, #292]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8086 	bne.w	80069d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80068cc:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a44      	ldr	r2, [pc, #272]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d8:	f7fc f916 	bl	8002b08 <HAL_GetTick>
 80068dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068de:	e009      	b.n	80068f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068e0:	f7fc f912 	bl	8002b08 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d902      	bls.n	80068f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	73fb      	strb	r3, [r7, #15]
        break;
 80068f2:	e005      	b.n	8006900 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068f4:	4b3b      	ldr	r3, [pc, #236]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1ef      	bne.n	80068e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006900:	7bfb      	ldrb	r3, [r7, #15]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d168      	bne.n	80069d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d113      	bne.n	8006934 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800690c:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800690e:	695a      	ldr	r2, [r3, #20]
 8006910:	4b35      	ldr	r3, [pc, #212]	; (80069e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006912:	4013      	ands	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6892      	ldr	r2, [r2, #8]
 8006918:	0211      	lsls	r1, r2, #8
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68d2      	ldr	r2, [r2, #12]
 800691e:	06d2      	lsls	r2, r2, #27
 8006920:	4311      	orrs	r1, r2
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6852      	ldr	r2, [r2, #4]
 8006926:	3a01      	subs	r2, #1
 8006928:	0112      	lsls	r2, r2, #4
 800692a:	430a      	orrs	r2, r1
 800692c:	492d      	ldr	r1, [pc, #180]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	614b      	str	r3, [r1, #20]
 8006932:	e02d      	b.n	8006990 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d115      	bne.n	8006966 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800693a:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	4b2b      	ldr	r3, [pc, #172]	; (80069ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8006940:	4013      	ands	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6892      	ldr	r2, [r2, #8]
 8006946:	0211      	lsls	r1, r2, #8
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6912      	ldr	r2, [r2, #16]
 800694c:	0852      	lsrs	r2, r2, #1
 800694e:	3a01      	subs	r2, #1
 8006950:	0552      	lsls	r2, r2, #21
 8006952:	4311      	orrs	r1, r2
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6852      	ldr	r2, [r2, #4]
 8006958:	3a01      	subs	r2, #1
 800695a:	0112      	lsls	r2, r2, #4
 800695c:	430a      	orrs	r2, r1
 800695e:	4921      	ldr	r1, [pc, #132]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006960:	4313      	orrs	r3, r2
 8006962:	614b      	str	r3, [r1, #20]
 8006964:	e014      	b.n	8006990 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006966:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006968:	695a      	ldr	r2, [r3, #20]
 800696a:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6892      	ldr	r2, [r2, #8]
 8006972:	0211      	lsls	r1, r2, #8
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6952      	ldr	r2, [r2, #20]
 8006978:	0852      	lsrs	r2, r2, #1
 800697a:	3a01      	subs	r2, #1
 800697c:	0652      	lsls	r2, r2, #25
 800697e:	4311      	orrs	r1, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6852      	ldr	r2, [r2, #4]
 8006984:	3a01      	subs	r2, #1
 8006986:	0112      	lsls	r2, r2, #4
 8006988:	430a      	orrs	r2, r1
 800698a:	4916      	ldr	r1, [pc, #88]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800699a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699c:	f7fc f8b4 	bl	8002b08 <HAL_GetTick>
 80069a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069a2:	e009      	b.n	80069b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80069a4:	f7fc f8b0 	bl	8002b08 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d902      	bls.n	80069b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	73fb      	strb	r3, [r7, #15]
          break;
 80069b6:	e005      	b.n	80069c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80069b8:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d0ef      	beq.n	80069a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	4904      	ldr	r1, [pc, #16]	; (80069e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	07ff800f 	.word	0x07ff800f
 80069ec:	ff9f800f 	.word	0xff9f800f
 80069f0:	f9ff800f 	.word	0xf9ff800f

080069f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e095      	b.n	8006b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d108      	bne.n	8006a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a16:	d009      	beq.n	8006a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	61da      	str	r2, [r3, #28]
 8006a1e:	e005      	b.n	8006a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb fa8a 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a6c:	d902      	bls.n	8006a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e002      	b.n	8006a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a82:	d007      	beq.n	8006a94 <HAL_SPI_Init+0xa0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a8c:	d002      	beq.n	8006a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad6:	ea42 0103 	orr.w	r1, r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	0c1b      	lsrs	r3, r3, #16
 8006af0:	f003 0204 	and.w	r2, r3, #4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	431a      	orrs	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b10:	ea42 0103 	orr.w	r1, r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	430a      	orrs	r2, r1
 8006b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b08a      	sub	sp, #40	; 0x28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	60b9      	str	r1, [r7, #8]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x26>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e1fb      	b.n	8006f58 <HAL_SPI_TransmitReceive+0x41e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b68:	f7fb ffce 	bl	8002b08 <HAL_GetTick>
 8006b6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006b7c:	887b      	ldrh	r3, [r7, #2]
 8006b7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b84:	7efb      	ldrb	r3, [r7, #27]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d00e      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x6e>
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b90:	d106      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_SPI_TransmitReceive+0x66>
 8006b9a:	7efb      	ldrb	r3, [r7, #27]
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d003      	beq.n	8006ba8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ba6:	e1cd      	b.n	8006f44 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x80>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x80>
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006bc0:	e1c0      	b.n	8006f44 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d003      	beq.n	8006bd6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2205      	movs	r2, #5
 8006bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	887a      	ldrh	r2, [r7, #2]
 8006be6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	887a      	ldrh	r2, [r7, #2]
 8006bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	887a      	ldrh	r2, [r7, #2]
 8006bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	887a      	ldrh	r2, [r7, #2]
 8006c02:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c18:	d802      	bhi.n	8006c20 <HAL_SPI_TransmitReceive+0xe6>
 8006c1a:	8a3b      	ldrh	r3, [r7, #16]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d908      	bls.n	8006c32 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c2e:	605a      	str	r2, [r3, #4]
 8006c30:	e007      	b.n	8006c42 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c40:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b40      	cmp	r3, #64	; 0x40
 8006c4e:	d007      	beq.n	8006c60 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c68:	d97c      	bls.n	8006d64 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x13e>
 8006c72:	8a7b      	ldrh	r3, [r7, #18]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d169      	bne.n	8006d4c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	1c9a      	adds	r2, r3, #2
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c9c:	e056      	b.n	8006d4c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d11b      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x1aa>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <HAL_SPI_TransmitReceive+0x1aa>
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d113      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	1c9a      	adds	r2, r3, #2
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 0301 	and.w	r3, r3, #1
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d11c      	bne.n	8006d2c <HAL_SPI_TransmitReceive+0x1f2>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d016      	beq.n	8006d2c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	b292      	uxth	r2, r2
 8006d0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d2c:	f7fb feec 	bl	8002b08 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d807      	bhi.n	8006d4c <HAL_SPI_TransmitReceive+0x212>
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d42:	d003      	beq.n	8006d4c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d4a:	e0fb      	b.n	8006f44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1a3      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x164>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d19d      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x164>
 8006d62:	e0df      	b.n	8006f24 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_SPI_TransmitReceive+0x23a>
 8006d6c:	8a7b      	ldrh	r3, [r7, #18]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	f040 80cb 	bne.w	8006f0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d912      	bls.n	8006da4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b02      	subs	r3, #2
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006da2:	e0b2      	b.n	8006f0a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dca:	e09e      	b.n	8006f0a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d134      	bne.n	8006e44 <HAL_SPI_TransmitReceive+0x30a>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d02f      	beq.n	8006e44 <HAL_SPI_TransmitReceive+0x30a>
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d12c      	bne.n	8006e44 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d912      	bls.n	8006e1a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df8:	881a      	ldrh	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	1c9a      	adds	r2, r3, #2
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3b02      	subs	r3, #2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e18:	e012      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d148      	bne.n	8006ee4 <HAL_SPI_TransmitReceive+0x3aa>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d042      	beq.n	8006ee4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d923      	bls.n	8006eb2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	b292      	uxth	r2, r2
 8006e76:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b02      	subs	r3, #2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d81f      	bhi.n	8006ee0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	e016      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f103 020c 	add.w	r2, r3, #12
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ee4:	f7fb fe10 	bl	8002b08 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d803      	bhi.n	8006efc <HAL_SPI_TransmitReceive+0x3c2>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d102      	bne.n	8006f02 <HAL_SPI_TransmitReceive+0x3c8>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d103      	bne.n	8006f0a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f08:	e01c      	b.n	8006f44 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f47f af5b 	bne.w	8006dcc <HAL_SPI_TransmitReceive+0x292>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f47f af54 	bne.w	8006dcc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f24:	69fa      	ldr	r2, [r7, #28]
 8006f26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f941 	bl	80071b0 <SPI_EndRxTxTransaction>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	661a      	str	r2, [r3, #96]	; 0x60
 8006f40:	e000      	b.n	8006f44 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3728      	adds	r7, #40	; 0x28
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f6e:	b2db      	uxtb	r3, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f8c:	f7fb fdbc 	bl	8002b08 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	1a9b      	subs	r3, r3, r2
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	4413      	add	r3, r2
 8006f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f9c:	f7fb fdb4 	bl	8002b08 <HAL_GetTick>
 8006fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fa2:	4b39      	ldr	r3, [pc, #228]	; (8007088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	015b      	lsls	r3, r3, #5
 8006fa8:	0d1b      	lsrs	r3, r3, #20
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fb2:	e054      	b.n	800705e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d050      	beq.n	800705e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fbc:	f7fb fda4 	bl	8002b08 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d902      	bls.n	8006fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d13d      	bne.n	800704e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fea:	d111      	bne.n	8007010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff4:	d004      	beq.n	8007000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffe:	d107      	bne.n	8007010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007018:	d10f      	bne.n	800703a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e017      	b.n	800707e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	3b01      	subs	r3, #1
 800705c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4013      	ands	r3, r2
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	429a      	cmp	r2, r3
 800706c:	bf0c      	ite	eq
 800706e:	2301      	moveq	r3, #1
 8007070:	2300      	movne	r3, #0
 8007072:	b2db      	uxtb	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	429a      	cmp	r2, r3
 800707a:	d19b      	bne.n	8006fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000004 	.word	0x20000004

0800708c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b088      	sub	sp, #32
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800709a:	f7fb fd35 	bl	8002b08 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	4413      	add	r3, r2
 80070a8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070aa:	f7fb fd2d 	bl	8002b08 <HAL_GetTick>
 80070ae:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070b0:	4b3e      	ldr	r3, [pc, #248]	; (80071ac <SPI_WaitFifoStateUntilTimeout+0x120>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	00da      	lsls	r2, r3, #3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	0d1b      	lsrs	r3, r3, #20
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	fb02 f303 	mul.w	r3, r2, r3
 80070c6:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80070c8:	e062      	b.n	8007190 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070d0:	d109      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80070e4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ec:	d050      	beq.n	8007190 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ee:	f7fb fd0b 	bl	8002b08 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d902      	bls.n	8007104 <SPI_WaitFifoStateUntilTimeout+0x78>
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d13d      	bne.n	8007180 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007112:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711c:	d111      	bne.n	8007142 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007126:	d004      	beq.n	8007132 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007130:	d107      	bne.n	8007142 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007140:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	d10f      	bne.n	800716c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800716a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e010      	b.n	80071a2 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	3b01      	subs	r3, #1
 800718e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	4013      	ands	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	429a      	cmp	r2, r3
 800719e:	d194      	bne.n	80070ca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000004 	.word	0x20000004

080071b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f7ff ff5f 	bl	800708c <SPI_WaitFifoStateUntilTimeout>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d8:	f043 0220 	orr.w	r2, r3, #32
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e027      	b.n	8007234 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	2180      	movs	r1, #128	; 0x80
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fec4 	bl	8006f7c <SPI_WaitFlagStateUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d007      	beq.n	800720a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e014      	b.n	8007234 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ff38 	bl	800708c <SPI_WaitFifoStateUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007226:	f043 0220 	orr.w	r2, r3, #32
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e000      	b.n	8007234 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e042      	b.n	80072d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f7fa febf 	bl	8001fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2224      	movs	r2, #36	; 0x24
 800726a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0201 	bic.w	r2, r2, #1
 800727c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f8c4 	bl	800740c <UART_SetConfig>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e022      	b.n	80072d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb82 	bl	80079a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc09 	bl	8007ae4 <UART_CheckIdleState>
 80072d2:	4603      	mov	r3, r0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af02      	add	r7, sp, #8
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	f040 8084 	bne.w	8007400 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_UART_Transmit+0x28>
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e07c      	b.n	8007402 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_UART_Transmit+0x3a>
 8007312:	2302      	movs	r3, #2
 8007314:	e075      	b.n	8007402 <HAL_UART_Transmit+0x126>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2221      	movs	r2, #33	; 0x21
 800732a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800732e:	f7fb fbeb 	bl	8002b08 <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	88fa      	ldrh	r2, [r7, #6]
 8007340:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734c:	d108      	bne.n	8007360 <HAL_UART_Transmit+0x84>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e003      	b.n	8007368 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007370:	e02d      	b.n	80073ce <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2200      	movs	r2, #0
 800737a:	2180      	movs	r1, #128	; 0x80
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fbfc 	bl	8007b7a <UART_WaitOnFlagUntilTimeout>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e03a      	b.n	8007402 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10b      	bne.n	80073aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	881a      	ldrh	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800739e:	b292      	uxth	r2, r2
 80073a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	3302      	adds	r3, #2
 80073a6:	61bb      	str	r3, [r7, #24]
 80073a8:	e008      	b.n	80073bc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b292      	uxth	r2, r2
 80073b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1cb      	bne.n	8007372 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	2140      	movs	r1, #64	; 0x40
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fbc8 	bl	8007b7a <UART_WaitOnFlagUntilTimeout>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e006      	b.n	8007402 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	e000      	b.n	8007402 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007400:	2302      	movs	r3, #2
  }
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800740c:	b5b0      	push	{r4, r5, r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4313      	orrs	r3, r2
 800742e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4bb1      	ldr	r3, [pc, #708]	; (80076fc <UART_SetConfig+0x2f0>)
 8007438:	4013      	ands	r3, r2
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6812      	ldr	r2, [r2, #0]
 800743e:	69f9      	ldr	r1, [r7, #28]
 8007440:	430b      	orrs	r3, r1
 8007442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4aa6      	ldr	r2, [pc, #664]	; (8007700 <UART_SetConfig+0x2f4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	4313      	orrs	r3, r2
 8007472:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800747e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	430b      	orrs	r3, r1
 800748a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007492:	f023 010f 	bic.w	r1, r3, #15
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a97      	ldr	r2, [pc, #604]	; (8007704 <UART_SetConfig+0x2f8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d120      	bne.n	80074ee <UART_SetConfig+0xe2>
 80074ac:	4b96      	ldr	r3, [pc, #600]	; (8007708 <UART_SetConfig+0x2fc>)
 80074ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d816      	bhi.n	80074e8 <UART_SetConfig+0xdc>
 80074ba:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <UART_SetConfig+0xb4>)
 80074bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c0:	080074d1 	.word	0x080074d1
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074d7 	.word	0x080074d7
 80074cc:	080074e3 	.word	0x080074e3
 80074d0:	2301      	movs	r3, #1
 80074d2:	76fb      	strb	r3, [r7, #27]
 80074d4:	e0e7      	b.n	80076a6 <UART_SetConfig+0x29a>
 80074d6:	2302      	movs	r3, #2
 80074d8:	76fb      	strb	r3, [r7, #27]
 80074da:	e0e4      	b.n	80076a6 <UART_SetConfig+0x29a>
 80074dc:	2304      	movs	r3, #4
 80074de:	76fb      	strb	r3, [r7, #27]
 80074e0:	e0e1      	b.n	80076a6 <UART_SetConfig+0x29a>
 80074e2:	2308      	movs	r3, #8
 80074e4:	76fb      	strb	r3, [r7, #27]
 80074e6:	e0de      	b.n	80076a6 <UART_SetConfig+0x29a>
 80074e8:	2310      	movs	r3, #16
 80074ea:	76fb      	strb	r3, [r7, #27]
 80074ec:	e0db      	b.n	80076a6 <UART_SetConfig+0x29a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a86      	ldr	r2, [pc, #536]	; (800770c <UART_SetConfig+0x300>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d132      	bne.n	800755e <UART_SetConfig+0x152>
 80074f8:	4b83      	ldr	r3, [pc, #524]	; (8007708 <UART_SetConfig+0x2fc>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	f003 030c 	and.w	r3, r3, #12
 8007502:	2b0c      	cmp	r3, #12
 8007504:	d828      	bhi.n	8007558 <UART_SetConfig+0x14c>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <UART_SetConfig+0x100>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007541 	.word	0x08007541
 8007510:	08007559 	.word	0x08007559
 8007514:	08007559 	.word	0x08007559
 8007518:	08007559 	.word	0x08007559
 800751c:	0800754d 	.word	0x0800754d
 8007520:	08007559 	.word	0x08007559
 8007524:	08007559 	.word	0x08007559
 8007528:	08007559 	.word	0x08007559
 800752c:	08007547 	.word	0x08007547
 8007530:	08007559 	.word	0x08007559
 8007534:	08007559 	.word	0x08007559
 8007538:	08007559 	.word	0x08007559
 800753c:	08007553 	.word	0x08007553
 8007540:	2300      	movs	r3, #0
 8007542:	76fb      	strb	r3, [r7, #27]
 8007544:	e0af      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007546:	2302      	movs	r3, #2
 8007548:	76fb      	strb	r3, [r7, #27]
 800754a:	e0ac      	b.n	80076a6 <UART_SetConfig+0x29a>
 800754c:	2304      	movs	r3, #4
 800754e:	76fb      	strb	r3, [r7, #27]
 8007550:	e0a9      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007552:	2308      	movs	r3, #8
 8007554:	76fb      	strb	r3, [r7, #27]
 8007556:	e0a6      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007558:	2310      	movs	r3, #16
 800755a:	76fb      	strb	r3, [r7, #27]
 800755c:	e0a3      	b.n	80076a6 <UART_SetConfig+0x29a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a6b      	ldr	r2, [pc, #428]	; (8007710 <UART_SetConfig+0x304>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d120      	bne.n	80075aa <UART_SetConfig+0x19e>
 8007568:	4b67      	ldr	r3, [pc, #412]	; (8007708 <UART_SetConfig+0x2fc>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007572:	2b30      	cmp	r3, #48	; 0x30
 8007574:	d013      	beq.n	800759e <UART_SetConfig+0x192>
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	d814      	bhi.n	80075a4 <UART_SetConfig+0x198>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d009      	beq.n	8007592 <UART_SetConfig+0x186>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d810      	bhi.n	80075a4 <UART_SetConfig+0x198>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <UART_SetConfig+0x180>
 8007586:	2b10      	cmp	r3, #16
 8007588:	d006      	beq.n	8007598 <UART_SetConfig+0x18c>
 800758a:	e00b      	b.n	80075a4 <UART_SetConfig+0x198>
 800758c:	2300      	movs	r3, #0
 800758e:	76fb      	strb	r3, [r7, #27]
 8007590:	e089      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007592:	2302      	movs	r3, #2
 8007594:	76fb      	strb	r3, [r7, #27]
 8007596:	e086      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007598:	2304      	movs	r3, #4
 800759a:	76fb      	strb	r3, [r7, #27]
 800759c:	e083      	b.n	80076a6 <UART_SetConfig+0x29a>
 800759e:	2308      	movs	r3, #8
 80075a0:	76fb      	strb	r3, [r7, #27]
 80075a2:	e080      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075a4:	2310      	movs	r3, #16
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	e07d      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a59      	ldr	r2, [pc, #356]	; (8007714 <UART_SetConfig+0x308>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d120      	bne.n	80075f6 <UART_SetConfig+0x1ea>
 80075b4:	4b54      	ldr	r3, [pc, #336]	; (8007708 <UART_SetConfig+0x2fc>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075be:	2bc0      	cmp	r3, #192	; 0xc0
 80075c0:	d013      	beq.n	80075ea <UART_SetConfig+0x1de>
 80075c2:	2bc0      	cmp	r3, #192	; 0xc0
 80075c4:	d814      	bhi.n	80075f0 <UART_SetConfig+0x1e4>
 80075c6:	2b80      	cmp	r3, #128	; 0x80
 80075c8:	d009      	beq.n	80075de <UART_SetConfig+0x1d2>
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d810      	bhi.n	80075f0 <UART_SetConfig+0x1e4>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <UART_SetConfig+0x1cc>
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0x1d8>
 80075d6:	e00b      	b.n	80075f0 <UART_SetConfig+0x1e4>
 80075d8:	2300      	movs	r3, #0
 80075da:	76fb      	strb	r3, [r7, #27]
 80075dc:	e063      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075de:	2302      	movs	r3, #2
 80075e0:	76fb      	strb	r3, [r7, #27]
 80075e2:	e060      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075e4:	2304      	movs	r3, #4
 80075e6:	76fb      	strb	r3, [r7, #27]
 80075e8:	e05d      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075ea:	2308      	movs	r3, #8
 80075ec:	76fb      	strb	r3, [r7, #27]
 80075ee:	e05a      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075f0:	2310      	movs	r3, #16
 80075f2:	76fb      	strb	r3, [r7, #27]
 80075f4:	e057      	b.n	80076a6 <UART_SetConfig+0x29a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a47      	ldr	r2, [pc, #284]	; (8007718 <UART_SetConfig+0x30c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d125      	bne.n	800764c <UART_SetConfig+0x240>
 8007600:	4b41      	ldr	r3, [pc, #260]	; (8007708 <UART_SetConfig+0x2fc>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760e:	d017      	beq.n	8007640 <UART_SetConfig+0x234>
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d817      	bhi.n	8007646 <UART_SetConfig+0x23a>
 8007616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761a:	d00b      	beq.n	8007634 <UART_SetConfig+0x228>
 800761c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007620:	d811      	bhi.n	8007646 <UART_SetConfig+0x23a>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <UART_SetConfig+0x222>
 8007626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762a:	d006      	beq.n	800763a <UART_SetConfig+0x22e>
 800762c:	e00b      	b.n	8007646 <UART_SetConfig+0x23a>
 800762e:	2300      	movs	r3, #0
 8007630:	76fb      	strb	r3, [r7, #27]
 8007632:	e038      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007634:	2302      	movs	r3, #2
 8007636:	76fb      	strb	r3, [r7, #27]
 8007638:	e035      	b.n	80076a6 <UART_SetConfig+0x29a>
 800763a:	2304      	movs	r3, #4
 800763c:	76fb      	strb	r3, [r7, #27]
 800763e:	e032      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007640:	2308      	movs	r3, #8
 8007642:	76fb      	strb	r3, [r7, #27]
 8007644:	e02f      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007646:	2310      	movs	r3, #16
 8007648:	76fb      	strb	r3, [r7, #27]
 800764a:	e02c      	b.n	80076a6 <UART_SetConfig+0x29a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2b      	ldr	r2, [pc, #172]	; (8007700 <UART_SetConfig+0x2f4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d125      	bne.n	80076a2 <UART_SetConfig+0x296>
 8007656:	4b2c      	ldr	r3, [pc, #176]	; (8007708 <UART_SetConfig+0x2fc>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007664:	d017      	beq.n	8007696 <UART_SetConfig+0x28a>
 8007666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800766a:	d817      	bhi.n	800769c <UART_SetConfig+0x290>
 800766c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007670:	d00b      	beq.n	800768a <UART_SetConfig+0x27e>
 8007672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007676:	d811      	bhi.n	800769c <UART_SetConfig+0x290>
 8007678:	2b00      	cmp	r3, #0
 800767a:	d003      	beq.n	8007684 <UART_SetConfig+0x278>
 800767c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007680:	d006      	beq.n	8007690 <UART_SetConfig+0x284>
 8007682:	e00b      	b.n	800769c <UART_SetConfig+0x290>
 8007684:	2300      	movs	r3, #0
 8007686:	76fb      	strb	r3, [r7, #27]
 8007688:	e00d      	b.n	80076a6 <UART_SetConfig+0x29a>
 800768a:	2302      	movs	r3, #2
 800768c:	76fb      	strb	r3, [r7, #27]
 800768e:	e00a      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007690:	2304      	movs	r3, #4
 8007692:	76fb      	strb	r3, [r7, #27]
 8007694:	e007      	b.n	80076a6 <UART_SetConfig+0x29a>
 8007696:	2308      	movs	r3, #8
 8007698:	76fb      	strb	r3, [r7, #27]
 800769a:	e004      	b.n	80076a6 <UART_SetConfig+0x29a>
 800769c:	2310      	movs	r3, #16
 800769e:	76fb      	strb	r3, [r7, #27]
 80076a0:	e001      	b.n	80076a6 <UART_SetConfig+0x29a>
 80076a2:	2310      	movs	r3, #16
 80076a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a15      	ldr	r2, [pc, #84]	; (8007700 <UART_SetConfig+0x2f4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	f040 809f 	bne.w	80077f0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076b2:	7efb      	ldrb	r3, [r7, #27]
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d837      	bhi.n	8007728 <UART_SetConfig+0x31c>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x2b4>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	08007729 	.word	0x08007729
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	08007729 	.word	0x08007729
 80076d0:	080076f3 	.word	0x080076f3
 80076d4:	08007729 	.word	0x08007729
 80076d8:	08007729 	.word	0x08007729
 80076dc:	08007729 	.word	0x08007729
 80076e0:	08007721 	.word	0x08007721
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fe fb70 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 80076e8:	6178      	str	r0, [r7, #20]
        break;
 80076ea:	e022      	b.n	8007732 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076ec:	4b0b      	ldr	r3, [pc, #44]	; (800771c <UART_SetConfig+0x310>)
 80076ee:	617b      	str	r3, [r7, #20]
        break;
 80076f0:	e01f      	b.n	8007732 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f2:	f7fe fad1 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 80076f6:	6178      	str	r0, [r7, #20]
        break;
 80076f8:	e01b      	b.n	8007732 <UART_SetConfig+0x326>
 80076fa:	bf00      	nop
 80076fc:	cfff69f3 	.word	0xcfff69f3
 8007700:	40008000 	.word	0x40008000
 8007704:	40013800 	.word	0x40013800
 8007708:	40021000 	.word	0x40021000
 800770c:	40004400 	.word	0x40004400
 8007710:	40004800 	.word	0x40004800
 8007714:	40004c00 	.word	0x40004c00
 8007718:	40005000 	.word	0x40005000
 800771c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007724:	617b      	str	r3, [r7, #20]
        break;
 8007726:	e004      	b.n	8007732 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	76bb      	strb	r3, [r7, #26]
        break;
 8007730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 811b 	beq.w	8007970 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	4a96      	ldr	r2, [pc, #600]	; (8007998 <UART_SetConfig+0x58c>)
 8007740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007744:	461a      	mov	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	fbb3 f3f2 	udiv	r3, r3, r2
 800774c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	4413      	add	r3, r2
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	429a      	cmp	r2, r3
 800775c:	d305      	bcc.n	800776a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	d902      	bls.n	8007770 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	76bb      	strb	r3, [r7, #26]
 800776e:	e0ff      	b.n	8007970 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4618      	mov	r0, r3
 8007774:	f04f 0100 	mov.w	r1, #0
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	4a86      	ldr	r2, [pc, #536]	; (8007998 <UART_SetConfig+0x58c>)
 800777e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007782:	b29a      	uxth	r2, r3
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	f7f8 fd8a 	bl	80002a0 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4610      	mov	r0, r2
 8007792:	4619      	mov	r1, r3
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	020b      	lsls	r3, r1, #8
 800779e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077a2:	0202      	lsls	r2, r0, #8
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	6849      	ldr	r1, [r1, #4]
 80077a8:	0849      	lsrs	r1, r1, #1
 80077aa:	4608      	mov	r0, r1
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	1814      	adds	r4, r2, r0
 80077b2:	eb43 0501 	adc.w	r5, r3, r1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd6c 	bl	80002a0 <__aeabi_uldivmod>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4613      	mov	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d6:	d308      	bcc.n	80077ea <UART_SetConfig+0x3de>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077de:	d204      	bcs.n	80077ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	60da      	str	r2, [r3, #12]
 80077e8:	e0c2      	b.n	8007970 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	76bb      	strb	r3, [r7, #26]
 80077ee:	e0bf      	b.n	8007970 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f8:	d165      	bne.n	80078c6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d828      	bhi.n	8007852 <UART_SetConfig+0x446>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0x3fc>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	08007853 	.word	0x08007853
 8007818:	08007843 	.word	0x08007843
 800781c:	08007853 	.word	0x08007853
 8007820:	08007853 	.word	0x08007853
 8007824:	08007853 	.word	0x08007853
 8007828:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fe facc 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 8007830:	6178      	str	r0, [r7, #20]
        break;
 8007832:	e013      	b.n	800785c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007834:	f7fe fade 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 8007838:	6178      	str	r0, [r7, #20]
        break;
 800783a:	e00f      	b.n	800785c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b57      	ldr	r3, [pc, #348]	; (800799c <UART_SetConfig+0x590>)
 800783e:	617b      	str	r3, [r7, #20]
        break;
 8007840:	e00c      	b.n	800785c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fe fa29 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8007846:	6178      	str	r0, [r7, #20]
        break;
 8007848:	e008      	b.n	800785c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	617b      	str	r3, [r7, #20]
        break;
 8007850:	e004      	b.n	800785c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	76bb      	strb	r3, [r7, #26]
        break;
 800785a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 8086 	beq.w	8007970 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	4a4b      	ldr	r2, [pc, #300]	; (8007998 <UART_SetConfig+0x58c>)
 800786a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800786e:	461a      	mov	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	fbb3 f3f2 	udiv	r3, r3, r2
 8007876:	005a      	lsls	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	441a      	add	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d916      	bls.n	80078c0 <UART_SetConfig+0x4b4>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d212      	bcs.n	80078c0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f023 030f 	bic.w	r3, r3, #15
 80078a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	085b      	lsrs	r3, r3, #1
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	89fb      	ldrh	r3, [r7, #14]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	89fa      	ldrh	r2, [r7, #14]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	e057      	b.n	8007970 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	76bb      	strb	r3, [r7, #26]
 80078c4:	e054      	b.n	8007970 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078c6:	7efb      	ldrb	r3, [r7, #27]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d828      	bhi.n	800791e <UART_SetConfig+0x512>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <UART_SetConfig+0x4c8>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007901 	.word	0x08007901
 80078dc:	08007909 	.word	0x08007909
 80078e0:	0800791f 	.word	0x0800791f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800791f 	.word	0x0800791f
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	0800791f 	.word	0x0800791f
 80078f4:	08007917 	.word	0x08007917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f8:	f7fe fa66 	bl	8005dc8 <HAL_RCC_GetPCLK1Freq>
 80078fc:	6178      	str	r0, [r7, #20]
        break;
 80078fe:	e013      	b.n	8007928 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fe fa78 	bl	8005df4 <HAL_RCC_GetPCLK2Freq>
 8007904:	6178      	str	r0, [r7, #20]
        break;
 8007906:	e00f      	b.n	8007928 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007908:	4b24      	ldr	r3, [pc, #144]	; (800799c <UART_SetConfig+0x590>)
 800790a:	617b      	str	r3, [r7, #20]
        break;
 800790c:	e00c      	b.n	8007928 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800790e:	f7fe f9c3 	bl	8005c98 <HAL_RCC_GetSysClockFreq>
 8007912:	6178      	str	r0, [r7, #20]
        break;
 8007914:	e008      	b.n	8007928 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791a:	617b      	str	r3, [r7, #20]
        break;
 800791c:	e004      	b.n	8007928 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	76bb      	strb	r3, [r7, #26]
        break;
 8007926:	bf00      	nop
    }

    if (pclk != 0U)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d020      	beq.n	8007970 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	4a19      	ldr	r2, [pc, #100]	; (8007998 <UART_SetConfig+0x58c>)
 8007934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007938:	461a      	mov	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	441a      	add	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	b29b      	uxth	r3, r3
 8007952:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b0f      	cmp	r3, #15
 8007958:	d908      	bls.n	800796c <UART_SetConfig+0x560>
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007960:	d204      	bcs.n	800796c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	60da      	str	r2, [r3, #12]
 800796a:	e001      	b.n	8007970 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800798c:	7ebb      	ldrb	r3, [r7, #26]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bdb0      	pop	{r4, r5, r7, pc}
 8007996:	bf00      	nop
 8007998:	0800a794 	.word	0x0800a794
 800799c:	00f42400 	.word	0x00f42400

080079a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9e:	d10a      	bne.n	8007ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af4:	f7fb f808 	bl	8002b08 <HAL_GetTick>
 8007af8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d10e      	bne.n	8007b26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f82f 	bl	8007b7a <UART_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e025      	b.n	8007b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b04      	cmp	r3, #4
 8007b32:	d10e      	bne.n	8007b52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f819 	bl	8007b7a <UART_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e00f      	b.n	8007b72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	e062      	b.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d05e      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b94:	f7fa ffb8 	bl	8002b08 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <UART_WaitOnFlagUntilTimeout+0x30>
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d11d      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bb8:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0201 	bic.w	r2, r2, #1
 8007bc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e045      	b.n	8007c72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d02e      	beq.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c02:	d126      	bne.n	8007c52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c1c:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0201 	bic.w	r2, r2, #1
 8007c2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e00f      	b.n	8007c72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	bf0c      	ite	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	2300      	movne	r3, #0
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d08d      	beq.n	8007b8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b085      	sub	sp, #20
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e027      	b.n	8007ce0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2224      	movs	r2, #36	; 0x24
 8007c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0201 	bic.w	r2, r2, #1
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e02d      	b.n	8007d60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2224      	movs	r2, #36	; 0x24
 8007d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f022 0201 	bic.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f84f 	bl	8007de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e02d      	b.n	8007ddc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2224      	movs	r2, #36	; 0x24
 8007d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f811 	bl	8007de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d108      	bne.n	8007e06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e04:	e031      	b.n	8007e6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e06:	2308      	movs	r3, #8
 8007e08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e0a:	2308      	movs	r3, #8
 8007e0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	0e5b      	lsrs	r3, r3, #25
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	0f5b      	lsrs	r3, r3, #29
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	7b3a      	ldrb	r2, [r7, #12]
 8007e32:	4911      	ldr	r1, [pc, #68]	; (8007e78 <UARTEx_SetNbDataToProcess+0x94>)
 8007e34:	5c8a      	ldrb	r2, [r1, r2]
 8007e36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e3a:	7b3a      	ldrb	r2, [r7, #12]
 8007e3c:	490f      	ldr	r1, [pc, #60]	; (8007e7c <UARTEx_SetNbDataToProcess+0x98>)
 8007e3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	7b7a      	ldrb	r2, [r7, #13]
 8007e50:	4909      	ldr	r1, [pc, #36]	; (8007e78 <UARTEx_SetNbDataToProcess+0x94>)
 8007e52:	5c8a      	ldrb	r2, [r1, r2]
 8007e54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e58:	7b7a      	ldrb	r2, [r7, #13]
 8007e5a:	4908      	ldr	r1, [pc, #32]	; (8007e7c <UARTEx_SetNbDataToProcess+0x98>)
 8007e5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	0800a7ac 	.word	0x0800a7ac
 8007e7c:	0800a7b4 	.word	0x0800a7b4

08007e80 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08c      	sub	sp, #48	; 0x30
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	4603      	mov	r3, r0
 8007e8a:	71fb      	strb	r3, [r7, #7]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	71bb      	strb	r3, [r7, #6]
 8007e90:	4613      	mov	r3, r2
 8007e92:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007e98:	79bb      	ldrb	r3, [r7, #6]
 8007e9a:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007e9c:	797b      	ldrb	r3, [r7, #5]
 8007e9e:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007ea0:	f107 030c 	add.w	r3, r7, #12
 8007ea4:	2207      	movs	r2, #7
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fcb4 	bl	8009816 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007eae:	f107 0318 	add.w	r3, r7, #24
 8007eb2:	2218      	movs	r2, #24
 8007eb4:	2100      	movs	r1, #0
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f001 fcad 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007ebc:	233f      	movs	r3, #63	; 0x3f
 8007ebe:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007ec0:	238a      	movs	r3, #138	; 0x8a
 8007ec2:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007eca:	2303      	movs	r3, #3
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007ed4:	2307      	movs	r3, #7
 8007ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007ed8:	f107 0318 	add.w	r3, r7, #24
 8007edc:	2100      	movs	r1, #0
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 ffea 	bl	8008eb8 <hci_send_req>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	da01      	bge.n	8007eee <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007eea:	23ff      	movs	r3, #255	; 0xff
 8007eec:	e014      	b.n	8007f18 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007eee:	7b3b      	ldrb	r3, [r7, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007ef4:	7b3b      	ldrb	r3, [r7, #12]
 8007ef6:	e00f      	b.n	8007f18 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007ef8:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007f02:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007f0c:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f14:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3730      	adds	r7, #48	; 0x30
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08e      	sub	sp, #56	; 0x38
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	2207      	movs	r2, #7
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f001 fc6a 	bl	8009816 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f42:	f107 0320 	add.w	r3, r7, #32
 8007f46:	2218      	movs	r2, #24
 8007f48:	2100      	movs	r1, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fc63 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007f50:	233f      	movs	r3, #63	; 0x3f
 8007f52:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8007f54:	238a      	movs	r3, #138	; 0x8a
 8007f56:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8007f58:	f107 031c 	add.w	r3, r7, #28
 8007f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8007f5e:	2301      	movs	r3, #1
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8007f62:	f107 0314 	add.w	r3, r7, #20
 8007f66:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8007f68:	2307      	movs	r3, #7
 8007f6a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007f6c:	f107 0320 	add.w	r3, r7, #32
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 ffa0 	bl	8008eb8 <hci_send_req>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	da01      	bge.n	8007f82 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8007f7e:	23ff      	movs	r3, #255	; 0xff
 8007f80:	e014      	b.n	8007fac <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8007f82:	7d3b      	ldrb	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8007f88:	7d3b      	ldrb	r3, [r7, #20]
 8007f8a:	e00f      	b.n	8007fac <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007f8c:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007f96:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007fa0:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3738      	adds	r7, #56	; 0x38
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b095      	sub	sp, #84	; 0x54
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	71fb      	strb	r3, [r7, #7]
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	80bb      	strh	r3, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	807b      	strh	r3, [r7, #2]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8007fd8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007fdc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8007fe0:	4413      	add	r3, r2
 8007fe2:	330e      	adds	r3, #14
 8007fe4:	2b28      	cmp	r3, #40	; 0x28
 8007fe6:	d901      	bls.n	8007fec <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8007fe8:	2342      	movs	r3, #66	; 0x42
 8007fea:	e0ce      	b.n	800818a <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8007fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007ff0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ff4:	4413      	add	r3, r2
 8007ff6:	79fa      	ldrb	r2, [r7, #7]
 8007ff8:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007ffc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008000:	3301      	adds	r3, #1
 8008002:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8008006:	88bb      	ldrh	r3, [r7, #4]
 8008008:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800800a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800800e:	f107 0208 	add.w	r2, r7, #8
 8008012:	4413      	add	r3, r2
 8008014:	88ba      	ldrh	r2, [r7, #4]
 8008016:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008018:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800801c:	3302      	adds	r3, #2
 800801e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8008026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800802a:	f107 0208 	add.w	r2, r7, #8
 800802e:	4413      	add	r3, r2
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008034:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008038:	3302      	adds	r3, #2
 800803a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 800803e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008042:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008046:	4413      	add	r3, r2
 8008048:	79ba      	ldrb	r2, [r7, #6]
 800804a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800804e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008052:	3301      	adds	r3, #1
 8008054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800805c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008060:	4413      	add	r3, r2
 8008062:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008066:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800806a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800806e:	3301      	adds	r3, #1
 8008070:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8008074:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008078:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800807c:	4413      	add	r3, r2
 800807e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008082:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008086:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800808a:	3301      	adds	r3, #1
 800808c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008090:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008094:	f107 0208 	add.w	r2, r7, #8
 8008098:	4413      	add	r3, r2
 800809a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800809e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fbaa 	bl	80097fa <memcpy>
  indx +=  LocalNameLen;
 80080a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80080aa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80080ae:	4413      	add	r3, r2
 80080b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80080b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80080bc:	4413      	add	r3, r2
 80080be:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80080c2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80080c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080ca:	3301      	adds	r3, #1
 80080cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80080d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080d4:	f107 0208 	add.w	r2, r7, #8
 80080d8:	4413      	add	r3, r2
 80080da:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80080de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80080e0:	4618      	mov	r0, r3
 80080e2:	f001 fb8a 	bl	80097fa <memcpy>
  indx +=  ServiceUUIDLen;  
 80080e6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80080ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80080ee:	4413      	add	r3, r2
 80080f0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80080f4:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80080f8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80080fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008100:	f107 0208 	add.w	r2, r7, #8
 8008104:	4413      	add	r3, r2
 8008106:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800810a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800810c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008110:	3302      	adds	r3, #2
 8008112:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008116:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800811a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800811e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008122:	f107 0208 	add.w	r2, r7, #8
 8008126:	4413      	add	r3, r2
 8008128:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800812c:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800812e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008132:	3302      	adds	r3, #2
 8008134:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008138:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800813c:	2218      	movs	r2, #24
 800813e:	2100      	movs	r1, #0
 8008140:	4618      	mov	r0, r3
 8008142:	f001 fb68 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008146:	233f      	movs	r3, #63	; 0x3f
 8008148:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800814a:	2383      	movs	r3, #131	; 0x83
 800814c:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8008154:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008158:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800815a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800815e:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8008160:	2301      	movs	r3, #1
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008164:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fea4 	bl	8008eb8 <hci_send_req>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	da01      	bge.n	800817a <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 8008176:	23ff      	movs	r3, #255	; 0xff
 8008178:	e007      	b.n	800818a <aci_gap_set_discoverable+0x1d6>

  if (status) {
 800817a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800817e:	2b00      	cmp	r3, #0
 8008180:	d002      	beq.n	8008188 <aci_gap_set_discoverable+0x1d4>
    return status;
 8008182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008186:	e000      	b.n	800818a <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3754      	adds	r7, #84	; 0x54
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}

08008192 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b091      	sub	sp, #68	; 0x44
 8008196:	af00      	add	r7, sp, #0
 8008198:	603a      	str	r2, [r7, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	4603      	mov	r3, r0
 800819e:	71fb      	strb	r3, [r7, #7]
 80081a0:	460b      	mov	r3, r1
 80081a2:	71bb      	strb	r3, [r7, #6]
 80081a4:	4613      	mov	r3, r2
 80081a6:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80081ac:	79bb      	ldrb	r3, [r7, #6]
 80081ae:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80081b0:	79bb      	ldrb	r3, [r7, #6]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	f107 030e 	add.w	r3, r7, #14
 80081bc:	6814      	ldr	r4, [r2, #0]
 80081be:	6850      	ldr	r0, [r2, #4]
 80081c0:	6891      	ldr	r1, [r2, #8]
 80081c2:	68d2      	ldr	r2, [r2, #12]
 80081c4:	601c      	str	r4, [r3, #0]
 80081c6:	6058      	str	r0, [r3, #4]
 80081c8:	6099      	str	r1, [r3, #8]
 80081ca:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80081cc:	797b      	ldrb	r3, [r7, #5]
 80081ce:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80081d0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80081d4:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80081d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80081da:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80081de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081e0:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80081e4:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80081e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80081ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081f0:	2218      	movs	r2, #24
 80081f2:	2100      	movs	r1, #0
 80081f4:	4618      	mov	r0, r3
 80081f6:	f001 fb0e 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80081fa:	233f      	movs	r3, #63	; 0x3f
 80081fc:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80081fe:	2386      	movs	r3, #134	; 0x86
 8008200:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 8008202:	f107 030c 	add.w	r3, r7, #12
 8008206:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8008208:	231a      	movs	r3, #26
 800820a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 800820c:	f107 030b 	add.w	r3, r7, #11
 8008210:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8008212:	2301      	movs	r3, #1
 8008214:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fe4b 	bl	8008eb8 <hci_send_req>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	da01      	bge.n	800822c <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008228:	23ff      	movs	r3, #255	; 0xff
 800822a:	e005      	b.n	8008238 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800822c:	7afb      	ldrb	r3, [r7, #11]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	e000      	b.n	8008238 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3744      	adds	r7, #68	; 0x44
 800823c:	46bd      	mov	sp, r7
 800823e:	bd90      	pop	{r4, r7, pc}

08008240 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b092      	sub	sp, #72	; 0x48
 8008244:	af00      	add	r7, sp, #0
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	4603      	mov	r3, r0
 800824a:	81fb      	strh	r3, [r7, #14]
 800824c:	460b      	mov	r3, r1
 800824e:	81bb      	strh	r3, [r7, #12]
 8008250:	4613      	mov	r3, r2
 8008252:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8008254:	89fb      	ldrh	r3, [r7, #14]
 8008256:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8008258:	89bb      	ldrh	r3, [r7, #12]
 800825a:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	f107 031d 	add.w	r3, r7, #29
 8008266:	6811      	ldr	r1, [r2, #0]
 8008268:	6019      	str	r1, [r3, #0]
 800826a:	8892      	ldrh	r2, [r2, #4]
 800826c:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 800826e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8008272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 8008276:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800827a:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 800827c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008280:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 8008282:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008286:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8008288:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800828c:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 800828e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008292:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 8008294:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008298:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800829a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800829e:	2218      	movs	r2, #24
 80082a0:	2100      	movs	r1, #0
 80082a2:	4618      	mov	r0, r3
 80082a4:	f001 fab7 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082a8:	233f      	movs	r3, #63	; 0x3f
 80082aa:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80082ac:	239c      	movs	r3, #156	; 0x9c
 80082ae:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 80082b0:	f107 0318 	add.w	r3, r7, #24
 80082b4:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 80082b6:	2318      	movs	r3, #24
 80082b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 80082ba:	230f      	movs	r3, #15
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80082be:	f107 0317 	add.w	r3, r7, #23
 80082c2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80082c4:	2301      	movs	r3, #1
 80082c6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80082c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fdf2 	bl	8008eb8 <hci_send_req>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da01      	bge.n	80082de <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 80082da:	23ff      	movs	r3, #255	; 0xff
 80082dc:	e000      	b.n	80082e0 <aci_gap_create_connection+0xa0>

  return status;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3748      	adds	r7, #72	; 0x48
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082ee:	f107 0308 	add.w	r3, r7, #8
 80082f2:	2218      	movs	r2, #24
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fa8d 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082fc:	233f      	movs	r3, #63	; 0x3f
 80082fe:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008300:	f240 1301 	movw	r3, #257	; 0x101
 8008304:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008306:	1dfb      	adds	r3, r7, #7
 8008308:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800830a:	2301      	movs	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800830e:	f107 0308 	add.w	r3, r7, #8
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f000 fdcf 	bl	8008eb8 <hci_send_req>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	da01      	bge.n	8008324 <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008320:	23ff      	movs	r3, #255	; 0xff
 8008322:	e000      	b.n	8008326 <aci_gatt_init+0x3e>

  return status;
 8008324:	79fb      	ldrb	r3, [r7, #7]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b090      	sub	sp, #64	; 0x40
 8008332:	af00      	add	r7, sp, #0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	4611      	mov	r1, r2
 8008338:	461a      	mov	r2, r3
 800833a:	4603      	mov	r3, r0
 800833c:	71fb      	strb	r3, [r7, #7]
 800833e:	460b      	mov	r3, r1
 8008340:	71bb      	strb	r3, [r7, #6]
 8008342:	4613      	mov	r3, r2
 8008344:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008346:	2300      	movs	r3, #0
 8008348:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 800834c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008350:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008354:	4413      	add	r3, r2
 8008356:	79fa      	ldrb	r2, [r7, #7]
 8008358:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800835c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008360:	3301      	adds	r3, #1
 8008362:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d103      	bne.n	8008374 <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 800836c:	2302      	movs	r3, #2
 800836e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008372:	e002      	b.n	800837a <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 8008374:	2310      	movs	r3, #16
 8008376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 800837a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800837e:	f107 020c 	add.w	r2, r7, #12
 8008382:	4413      	add	r3, r2
 8008384:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f001 fa35 	bl	80097fa <memcpy>
  indx +=  uuid_len;
 8008390:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008394:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008398:	4413      	add	r3, r2
 800839a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 800839e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80083a6:	4413      	add	r3, r2
 80083a8:	79ba      	ldrb	r2, [r7, #6]
 80083aa:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80083ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083b2:	3301      	adds	r3, #1
 80083b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80083b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083bc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80083c0:	4413      	add	r3, r2
 80083c2:	797a      	ldrb	r2, [r7, #5]
 80083c4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80083c8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083cc:	3301      	adds	r3, #1
 80083ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80083d2:	f107 0320 	add.w	r3, r7, #32
 80083d6:	2203      	movs	r2, #3
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f001 fa1b 	bl	8009816 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083e4:	2218      	movs	r2, #24
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fa14 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80083ee:	233f      	movs	r3, #63	; 0x3f
 80083f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80083f2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80083f6:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80083fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8008404:	f107 0320 	add.w	r3, r7, #32
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800840a:	2303      	movs	r3, #3
 800840c:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800840e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008412:	2100      	movs	r1, #0
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fd4f 	bl	8008eb8 <hci_send_req>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	da01      	bge.n	8008424 <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008420:	23ff      	movs	r3, #255	; 0xff
 8008422:	e00c      	b.n	800843e <aci_gatt_add_serv+0x110>

  if (resp.status) {
 8008424:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d002      	beq.n	8008432 <aci_gatt_add_serv+0x104>
    return resp.status;
 800842c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008430:	e005      	b.n	800843e <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008432:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 8008436:	b29a      	uxth	r2, r3
 8008438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800843a:	801a      	strh	r2, [r3, #0]

  return 0;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	3740      	adds	r7, #64	; 0x40
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b092      	sub	sp, #72	; 0x48
 800844a:	af00      	add	r7, sp, #0
 800844c:	603a      	str	r2, [r7, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	4603      	mov	r3, r0
 8008452:	80fb      	strh	r3, [r7, #6]
 8008454:	460b      	mov	r3, r1
 8008456:	717b      	strb	r3, [r7, #5]
 8008458:	4613      	mov	r3, r2
 800845a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008466:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800846a:	f107 020c 	add.w	r2, r7, #12
 800846e:	4413      	add	r3, r2
 8008470:	88fa      	ldrh	r2, [r7, #6]
 8008472:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008474:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008478:	3302      	adds	r3, #2
 800847a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 800847e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008482:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008486:	4413      	add	r3, r2
 8008488:	797a      	ldrb	r2, [r7, #5]
 800848a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800848e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008492:	3301      	adds	r3, #1
 8008494:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008498:	797b      	ldrb	r3, [r7, #5]
 800849a:	2b01      	cmp	r3, #1
 800849c:	d103      	bne.n	80084a6 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 800849e:	2302      	movs	r3, #2
 80084a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80084a4:	e002      	b.n	80084ac <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 80084a6:	2310      	movs	r3, #16
 80084a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80084ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084b0:	f107 020c 	add.w	r2, r7, #12
 80084b4:	4413      	add	r3, r2
 80084b6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f99c 	bl	80097fa <memcpy>
  indx +=  uuid_len;
 80084c2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80084c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084ca:	4413      	add	r3, r2
 80084cc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 80084d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084d8:	4413      	add	r3, r2
 80084da:	793a      	ldrb	r2, [r7, #4]
 80084dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084e4:	3301      	adds	r3, #1
 80084e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80084ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084f2:	4413      	add	r3, r2
 80084f4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80084f8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008500:	3301      	adds	r3, #1
 8008502:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8008506:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800850a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800850e:	4413      	add	r3, r2
 8008510:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8008514:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008518:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800851c:	3301      	adds	r3, #1
 800851e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 8008522:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800852a:	4413      	add	r3, r2
 800852c:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8008530:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008534:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008538:	3301      	adds	r3, #1
 800853a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 800853e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008542:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008546:	4413      	add	r3, r2
 8008548:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800854c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008550:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008554:	3301      	adds	r3, #1
 8008556:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 800855a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800855e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008562:	4413      	add	r3, r2
 8008564:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008568:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800856c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008570:	3301      	adds	r3, #1
 8008572:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800857a:	2203      	movs	r2, #3
 800857c:	2100      	movs	r1, #0
 800857e:	4618      	mov	r0, r3
 8008580:	f001 f949 	bl	8009816 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008588:	2218      	movs	r2, #24
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f001 f942 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008592:	233f      	movs	r3, #63	; 0x3f
 8008594:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008596:	f44f 7382 	mov.w	r3, #260	; 0x104
 800859a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 800859c:	f107 030c 	add.w	r3, r7, #12
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80085a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80085a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80085ae:	2303      	movs	r3, #3
 80085b0:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80085b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fc7d 	bl	8008eb8 <hci_send_req>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da01      	bge.n	80085c8 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 80085c4:	23ff      	movs	r3, #255	; 0xff
 80085c6:	e00c      	b.n	80085e2 <aci_gatt_add_char+0x19c>

  if (resp.status) {
 80085c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <aci_gatt_add_char+0x190>
    return resp.status;
 80085d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085d4:	e005      	b.n	80085e2 <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 80085d6:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80085da:	b29a      	uxth	r2, r3
 80085dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085de:	801a      	strh	r2, [r3, #0]

  return 0;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3748      	adds	r7, #72	; 0x48
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80085ea:	b590      	push	{r4, r7, lr}
 80085ec:	b0ab      	sub	sp, #172	; 0xac
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	4604      	mov	r4, r0
 80085f2:	4608      	mov	r0, r1
 80085f4:	4611      	mov	r1, r2
 80085f6:	461a      	mov	r2, r3
 80085f8:	4623      	mov	r3, r4
 80085fa:	80fb      	strh	r3, [r7, #6]
 80085fc:	4603      	mov	r3, r0
 80085fe:	80bb      	strh	r3, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
 8008604:	4613      	mov	r3, r2
 8008606:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 800860e:	78bb      	ldrb	r3, [r7, #2]
 8008610:	2b7a      	cmp	r3, #122	; 0x7a
 8008612:	d901      	bls.n	8008618 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008614:	2342      	movs	r3, #66	; 0x42
 8008616:	e076      	b.n	8008706 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 8008618:	88fb      	ldrh	r3, [r7, #6]
 800861a:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800861c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008620:	f107 0208 	add.w	r2, r7, #8
 8008624:	4413      	add	r3, r2
 8008626:	88fa      	ldrh	r2, [r7, #6]
 8008628:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800862a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800862e:	3302      	adds	r3, #2
 8008630:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 8008634:	88bb      	ldrh	r3, [r7, #4]
 8008636:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008638:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800863c:	f107 0208 	add.w	r2, r7, #8
 8008640:	4413      	add	r3, r2
 8008642:	88ba      	ldrh	r2, [r7, #4]
 8008644:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008646:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800864a:	3302      	adds	r3, #2
 800864c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8008650:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008654:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008658:	4413      	add	r3, r2
 800865a:	78fa      	ldrb	r2, [r7, #3]
 800865c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008660:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008664:	3301      	adds	r3, #1
 8008666:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800866a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800866e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008672:	4413      	add	r3, r2
 8008674:	78ba      	ldrb	r2, [r7, #2]
 8008676:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800867a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800867e:	3301      	adds	r3, #1
 8008680:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008684:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008688:	f107 0208 	add.w	r2, r7, #8
 800868c:	4413      	add	r3, r2
 800868e:	78ba      	ldrb	r2, [r7, #2]
 8008690:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008694:	4618      	mov	r0, r3
 8008696:	f001 f8b0 	bl	80097fa <memcpy>
  indx +=  charValueLen;
 800869a:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800869e:	78bb      	ldrb	r3, [r7, #2]
 80086a0:	4413      	add	r3, r2
 80086a2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80086a6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086aa:	2218      	movs	r2, #24
 80086ac:	2100      	movs	r1, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f001 f8b1 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80086b4:	233f      	movs	r3, #63	; 0x3f
 80086b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80086ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 80086be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80086ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80086ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80086d2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80086d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80086da:	2301      	movs	r3, #1
 80086dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80086e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fbe6 	bl	8008eb8 <hci_send_req>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da01      	bge.n	80086f6 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 80086f2:	23ff      	movs	r3, #255	; 0xff
 80086f4:	e007      	b.n	8008706 <aci_gatt_update_char_value+0x11c>

  if (status) {
 80086f6:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <aci_gatt_update_char_value+0x11a>
    return status;
 80086fe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8008702:	e000      	b.n	8008706 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	37ac      	adds	r7, #172	; 0xac
 800870a:	46bd      	mov	sp, r7
 800870c:	bd90      	pop	{r4, r7, pc}

0800870e <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800870e:	b590      	push	{r4, r7, lr}
 8008710:	b091      	sub	sp, #68	; 0x44
 8008712:	af00      	add	r7, sp, #0
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	4623      	mov	r3, r4
 800871e:	80fb      	strh	r3, [r7, #6]
 8008720:	4603      	mov	r3, r0
 8008722:	80bb      	strh	r3, [r7, #4]
 8008724:	460b      	mov	r3, r1
 8008726:	807b      	strh	r3, [r7, #2]
 8008728:	4613      	mov	r3, r2
 800872a:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8008736:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800873a:	f107 020c 	add.w	r2, r7, #12
 800873e:	4413      	add	r3, r2
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008748:	3302      	adds	r3, #2
 800874a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 800874e:	88bb      	ldrh	r3, [r7, #4]
 8008750:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8008752:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008756:	f107 020c 	add.w	r2, r7, #12
 800875a:	4413      	add	r3, r2
 800875c:	88ba      	ldrh	r2, [r7, #4]
 800875e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008760:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008764:	3302      	adds	r3, #2
 8008766:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 800876a:	887b      	ldrh	r3, [r7, #2]
 800876c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 800876e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008772:	f107 020c 	add.w	r2, r7, #12
 8008776:	4413      	add	r3, r2
 8008778:	887a      	ldrh	r2, [r7, #2]
 800877a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800877c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008780:	3302      	adds	r3, #2
 8008782:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8008786:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800878a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800878e:	4413      	add	r3, r2
 8008790:	787a      	ldrb	r2, [r7, #1]
 8008792:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008796:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800879a:	3301      	adds	r3, #1
 800879c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 80087a0:	787b      	ldrb	r3, [r7, #1]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d103      	bne.n	80087ae <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 80087a6:	2302      	movs	r3, #2
 80087a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80087ac:	e002      	b.n	80087b4 <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 80087ae:	2310      	movs	r3, #16
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80087b4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087b8:	f107 020c 	add.w	r2, r7, #12
 80087bc:	4413      	add	r3, r2
 80087be:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80087c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 f818 	bl	80097fa <memcpy>
  indx +=  uuid_len;
 80087ca:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80087ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087d2:	4413      	add	r3, r2
 80087d4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087dc:	2218      	movs	r2, #24
 80087de:	2100      	movs	r1, #0
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 f818 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087e6:	233f      	movs	r3, #63	; 0x3f
 80087e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80087ea:	f44f 738b 	mov.w	r3, #278	; 0x116
 80087ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80087f0:	f107 030c 	add.w	r3, r7, #12
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80087f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 80087fc:	230f      	movs	r3, #15
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 8008800:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 8008806:	2301      	movs	r3, #1
 8008808:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 800880a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800880e:	2100      	movs	r1, #0
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fb51 	bl	8008eb8 <hci_send_req>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	da01      	bge.n	8008820 <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 800881c:	23ff      	movs	r3, #255	; 0xff
 800881e:	e001      	b.n	8008824 <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 8008820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008824:	4618      	mov	r0, r3
 8008826:	3744      	adds	r7, #68	; 0x44
 8008828:	46bd      	mov	sp, r7
 800882a:	bd90      	pop	{r4, r7, pc}

0800882c <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b0ac      	sub	sp, #176	; 0xb0
 8008830:	af00      	add	r7, sp, #0
 8008832:	607b      	str	r3, [r7, #4]
 8008834:	4603      	mov	r3, r0
 8008836:	81fb      	strh	r3, [r7, #14]
 8008838:	460b      	mov	r3, r1
 800883a:	81bb      	strh	r3, [r7, #12]
 800883c:	4613      	mov	r3, r2
 800883e:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b7b      	cmp	r3, #123	; 0x7b
 800884a:	d901      	bls.n	8008850 <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 800884c:	2342      	movs	r3, #66	; 0x42
 800884e:	e065      	b.n	800891c <aci_gatt_write_charac_descriptor+0xf0>

  conn_handle = htobs(conn_handle);
 8008850:	89fb      	ldrh	r3, [r7, #14]
 8008852:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8008854:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008858:	f107 0210 	add.w	r2, r7, #16
 800885c:	4413      	add	r3, r2
 800885e:	89fa      	ldrh	r2, [r7, #14]
 8008860:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008862:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008866:	3302      	adds	r3, #2
 8008868:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 800886c:	89bb      	ldrh	r3, [r7, #12]
 800886e:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8008870:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008874:	f107 0210 	add.w	r2, r7, #16
 8008878:	4413      	add	r3, r2
 800887a:	89ba      	ldrh	r2, [r7, #12]
 800887c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800887e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008882:	3302      	adds	r3, #2
 8008884:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8008888:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800888c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008890:	4413      	add	r3, r2
 8008892:	7afa      	ldrb	r2, [r7, #11]
 8008894:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008898:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800889c:	3301      	adds	r3, #1
 800889e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80088a2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80088a6:	f107 0210 	add.w	r2, r7, #16
 80088aa:	4413      	add	r3, r2
 80088ac:	7afa      	ldrb	r2, [r7, #11]
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4618      	mov	r0, r3
 80088b2:	f000 ffa2 	bl	80097fa <memcpy>
  indx +=  value_len;
 80088b6:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 80088ba:	7afb      	ldrb	r3, [r7, #11]
 80088bc:	4413      	add	r3, r2
 80088be:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80088c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80088c6:	2218      	movs	r2, #24
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 ffa3 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80088d0:	233f      	movs	r3, #63	; 0x3f
 80088d2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 80088d6:	f240 1321 	movw	r3, #289	; 0x121
 80088da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 80088de:	f107 0310 	add.w	r3, r7, #16
 80088e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 80088e6:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80088ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 80088ee:	230f      	movs	r3, #15
 80088f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80088f4:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80088f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 80088fc:	2301      	movs	r3, #1
 80088fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 8008902:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008906:	2100      	movs	r1, #0
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fad5 	bl	8008eb8 <hci_send_req>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	da01      	bge.n	8008918 <aci_gatt_write_charac_descriptor+0xec>
    return BLE_STATUS_TIMEOUT;
 8008914:	23ff      	movs	r3, #255	; 0xff
 8008916:	e001      	b.n	800891c <aci_gatt_write_charac_descriptor+0xf0>

  return status;
 8008918:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 800891c:	4618      	mov	r0, r3
 800891e:	37b0      	adds	r7, #176	; 0xb0
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b092      	sub	sp, #72	; 0x48
 8008928:	af00      	add	r7, sp, #0
 800892a:	607b      	str	r3, [r7, #4]
 800892c:	4603      	mov	r3, r0
 800892e:	81fb      	strh	r3, [r7, #14]
 8008930:	460b      	mov	r3, r1
 8008932:	81bb      	strh	r3, [r7, #12]
 8008934:	4613      	mov	r3, r2
 8008936:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8008938:	7afb      	ldrb	r3, [r7, #11]
 800893a:	2b14      	cmp	r3, #20
 800893c:	d901      	bls.n	8008942 <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800893e:	2342      	movs	r3, #66	; 0x42
 8008940:	e031      	b.n	80089a6 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 8008942:	89fb      	ldrh	r3, [r7, #14]
 8008944:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8008946:	89bb      	ldrh	r3, [r7, #12]
 8008948:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800894e:	7afa      	ldrb	r2, [r7, #11]
 8008950:	f107 0314 	add.w	r3, r7, #20
 8008954:	3305      	adds	r3, #5
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 ff4e 	bl	80097fa <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800895e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008962:	2218      	movs	r2, #24
 8008964:	2100      	movs	r1, #0
 8008966:	4618      	mov	r0, r3
 8008968:	f000 ff55 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800896c:	233f      	movs	r3, #63	; 0x3f
 800896e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8008970:	f240 1323 	movw	r3, #291	; 0x123
 8008974:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8008976:	f107 0314 	add.w	r3, r7, #20
 800897a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	3305      	adds	r3, #5
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8008982:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008986:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 800898c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fa90 	bl	8008eb8 <hci_send_req>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	da01      	bge.n	80089a2 <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800899e:	23ff      	movs	r3, #255	; 0xff
 80089a0:	e001      	b.n	80089a6 <aci_gatt_write_without_response+0x82>

  return status;
 80089a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3748      	adds	r7, #72	; 0x48
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b0aa      	sub	sp, #168	; 0xa8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	4603      	mov	r3, r0
 80089b6:	603a      	str	r2, [r7, #0]
 80089b8:	71fb      	strb	r3, [r7, #7]
 80089ba:	460b      	mov	r3, r1
 80089bc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80089c4:	79bb      	ldrb	r3, [r7, #6]
 80089c6:	2b7e      	cmp	r3, #126	; 0x7e
 80089c8:	d901      	bls.n	80089ce <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 80089ca:	2342      	movs	r3, #66	; 0x42
 80089cc:	e052      	b.n	8008a74 <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 80089ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089d2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80089d6:	4413      	add	r3, r2
 80089d8:	79fa      	ldrb	r2, [r7, #7]
 80089da:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089de:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089e2:	3301      	adds	r3, #1
 80089e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 80089e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80089f0:	4413      	add	r3, r2
 80089f2:	79ba      	ldrb	r2, [r7, #6]
 80089f4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089fc:	3301      	adds	r3, #1
 80089fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8008a02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008a06:	f107 0208 	add.w	r2, r7, #8
 8008a0a:	4413      	add	r3, r2
 8008a0c:	79ba      	ldrb	r2, [r7, #6]
 8008a0e:	6839      	ldr	r1, [r7, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fef2 	bl	80097fa <memcpy>
  indx +=  len;
 8008a16:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8008a1a:	79bb      	ldrb	r3, [r7, #6]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a22:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a26:	2218      	movs	r2, #24
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fef3 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a30:	233f      	movs	r3, #63	; 0x3f
 8008a32:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8008a36:	230c      	movs	r3, #12
 8008a38:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8008a44:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8008a4c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8008a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008a5a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fa29 	bl	8008eb8 <hci_send_req>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da01      	bge.n	8008a70 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008a6c:	23ff      	movs	r3, #255	; 0xff
 8008a6e:	e001      	b.n	8008a74 <aci_hal_write_config_data+0xc6>

  return status;
 8008a70:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	37a8      	adds	r7, #168	; 0xa8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	; 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	460a      	mov	r2, r1
 8008a86:	71fb      	strb	r3, [r7, #7]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008a8c:	79fb      	ldrb	r3, [r7, #7]
 8008a8e:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008a90:	79bb      	ldrb	r3, [r7, #6]
 8008a92:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a94:	f107 0310 	add.w	r3, r7, #16
 8008a98:	2218      	movs	r2, #24
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 feba 	bl	8009816 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008aa2:	233f      	movs	r3, #63	; 0x3f
 8008aa4:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008aa6:	230f      	movs	r3, #15
 8008aa8:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008aaa:	f107 030c 	add.w	r3, r7, #12
 8008aae:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008ab4:	f107 030b 	add.w	r3, r7, #11
 8008ab8:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008aba:	2301      	movs	r3, #1
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f9f7 	bl	8008eb8 <hci_send_req>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	da01      	bge.n	8008ad4 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008ad0:	23ff      	movs	r3, #255	; 0xff
 8008ad2:	e000      	b.n	8008ad6 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3728      	adds	r7, #40	; 0x28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008ade:	b590      	push	{r4, r7, lr}
 8008ae0:	b089      	sub	sp, #36	; 0x24
 8008ae2:	af02      	add	r7, sp, #8
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008ae8:	f107 0410 	add.w	r4, r7, #16
 8008aec:	f107 0215 	add.w	r2, r7, #21
 8008af0:	f107 0112 	add.w	r1, r7, #18
 8008af4:	f107 0016 	add.w	r0, r7, #22
 8008af8:	f107 030e 	add.w	r3, r7, #14
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	4623      	mov	r3, r4
 8008b00:	f000 f853 	bl	8008baa <hci_le_read_local_version>
 8008b04:	4603      	mov	r3, r0
 8008b06:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008b08:	7dfb      	ldrb	r3, [r7, #23]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d126      	bne.n	8008b5c <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008b0e:	8a7b      	ldrh	r3, [r7, #18]
 8008b10:	0a1b      	lsrs	r3, r3, #8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008b1a:	8a7b      	ldrh	r3, [r7, #18]
 8008b1c:	021b      	lsls	r3, r3, #8
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	b21a      	sxth	r2, r3
 8008b2a:	89fb      	ldrh	r3, [r7, #14]
 8008b2c:	091b      	lsrs	r3, r3, #4
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	b21b      	sxth	r3, r3
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	b21b      	sxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	89fb      	ldrh	r3, [r7, #14]
 8008b4a:	b21b      	sxth	r3, r3
 8008b4c:	f003 030f 	and.w	r3, r3, #15
 8008b50:	b21b      	sxth	r3, r3
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd90      	pop	{r4, r7, pc}

08008b66 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b088      	sub	sp, #32
 8008b6a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	2218      	movs	r2, #24
 8008b72:	2100      	movs	r1, #0
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fe4e 	bl	8009816 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b82:	1dfb      	adds	r3, r7, #7
 8008b84:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b86:	2301      	movs	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b8a:	f107 0308 	add.w	r3, r7, #8
 8008b8e:	2100      	movs	r1, #0
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f991 	bl	8008eb8 <hci_send_req>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	da01      	bge.n	8008ba0 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008b9c:	23ff      	movs	r3, #255	; 0xff
 8008b9e:	e000      	b.n	8008ba2 <hci_reset+0x3c>
  
  return status;  
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3720      	adds	r7, #32
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b08e      	sub	sp, #56	; 0x38
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
 8008bb6:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	2209      	movs	r2, #9
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fe28 	bl	8009816 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008bc6:	f107 0320 	add.w	r3, r7, #32
 8008bca:	2218      	movs	r2, #24
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fe21 	bl	8009816 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008bd4:	2304      	movs	r3, #4
 8008bd6:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008bea:	2309      	movs	r3, #9
 8008bec:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008bee:	f107 0320 	add.w	r3, r7, #32
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 f95f 	bl	8008eb8 <hci_send_req>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da01      	bge.n	8008c04 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008c00:	23ff      	movs	r3, #255	; 0xff
 8008c02:	e018      	b.n	8008c36 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008c04:	7d3b      	ldrb	r3, [r7, #20]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <hci_le_read_local_version+0x64>
    return resp.status;
 8008c0a:	7d3b      	ldrb	r3, [r7, #20]
 8008c0c:	e013      	b.n	8008c36 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008c0e:	7d7a      	ldrb	r2, [r7, #21]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008c14:	8afa      	ldrh	r2, [r7, #22]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008c1a:	7e3a      	ldrb	r2, [r7, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008c20:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008c2a:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c32:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3738      	adds	r7, #56	; 0x38
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b092      	sub	sp, #72	; 0x48
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	4603      	mov	r3, r0
 8008c46:	6039      	str	r1, [r7, #0]
 8008c48:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	2220      	movs	r2, #32
 8008c50:	2100      	movs	r1, #0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 fddf 	bl	8009816 <memset>
  scan_resp_cp.length = length;
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b1f      	cmp	r3, #31
 8008c60:	bf28      	it	cs
 8008c62:	231f      	movcs	r3, #31
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	461a      	mov	r2, r3
 8008c68:	f107 0310 	add.w	r3, r7, #16
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f000 fdc2 	bl	80097fa <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c7a:	2218      	movs	r2, #24
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 fdc9 	bl	8009816 <memset>
  rq.ogf = OGF_LE_CTL;
 8008c84:	2308      	movs	r3, #8
 8008c86:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008c88:	2309      	movs	r3, #9
 8008c8a:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8008c8c:	f107 0310 	add.w	r3, r7, #16
 8008c90:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008c92:	2320      	movs	r3, #32
 8008c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8008c96:	f107 030f 	add.w	r3, r7, #15
 8008c9a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f906 	bl	8008eb8 <hci_send_req>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	da01      	bge.n	8008cb6 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008cb2:	23ff      	movs	r3, #255	; 0xff
 8008cb4:	e000      	b.n	8008cb8 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3748      	adds	r7, #72	; 0x48
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d001      	beq.n	8008cda <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e00c      	b.n	8008cf4 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3302      	adds	r3, #2
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008ce8:	3b03      	subs	r3, #3
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d001      	beq.n	8008cf2 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e000      	b.n	8008cf4 <verify_packet+0x34>
  
  return 0;      
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b0a6      	sub	sp, #152	; 0x98
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	4603      	mov	r3, r0
 8008d0a:	81fb      	strh	r3, [r7, #14]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	81bb      	strh	r3, [r7, #12]
 8008d10:	4613      	mov	r3, r2
 8008d12:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008d14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d1c:	b21a      	sxth	r2, r3
 8008d1e:	89fb      	ldrh	r3, [r7, #14]
 8008d20:	029b      	lsls	r3, r3, #10
 8008d22:	b21b      	sxth	r3, r3
 8008d24:	4313      	orrs	r3, r2
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008d30:	2301      	movs	r3, #1
 8008d32:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008d34:	f107 0318 	add.w	r3, r7, #24
 8008d38:	3301      	adds	r3, #1
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	8819      	ldrh	r1, [r3, #0]
 8008d42:	789b      	ldrb	r3, [r3, #2]
 8008d44:	8011      	strh	r1, [r2, #0]
 8008d46:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008d48:	f107 0318 	add.w	r3, r7, #24
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	7afa      	ldrb	r2, [r7, #11]
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fd51 	bl	80097fa <memcpy>
  
  if (hciContext.io.Send)
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <send_cmd+0x7c>)
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d009      	beq.n	8008d74 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008d60:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <send_cmd+0x7c>)
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	7afa      	ldrb	r2, [r7, #11]
 8008d66:	b292      	uxth	r2, r2
 8008d68:	3204      	adds	r2, #4
 8008d6a:	b291      	uxth	r1, r2
 8008d6c:	f107 0218 	add.w	r2, r7, #24
 8008d70:	4610      	mov	r0, r2
 8008d72:	4798      	blx	r3
  }
}
 8008d74:	bf00      	nop
 8008d76:	3798      	adds	r7, #152	; 0x98
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	200004a4 	.word	0x200004a4

08008d80 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008d8a:	e00a      	b.n	8008da2 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008d8c:	f107 030c 	add.w	r3, r7, #12
 8008d90:	4619      	mov	r1, r3
 8008d92:	6838      	ldr	r0, [r7, #0]
 8008d94:	f000 faea 	bl	800936c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fa51 	bl	8009244 <list_insert_head>
  while (!list_is_empty(src_list))
 8008da2:	6838      	ldr	r0, [r7, #0]
 8008da4:	f000 fa2c 	bl	8009200 <list_is_empty>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0ee      	beq.n	8008d8c <move_list+0xc>
  }
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008dbe:	e009      	b.n	8008dd4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008dc0:	1d3b      	adds	r3, r7, #4
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4809      	ldr	r0, [pc, #36]	; (8008dec <free_event_list+0x34>)
 8008dc6:	f000 faaa 	bl	800931e <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4808      	ldr	r0, [pc, #32]	; (8008df0 <free_event_list+0x38>)
 8008dd0:	f000 fa5e 	bl	8009290 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008dd4:	4806      	ldr	r0, [pc, #24]	; (8008df0 <free_event_list+0x38>)
 8008dd6:	f000 faf0 	bl	80093ba <list_get_size>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	ddef      	ble.n	8008dc0 <free_event_list+0x8>
  }
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	2000097c 	.word	0x2000097c
 8008df0:	20000974 	.word	0x20000974

08008df4 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008e04:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <hci_init+0x74>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008e0a:	4818      	ldr	r0, [pc, #96]	; (8008e6c <hci_init+0x78>)
 8008e0c:	f000 f9e8 	bl	80091e0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008e10:	4817      	ldr	r0, [pc, #92]	; (8008e70 <hci_init+0x7c>)
 8008e12:	f000 f9e5 	bl	80091e0 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008e16:	f7f8 fa33 	bl	8001280 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
 8008e1e:	e00c      	b.n	8008e3a <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	228c      	movs	r2, #140	; 0x8c
 8008e24:	fb02 f303 	mul.w	r3, r2, r3
 8008e28:	4a12      	ldr	r2, [pc, #72]	; (8008e74 <hci_init+0x80>)
 8008e2a:	4413      	add	r3, r2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	480f      	ldr	r0, [pc, #60]	; (8008e6c <hci_init+0x78>)
 8008e30:	f000 fa2e 	bl	8009290 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008e34:	7bfb      	ldrb	r3, [r7, #15]
 8008e36:	3301      	adds	r3, #1
 8008e38:	73fb      	strb	r3, [r7, #15]
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d9ef      	bls.n	8008e20 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <hci_init+0x74>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <hci_init+0x5c>
 8008e48:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <hci_init+0x74>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008e50:	4b05      	ldr	r3, [pc, #20]	; (8008e68 <hci_init+0x74>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <hci_init+0x6a>
 8008e58:	4b03      	ldr	r3, [pc, #12]	; (8008e68 <hci_init+0x74>)
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	4798      	blx	r3
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	200004a4 	.word	0x200004a4
 8008e6c:	20000974 	.word	0x20000974
 8008e70:	2000097c 	.word	0x2000097c
 8008e74:	200001e8 	.word	0x200001e8

08008e78 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0b      	ldr	r2, [pc, #44]	; (8008eb4 <hci_register_io_bus+0x3c>)
 8008e86:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <hci_register_io_bus+0x3c>)
 8008e8e:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	4a07      	ldr	r2, [pc, #28]	; (8008eb4 <hci_register_io_bus+0x3c>)
 8008e96:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	4a05      	ldr	r2, [pc, #20]	; (8008eb4 <hci_register_io_bus+0x3c>)
 8008e9e:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	4a03      	ldr	r2, [pc, #12]	; (8008eb4 <hci_register_io_bus+0x3c>)
 8008ea6:	6093      	str	r3, [r2, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	200004a4 	.word	0x200004a4

08008eb8 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b08e      	sub	sp, #56	; 0x38
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	885b      	ldrh	r3, [r3, #2]
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ece:	b21a      	sxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	029b      	lsls	r3, r3, #10
 8008ed6:	b21b      	sxth	r3, r3
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	b21b      	sxth	r3, r3
 8008edc:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 f97a 	bl	80091e0 <list_init_head>

  free_event_list();
 8008eec:	f7ff ff64 	bl	8008db8 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	8818      	ldrh	r0, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8859      	ldrh	r1, [r3, #2]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f7ff fefd 	bl	8008d00 <send_cmd>
  
  if (async)
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <hci_send_req+0x58>
  {
    return 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e0e5      	b.n	80090dc <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008f10:	f7f9 fdfa 	bl	8002b08 <HAL_GetTick>
 8008f14:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008f16:	f7f9 fdf7 	bl	8002b08 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f24:	f200 80b6 	bhi.w	8009094 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008f28:	486e      	ldr	r0, [pc, #440]	; (80090e4 <hci_send_req+0x22c>)
 8008f2a:	f000 f969 	bl	8009200 <list_is_empty>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d000      	beq.n	8008f36 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008f34:	e7ef      	b.n	8008f16 <hci_send_req+0x5e>
      {
        break;
 8008f36:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008f38:	f107 0310 	add.w	r3, r7, #16
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4869      	ldr	r0, [pc, #420]	; (80090e4 <hci_send_req+0x22c>)
 8008f40:	f000 f9ed 	bl	800931e <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	3308      	adds	r3, #8
 8008f48:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d17b      	bne.n	800904a <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f54:	3301      	adds	r3, #1
 8008f56:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	3303      	adds	r3, #3
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008f66:	3b03      	subs	r3, #3
 8008f68:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f70:	d04d      	beq.n	800900e <hci_send_req+0x156>
 8008f72:	2b3e      	cmp	r3, #62	; 0x3e
 8008f74:	dc6b      	bgt.n	800904e <hci_send_req+0x196>
 8008f76:	2b10      	cmp	r3, #16
 8008f78:	f000 808e 	beq.w	8009098 <hci_send_req+0x1e0>
 8008f7c:	2b10      	cmp	r3, #16
 8008f7e:	dc66      	bgt.n	800904e <hci_send_req+0x196>
 8008f80:	2b0e      	cmp	r3, #14
 8008f82:	d024      	beq.n	8008fce <hci_send_req+0x116>
 8008f84:	2b0f      	cmp	r3, #15
 8008f86:	d162      	bne.n	800904e <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f94:	429a      	cmp	r2, r3
 8008f96:	f040 8081 	bne.w	800909c <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	2b0f      	cmp	r3, #15
 8008fa0:	d004      	beq.n	8008fac <hci_send_req+0xf4>
          if (cs->status) {
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d053      	beq.n	8009052 <hci_send_req+0x19a>
            goto failed;
 8008faa:	e07a      	b.n	80090a2 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695a      	ldr	r2, [r3, #20]
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	bf28      	it	cs
 8008fb6:	461a      	movcs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6918      	ldr	r0, [r3, #16]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fc8:	f000 fc17 	bl	80097fa <memcpy>
        goto done;
 8008fcc:	e07a      	b.n	80090c4 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd0:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d15f      	bne.n	80090a0 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	3303      	adds	r3, #3
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	3b03      	subs	r3, #3
 8008fea:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	695a      	ldr	r2, [r3, #20]
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	bf28      	it	cs
 8008ff6:	461a      	movcs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6918      	ldr	r0, [r3, #16]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	695b      	ldr	r3, [r3, #20]
 8009004:	461a      	mov	r2, r3
 8009006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009008:	f000 fbf7 	bl	80097fa <memcpy>
        goto done;
 800900c:	e05a      	b.n	80090c4 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d11a      	bne.n	8009056 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	3b01      	subs	r3, #1
 8009024:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695a      	ldr	r2, [r3, #20]
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	429a      	cmp	r2, r3
 800902e:	bf28      	it	cs
 8009030:	461a      	movcs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6918      	ldr	r0, [r3, #16]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	1c59      	adds	r1, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	461a      	mov	r2, r3
 8009044:	f000 fbd9 	bl	80097fa <memcpy>
        goto done;
 8009048:	e03c      	b.n	80090c4 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800904a:	bf00      	nop
 800904c:	e004      	b.n	8009058 <hci_send_req+0x1a0>
        break;
 800904e:	bf00      	nop
 8009050:	e002      	b.n	8009058 <hci_send_req+0x1a0>
          break;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <hci_send_req+0x1a0>
          break;
 8009056:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009058:	4823      	ldr	r0, [pc, #140]	; (80090e8 <hci_send_req+0x230>)
 800905a:	f000 f8d1 	bl	8009200 <list_is_empty>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00d      	beq.n	8009080 <hci_send_req+0x1c8>
 8009064:	481f      	ldr	r0, [pc, #124]	; (80090e4 <hci_send_req+0x22c>)
 8009066:	f000 f8cb 	bl	8009200 <list_is_empty>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d007      	beq.n	8009080 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	4619      	mov	r1, r3
 8009074:	481c      	ldr	r0, [pc, #112]	; (80090e8 <hci_send_req+0x230>)
 8009076:	f000 f90b 	bl	8009290 <list_insert_tail>
      hciReadPacket=NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	e008      	b.n	8009092 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f901 	bl	8009290 <list_insert_tail>
      hciReadPacket=NULL;
 800908e:	2300      	movs	r3, #0
 8009090:	613b      	str	r3, [r7, #16]
  {
 8009092:	e73d      	b.n	8008f10 <hci_send_req+0x58>
        goto failed;
 8009094:	bf00      	nop
 8009096:	e004      	b.n	80090a2 <hci_send_req+0x1ea>
        goto failed;
 8009098:	bf00      	nop
 800909a:	e002      	b.n	80090a2 <hci_send_req+0x1ea>
          goto failed;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <hci_send_req+0x1ea>
          goto failed;
 80090a0:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	4619      	mov	r1, r3
 80090ac:	480e      	ldr	r0, [pc, #56]	; (80090e8 <hci_send_req+0x230>)
 80090ae:	f000 f8c9 	bl	8009244 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80090b2:	f107 0308 	add.w	r3, r7, #8
 80090b6:	4619      	mov	r1, r3
 80090b8:	480a      	ldr	r0, [pc, #40]	; (80090e4 <hci_send_req+0x22c>)
 80090ba:	f7ff fe61 	bl	8008d80 <move_list>

  return -1;
 80090be:	f04f 33ff 	mov.w	r3, #4294967295
 80090c2:	e00b      	b.n	80090dc <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4619      	mov	r1, r3
 80090c8:	4807      	ldr	r0, [pc, #28]	; (80090e8 <hci_send_req+0x230>)
 80090ca:	f000 f8bb 	bl	8009244 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80090ce:	f107 0308 	add.w	r3, r7, #8
 80090d2:	4619      	mov	r1, r3
 80090d4:	4803      	ldr	r0, [pc, #12]	; (80090e4 <hci_send_req+0x22c>)
 80090d6:	f7ff fe53 	bl	8008d80 <move_list>

  return 0;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3738      	adds	r7, #56	; 0x38
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	2000097c 	.word	0x2000097c
 80090e8:	20000974 	.word	0x20000974

080090ec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80090f2:	2300      	movs	r3, #0
 80090f4:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80090f6:	e013      	b.n	8009120 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80090f8:	1d3b      	adds	r3, r7, #4
 80090fa:	4619      	mov	r1, r3
 80090fc:	480e      	ldr	r0, [pc, #56]	; (8009138 <hci_user_evt_proc+0x4c>)
 80090fe:	f000 f90e 	bl	800931e <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009102:	4b0e      	ldr	r3, [pc, #56]	; (800913c <hci_user_evt_proc+0x50>)
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800910a:	4b0c      	ldr	r3, [pc, #48]	; (800913c <hci_user_evt_proc+0x50>)
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	3208      	adds	r2, #8
 8009112:	4610      	mov	r0, r2
 8009114:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4619      	mov	r1, r3
 800911a:	4809      	ldr	r0, [pc, #36]	; (8009140 <hci_user_evt_proc+0x54>)
 800911c:	f000 f8b8 	bl	8009290 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009120:	4805      	ldr	r0, [pc, #20]	; (8009138 <hci_user_evt_proc+0x4c>)
 8009122:	f000 f86d 	bl	8009200 <list_is_empty>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0e5      	beq.n	80090f8 <hci_user_evt_proc+0xc>
  }
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	2000097c 	.word	0x2000097c
 800913c:	200004a4 	.word	0x200004a4
 8009140:	20000974 	.word	0x20000974

08009144 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009154:	481f      	ldr	r0, [pc, #124]	; (80091d4 <hci_notify_asynch_evt+0x90>)
 8009156:	f000 f853 	bl	8009200 <list_is_empty>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d132      	bne.n	80091c6 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009160:	f107 030c 	add.w	r3, r7, #12
 8009164:	4619      	mov	r1, r3
 8009166:	481b      	ldr	r0, [pc, #108]	; (80091d4 <hci_notify_asynch_evt+0x90>)
 8009168:	f000 f8d9 	bl	800931e <list_remove_head>
    
    if (hciContext.io.Receive)
 800916c:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <hci_notify_asynch_evt+0x94>)
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02a      	beq.n	80091ca <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009174:	4b18      	ldr	r3, [pc, #96]	; (80091d8 <hci_notify_asynch_evt+0x94>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	3208      	adds	r2, #8
 800917c:	2180      	movs	r1, #128	; 0x80
 800917e:	4610      	mov	r0, r2
 8009180:	4798      	blx	r3
 8009182:	4603      	mov	r3, r0
 8009184:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009186:	7cfb      	ldrb	r3, [r7, #19]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d016      	beq.n	80091ba <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	7cfa      	ldrb	r2, [r7, #19]
 8009190:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff fd92 	bl	8008cc0 <verify_packet>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4619      	mov	r1, r3
 80091a6:	480d      	ldr	r0, [pc, #52]	; (80091dc <hci_notify_asynch_evt+0x98>)
 80091a8:	f000 f872 	bl	8009290 <list_insert_tail>
 80091ac:	e00d      	b.n	80091ca <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	4619      	mov	r1, r3
 80091b2:	4808      	ldr	r0, [pc, #32]	; (80091d4 <hci_notify_asynch_evt+0x90>)
 80091b4:	f000 f846 	bl	8009244 <list_insert_head>
 80091b8:	e007      	b.n	80091ca <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4619      	mov	r1, r3
 80091be:	4805      	ldr	r0, [pc, #20]	; (80091d4 <hci_notify_asynch_evt+0x90>)
 80091c0:	f000 f840 	bl	8009244 <list_insert_head>
 80091c4:	e001      	b.n	80091ca <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80091c6:	2301      	movs	r3, #1
 80091c8:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80091ca:	697b      	ldr	r3, [r7, #20]

}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000974 	.word	0x20000974
 80091d8:	200004a4 	.word	0x200004a4
 80091dc:	2000097c 	.word	0x2000097c

080091e0 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	605a      	str	r2, [r3, #4]
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009208:	f3ef 8310 	mrs	r3, PRIMASK
 800920c:	60fb      	str	r3, [r7, #12]
  return(result);
 800920e:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009212:	b672      	cpsid	i
}
 8009214:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d102      	bne.n	8009226 <list_is_empty+0x26>
  {
    return_value = 1;
 8009220:	2301      	movs	r3, #1
 8009222:	75fb      	strb	r3, [r7, #23]
 8009224:	e001      	b.n	800922a <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f383 8810 	msr	PRIMASK, r3
}
 8009234:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800924e:	f3ef 8310 	mrs	r3, PRIMASK
 8009252:	60fb      	str	r3, [r7, #12]
  return(result);
 8009254:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009256:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009258:	b672      	cpsid	i
}
 800925a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	605a      	str	r2, [r3, #4]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	f383 8810 	msr	PRIMASK, r3
}
 8009282:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009284:	bf00      	nop
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8009290:	b480      	push	{r7}
 8009292:	b087      	sub	sp, #28
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929a:	f3ef 8310 	mrs	r3, PRIMASK
 800929e:	60fb      	str	r3, [r7, #12]
  return(result);
 80092a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092a4:	b672      	cpsid	i
}
 80092a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f383 8810 	msr	PRIMASK, r3
}
 80092ce:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e4:	f3ef 8310 	mrs	r3, PRIMASK
 80092e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092ee:	b672      	cpsid	i
}
 80092f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6852      	ldr	r2, [r2, #4]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f383 8810 	msr	PRIMASK, r3
}
 8009310:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009312:	bf00      	nop
 8009314:	371c      	adds	r7, #28
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b086      	sub	sp, #24
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009328:	f3ef 8310 	mrs	r3, PRIMASK
 800932c:	60fb      	str	r3, [r7, #12]
  return(result);
 800932e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009330:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009332:	b672      	cpsid	i
}
 8009334:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff ffca 	bl	80092dc <list_remove_node>
  (*node)->next = NULL;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2200      	movs	r2, #0
 8009356:	605a      	str	r2, [r3, #4]
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f383 8810 	msr	PRIMASK, r3
}
 8009362:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009364:	bf00      	nop
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009376:	f3ef 8310 	mrs	r3, PRIMASK
 800937a:	60fb      	str	r3, [r7, #12]
  return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800937e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009380:	b672      	cpsid	i
}
 8009382:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff ffa3 	bl	80092dc <list_remove_node>
  (*node)->next = NULL;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	605a      	str	r2, [r3, #4]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	f383 8810 	msr	PRIMASK, r3
}
 80093b0:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80093b2:	bf00      	nop
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b089      	sub	sp, #36	; 0x24
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  int size = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c6:	f3ef 8310 	mrs	r3, PRIMASK
 80093ca:	613b      	str	r3, [r7, #16]
  return(result);
 80093cc:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80093ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80093d0:	b672      	cpsid	i
}
 80093d2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80093da:	e005      	b.n	80093e8 <list_get_size+0x2e>
  {
    size++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d1f5      	bne.n	80093dc <list_get_size+0x22>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f383 8810 	msr	PRIMASK, r3
}
 80093fa:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3724      	adds	r7, #36	; 0x24
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
	...

0800940c <__errno>:
 800940c:	4b01      	ldr	r3, [pc, #4]	; (8009414 <__errno+0x8>)
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	20000024 	.word	0x20000024

08009418 <__sflush_r>:
 8009418:	898a      	ldrh	r2, [r1, #12]
 800941a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800941e:	4605      	mov	r5, r0
 8009420:	0710      	lsls	r0, r2, #28
 8009422:	460c      	mov	r4, r1
 8009424:	d458      	bmi.n	80094d8 <__sflush_r+0xc0>
 8009426:	684b      	ldr	r3, [r1, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	dc05      	bgt.n	8009438 <__sflush_r+0x20>
 800942c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	dc02      	bgt.n	8009438 <__sflush_r+0x20>
 8009432:	2000      	movs	r0, #0
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800943a:	2e00      	cmp	r6, #0
 800943c:	d0f9      	beq.n	8009432 <__sflush_r+0x1a>
 800943e:	2300      	movs	r3, #0
 8009440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009444:	682f      	ldr	r7, [r5, #0]
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	d032      	beq.n	80094b0 <__sflush_r+0x98>
 800944a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	075a      	lsls	r2, r3, #29
 8009450:	d505      	bpl.n	800945e <__sflush_r+0x46>
 8009452:	6863      	ldr	r3, [r4, #4]
 8009454:	1ac0      	subs	r0, r0, r3
 8009456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009458:	b10b      	cbz	r3, 800945e <__sflush_r+0x46>
 800945a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800945c:	1ac0      	subs	r0, r0, r3
 800945e:	2300      	movs	r3, #0
 8009460:	4602      	mov	r2, r0
 8009462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009464:	6a21      	ldr	r1, [r4, #32]
 8009466:	4628      	mov	r0, r5
 8009468:	47b0      	blx	r6
 800946a:	1c43      	adds	r3, r0, #1
 800946c:	89a3      	ldrh	r3, [r4, #12]
 800946e:	d106      	bne.n	800947e <__sflush_r+0x66>
 8009470:	6829      	ldr	r1, [r5, #0]
 8009472:	291d      	cmp	r1, #29
 8009474:	d82c      	bhi.n	80094d0 <__sflush_r+0xb8>
 8009476:	4a2a      	ldr	r2, [pc, #168]	; (8009520 <__sflush_r+0x108>)
 8009478:	40ca      	lsrs	r2, r1
 800947a:	07d6      	lsls	r6, r2, #31
 800947c:	d528      	bpl.n	80094d0 <__sflush_r+0xb8>
 800947e:	2200      	movs	r2, #0
 8009480:	6062      	str	r2, [r4, #4]
 8009482:	04d9      	lsls	r1, r3, #19
 8009484:	6922      	ldr	r2, [r4, #16]
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	d504      	bpl.n	8009494 <__sflush_r+0x7c>
 800948a:	1c42      	adds	r2, r0, #1
 800948c:	d101      	bne.n	8009492 <__sflush_r+0x7a>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	b903      	cbnz	r3, 8009494 <__sflush_r+0x7c>
 8009492:	6560      	str	r0, [r4, #84]	; 0x54
 8009494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009496:	602f      	str	r7, [r5, #0]
 8009498:	2900      	cmp	r1, #0
 800949a:	d0ca      	beq.n	8009432 <__sflush_r+0x1a>
 800949c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a0:	4299      	cmp	r1, r3
 80094a2:	d002      	beq.n	80094aa <__sflush_r+0x92>
 80094a4:	4628      	mov	r0, r5
 80094a6:	f000 f9bf 	bl	8009828 <_free_r>
 80094aa:	2000      	movs	r0, #0
 80094ac:	6360      	str	r0, [r4, #52]	; 0x34
 80094ae:	e7c1      	b.n	8009434 <__sflush_r+0x1c>
 80094b0:	6a21      	ldr	r1, [r4, #32]
 80094b2:	2301      	movs	r3, #1
 80094b4:	4628      	mov	r0, r5
 80094b6:	47b0      	blx	r6
 80094b8:	1c41      	adds	r1, r0, #1
 80094ba:	d1c7      	bne.n	800944c <__sflush_r+0x34>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0c4      	beq.n	800944c <__sflush_r+0x34>
 80094c2:	2b1d      	cmp	r3, #29
 80094c4:	d001      	beq.n	80094ca <__sflush_r+0xb2>
 80094c6:	2b16      	cmp	r3, #22
 80094c8:	d101      	bne.n	80094ce <__sflush_r+0xb6>
 80094ca:	602f      	str	r7, [r5, #0]
 80094cc:	e7b1      	b.n	8009432 <__sflush_r+0x1a>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d4:	81a3      	strh	r3, [r4, #12]
 80094d6:	e7ad      	b.n	8009434 <__sflush_r+0x1c>
 80094d8:	690f      	ldr	r7, [r1, #16]
 80094da:	2f00      	cmp	r7, #0
 80094dc:	d0a9      	beq.n	8009432 <__sflush_r+0x1a>
 80094de:	0793      	lsls	r3, r2, #30
 80094e0:	680e      	ldr	r6, [r1, #0]
 80094e2:	bf08      	it	eq
 80094e4:	694b      	ldreq	r3, [r1, #20]
 80094e6:	600f      	str	r7, [r1, #0]
 80094e8:	bf18      	it	ne
 80094ea:	2300      	movne	r3, #0
 80094ec:	eba6 0807 	sub.w	r8, r6, r7
 80094f0:	608b      	str	r3, [r1, #8]
 80094f2:	f1b8 0f00 	cmp.w	r8, #0
 80094f6:	dd9c      	ble.n	8009432 <__sflush_r+0x1a>
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094fc:	4643      	mov	r3, r8
 80094fe:	463a      	mov	r2, r7
 8009500:	4628      	mov	r0, r5
 8009502:	47b0      	blx	r6
 8009504:	2800      	cmp	r0, #0
 8009506:	dc06      	bgt.n	8009516 <__sflush_r+0xfe>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950e:	81a3      	strh	r3, [r4, #12]
 8009510:	f04f 30ff 	mov.w	r0, #4294967295
 8009514:	e78e      	b.n	8009434 <__sflush_r+0x1c>
 8009516:	4407      	add	r7, r0
 8009518:	eba8 0800 	sub.w	r8, r8, r0
 800951c:	e7e9      	b.n	80094f2 <__sflush_r+0xda>
 800951e:	bf00      	nop
 8009520:	20400001 	.word	0x20400001

08009524 <_fflush_r>:
 8009524:	b538      	push	{r3, r4, r5, lr}
 8009526:	690b      	ldr	r3, [r1, #16]
 8009528:	4605      	mov	r5, r0
 800952a:	460c      	mov	r4, r1
 800952c:	b913      	cbnz	r3, 8009534 <_fflush_r+0x10>
 800952e:	2500      	movs	r5, #0
 8009530:	4628      	mov	r0, r5
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	b118      	cbz	r0, 800953e <_fflush_r+0x1a>
 8009536:	6983      	ldr	r3, [r0, #24]
 8009538:	b90b      	cbnz	r3, 800953e <_fflush_r+0x1a>
 800953a:	f000 f899 	bl	8009670 <__sinit>
 800953e:	4b14      	ldr	r3, [pc, #80]	; (8009590 <_fflush_r+0x6c>)
 8009540:	429c      	cmp	r4, r3
 8009542:	d11b      	bne.n	800957c <_fflush_r+0x58>
 8009544:	686c      	ldr	r4, [r5, #4]
 8009546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0ef      	beq.n	800952e <_fflush_r+0xa>
 800954e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009550:	07d0      	lsls	r0, r2, #31
 8009552:	d404      	bmi.n	800955e <_fflush_r+0x3a>
 8009554:	0599      	lsls	r1, r3, #22
 8009556:	d402      	bmi.n	800955e <_fflush_r+0x3a>
 8009558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955a:	f000 f94c 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800955e:	4628      	mov	r0, r5
 8009560:	4621      	mov	r1, r4
 8009562:	f7ff ff59 	bl	8009418 <__sflush_r>
 8009566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009568:	07da      	lsls	r2, r3, #31
 800956a:	4605      	mov	r5, r0
 800956c:	d4e0      	bmi.n	8009530 <_fflush_r+0xc>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	059b      	lsls	r3, r3, #22
 8009572:	d4dd      	bmi.n	8009530 <_fflush_r+0xc>
 8009574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009576:	f000 f93f 	bl	80097f8 <__retarget_lock_release_recursive>
 800957a:	e7d9      	b.n	8009530 <_fflush_r+0xc>
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <_fflush_r+0x70>)
 800957e:	429c      	cmp	r4, r3
 8009580:	d101      	bne.n	8009586 <_fflush_r+0x62>
 8009582:	68ac      	ldr	r4, [r5, #8]
 8009584:	e7df      	b.n	8009546 <_fflush_r+0x22>
 8009586:	4b04      	ldr	r3, [pc, #16]	; (8009598 <_fflush_r+0x74>)
 8009588:	429c      	cmp	r4, r3
 800958a:	bf08      	it	eq
 800958c:	68ec      	ldreq	r4, [r5, #12]
 800958e:	e7da      	b.n	8009546 <_fflush_r+0x22>
 8009590:	0800a7dc 	.word	0x0800a7dc
 8009594:	0800a7fc 	.word	0x0800a7fc
 8009598:	0800a7bc 	.word	0x0800a7bc

0800959c <fflush>:
 800959c:	4601      	mov	r1, r0
 800959e:	b920      	cbnz	r0, 80095aa <fflush+0xe>
 80095a0:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <fflush+0x18>)
 80095a2:	4905      	ldr	r1, [pc, #20]	; (80095b8 <fflush+0x1c>)
 80095a4:	6818      	ldr	r0, [r3, #0]
 80095a6:	f000 b8e1 	b.w	800976c <_fwalk_reent>
 80095aa:	4b04      	ldr	r3, [pc, #16]	; (80095bc <fflush+0x20>)
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f7ff bfb9 	b.w	8009524 <_fflush_r>
 80095b2:	bf00      	nop
 80095b4:	0800a81c 	.word	0x0800a81c
 80095b8:	08009525 	.word	0x08009525
 80095bc:	20000024 	.word	0x20000024

080095c0 <std>:
 80095c0:	2300      	movs	r3, #0
 80095c2:	b510      	push	{r4, lr}
 80095c4:	4604      	mov	r4, r0
 80095c6:	e9c0 3300 	strd	r3, r3, [r0]
 80095ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ce:	6083      	str	r3, [r0, #8]
 80095d0:	8181      	strh	r1, [r0, #12]
 80095d2:	6643      	str	r3, [r0, #100]	; 0x64
 80095d4:	81c2      	strh	r2, [r0, #14]
 80095d6:	6183      	str	r3, [r0, #24]
 80095d8:	4619      	mov	r1, r3
 80095da:	2208      	movs	r2, #8
 80095dc:	305c      	adds	r0, #92	; 0x5c
 80095de:	f000 f91a 	bl	8009816 <memset>
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <std+0x38>)
 80095e4:	6263      	str	r3, [r4, #36]	; 0x24
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <std+0x3c>)
 80095e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <std+0x40>)
 80095ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095ee:	4b05      	ldr	r3, [pc, #20]	; (8009604 <std+0x44>)
 80095f0:	6224      	str	r4, [r4, #32]
 80095f2:	6323      	str	r3, [r4, #48]	; 0x30
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	bf00      	nop
 80095f8:	08009ae5 	.word	0x08009ae5
 80095fc:	08009b07 	.word	0x08009b07
 8009600:	08009b3f 	.word	0x08009b3f
 8009604:	08009b63 	.word	0x08009b63

08009608 <_cleanup_r>:
 8009608:	4901      	ldr	r1, [pc, #4]	; (8009610 <_cleanup_r+0x8>)
 800960a:	f000 b8af 	b.w	800976c <_fwalk_reent>
 800960e:	bf00      	nop
 8009610:	08009525 	.word	0x08009525

08009614 <__sfmoreglue>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	1e4a      	subs	r2, r1, #1
 8009618:	2568      	movs	r5, #104	; 0x68
 800961a:	4355      	muls	r5, r2
 800961c:	460e      	mov	r6, r1
 800961e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009622:	f000 f951 	bl	80098c8 <_malloc_r>
 8009626:	4604      	mov	r4, r0
 8009628:	b140      	cbz	r0, 800963c <__sfmoreglue+0x28>
 800962a:	2100      	movs	r1, #0
 800962c:	e9c0 1600 	strd	r1, r6, [r0]
 8009630:	300c      	adds	r0, #12
 8009632:	60a0      	str	r0, [r4, #8]
 8009634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009638:	f000 f8ed 	bl	8009816 <memset>
 800963c:	4620      	mov	r0, r4
 800963e:	bd70      	pop	{r4, r5, r6, pc}

08009640 <__sfp_lock_acquire>:
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <__sfp_lock_acquire+0x8>)
 8009642:	f000 b8d8 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 8009646:	bf00      	nop
 8009648:	2000098c 	.word	0x2000098c

0800964c <__sfp_lock_release>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__sfp_lock_release+0x8>)
 800964e:	f000 b8d3 	b.w	80097f8 <__retarget_lock_release_recursive>
 8009652:	bf00      	nop
 8009654:	2000098c 	.word	0x2000098c

08009658 <__sinit_lock_acquire>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__sinit_lock_acquire+0x8>)
 800965a:	f000 b8cc 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	20000987 	.word	0x20000987

08009664 <__sinit_lock_release>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__sinit_lock_release+0x8>)
 8009666:	f000 b8c7 	b.w	80097f8 <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	20000987 	.word	0x20000987

08009670 <__sinit>:
 8009670:	b510      	push	{r4, lr}
 8009672:	4604      	mov	r4, r0
 8009674:	f7ff fff0 	bl	8009658 <__sinit_lock_acquire>
 8009678:	69a3      	ldr	r3, [r4, #24]
 800967a:	b11b      	cbz	r3, 8009684 <__sinit+0x14>
 800967c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009680:	f7ff bff0 	b.w	8009664 <__sinit_lock_release>
 8009684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009688:	6523      	str	r3, [r4, #80]	; 0x50
 800968a:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <__sinit+0x68>)
 800968c:	4a13      	ldr	r2, [pc, #76]	; (80096dc <__sinit+0x6c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	62a2      	str	r2, [r4, #40]	; 0x28
 8009692:	42a3      	cmp	r3, r4
 8009694:	bf04      	itt	eq
 8009696:	2301      	moveq	r3, #1
 8009698:	61a3      	streq	r3, [r4, #24]
 800969a:	4620      	mov	r0, r4
 800969c:	f000 f820 	bl	80096e0 <__sfp>
 80096a0:	6060      	str	r0, [r4, #4]
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f81c 	bl	80096e0 <__sfp>
 80096a8:	60a0      	str	r0, [r4, #8]
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f818 	bl	80096e0 <__sfp>
 80096b0:	2200      	movs	r2, #0
 80096b2:	60e0      	str	r0, [r4, #12]
 80096b4:	2104      	movs	r1, #4
 80096b6:	6860      	ldr	r0, [r4, #4]
 80096b8:	f7ff ff82 	bl	80095c0 <std>
 80096bc:	68a0      	ldr	r0, [r4, #8]
 80096be:	2201      	movs	r2, #1
 80096c0:	2109      	movs	r1, #9
 80096c2:	f7ff ff7d 	bl	80095c0 <std>
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	2202      	movs	r2, #2
 80096ca:	2112      	movs	r1, #18
 80096cc:	f7ff ff78 	bl	80095c0 <std>
 80096d0:	2301      	movs	r3, #1
 80096d2:	61a3      	str	r3, [r4, #24]
 80096d4:	e7d2      	b.n	800967c <__sinit+0xc>
 80096d6:	bf00      	nop
 80096d8:	0800a81c 	.word	0x0800a81c
 80096dc:	08009609 	.word	0x08009609

080096e0 <__sfp>:
 80096e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e2:	4607      	mov	r7, r0
 80096e4:	f7ff ffac 	bl	8009640 <__sfp_lock_acquire>
 80096e8:	4b1e      	ldr	r3, [pc, #120]	; (8009764 <__sfp+0x84>)
 80096ea:	681e      	ldr	r6, [r3, #0]
 80096ec:	69b3      	ldr	r3, [r6, #24]
 80096ee:	b913      	cbnz	r3, 80096f6 <__sfp+0x16>
 80096f0:	4630      	mov	r0, r6
 80096f2:	f7ff ffbd 	bl	8009670 <__sinit>
 80096f6:	3648      	adds	r6, #72	; 0x48
 80096f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	d503      	bpl.n	8009708 <__sfp+0x28>
 8009700:	6833      	ldr	r3, [r6, #0]
 8009702:	b30b      	cbz	r3, 8009748 <__sfp+0x68>
 8009704:	6836      	ldr	r6, [r6, #0]
 8009706:	e7f7      	b.n	80096f8 <__sfp+0x18>
 8009708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800970c:	b9d5      	cbnz	r5, 8009744 <__sfp+0x64>
 800970e:	4b16      	ldr	r3, [pc, #88]	; (8009768 <__sfp+0x88>)
 8009710:	60e3      	str	r3, [r4, #12]
 8009712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009716:	6665      	str	r5, [r4, #100]	; 0x64
 8009718:	f000 f86c 	bl	80097f4 <__retarget_lock_init_recursive>
 800971c:	f7ff ff96 	bl	800964c <__sfp_lock_release>
 8009720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009728:	6025      	str	r5, [r4, #0]
 800972a:	61a5      	str	r5, [r4, #24]
 800972c:	2208      	movs	r2, #8
 800972e:	4629      	mov	r1, r5
 8009730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009734:	f000 f86f 	bl	8009816 <memset>
 8009738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800973c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009740:	4620      	mov	r0, r4
 8009742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009744:	3468      	adds	r4, #104	; 0x68
 8009746:	e7d9      	b.n	80096fc <__sfp+0x1c>
 8009748:	2104      	movs	r1, #4
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ff62 	bl	8009614 <__sfmoreglue>
 8009750:	4604      	mov	r4, r0
 8009752:	6030      	str	r0, [r6, #0]
 8009754:	2800      	cmp	r0, #0
 8009756:	d1d5      	bne.n	8009704 <__sfp+0x24>
 8009758:	f7ff ff78 	bl	800964c <__sfp_lock_release>
 800975c:	230c      	movs	r3, #12
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	e7ee      	b.n	8009740 <__sfp+0x60>
 8009762:	bf00      	nop
 8009764:	0800a81c 	.word	0x0800a81c
 8009768:	ffff0001 	.word	0xffff0001

0800976c <_fwalk_reent>:
 800976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009770:	4606      	mov	r6, r0
 8009772:	4688      	mov	r8, r1
 8009774:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009778:	2700      	movs	r7, #0
 800977a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800977e:	f1b9 0901 	subs.w	r9, r9, #1
 8009782:	d505      	bpl.n	8009790 <_fwalk_reent+0x24>
 8009784:	6824      	ldr	r4, [r4, #0]
 8009786:	2c00      	cmp	r4, #0
 8009788:	d1f7      	bne.n	800977a <_fwalk_reent+0xe>
 800978a:	4638      	mov	r0, r7
 800978c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009790:	89ab      	ldrh	r3, [r5, #12]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d907      	bls.n	80097a6 <_fwalk_reent+0x3a>
 8009796:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800979a:	3301      	adds	r3, #1
 800979c:	d003      	beq.n	80097a6 <_fwalk_reent+0x3a>
 800979e:	4629      	mov	r1, r5
 80097a0:	4630      	mov	r0, r6
 80097a2:	47c0      	blx	r8
 80097a4:	4307      	orrs	r7, r0
 80097a6:	3568      	adds	r5, #104	; 0x68
 80097a8:	e7e9      	b.n	800977e <_fwalk_reent+0x12>
	...

080097ac <__libc_init_array>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	4d0d      	ldr	r5, [pc, #52]	; (80097e4 <__libc_init_array+0x38>)
 80097b0:	4c0d      	ldr	r4, [pc, #52]	; (80097e8 <__libc_init_array+0x3c>)
 80097b2:	1b64      	subs	r4, r4, r5
 80097b4:	10a4      	asrs	r4, r4, #2
 80097b6:	2600      	movs	r6, #0
 80097b8:	42a6      	cmp	r6, r4
 80097ba:	d109      	bne.n	80097d0 <__libc_init_array+0x24>
 80097bc:	4d0b      	ldr	r5, [pc, #44]	; (80097ec <__libc_init_array+0x40>)
 80097be:	4c0c      	ldr	r4, [pc, #48]	; (80097f0 <__libc_init_array+0x44>)
 80097c0:	f000 fea2 	bl	800a508 <_init>
 80097c4:	1b64      	subs	r4, r4, r5
 80097c6:	10a4      	asrs	r4, r4, #2
 80097c8:	2600      	movs	r6, #0
 80097ca:	42a6      	cmp	r6, r4
 80097cc:	d105      	bne.n	80097da <__libc_init_array+0x2e>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097d4:	4798      	blx	r3
 80097d6:	3601      	adds	r6, #1
 80097d8:	e7ee      	b.n	80097b8 <__libc_init_array+0xc>
 80097da:	f855 3b04 	ldr.w	r3, [r5], #4
 80097de:	4798      	blx	r3
 80097e0:	3601      	adds	r6, #1
 80097e2:	e7f2      	b.n	80097ca <__libc_init_array+0x1e>
 80097e4:	0800a85c 	.word	0x0800a85c
 80097e8:	0800a85c 	.word	0x0800a85c
 80097ec:	0800a85c 	.word	0x0800a85c
 80097f0:	0800a860 	.word	0x0800a860

080097f4 <__retarget_lock_init_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__retarget_lock_acquire_recursive>:
 80097f6:	4770      	bx	lr

080097f8 <__retarget_lock_release_recursive>:
 80097f8:	4770      	bx	lr

080097fa <memcpy>:
 80097fa:	440a      	add	r2, r1
 80097fc:	4291      	cmp	r1, r2
 80097fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009802:	d100      	bne.n	8009806 <memcpy+0xc>
 8009804:	4770      	bx	lr
 8009806:	b510      	push	{r4, lr}
 8009808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800980c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009810:	4291      	cmp	r1, r2
 8009812:	d1f9      	bne.n	8009808 <memcpy+0xe>
 8009814:	bd10      	pop	{r4, pc}

08009816 <memset>:
 8009816:	4402      	add	r2, r0
 8009818:	4603      	mov	r3, r0
 800981a:	4293      	cmp	r3, r2
 800981c:	d100      	bne.n	8009820 <memset+0xa>
 800981e:	4770      	bx	lr
 8009820:	f803 1b01 	strb.w	r1, [r3], #1
 8009824:	e7f9      	b.n	800981a <memset+0x4>
	...

08009828 <_free_r>:
 8009828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800982a:	2900      	cmp	r1, #0
 800982c:	d048      	beq.n	80098c0 <_free_r+0x98>
 800982e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009832:	9001      	str	r0, [sp, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f1a1 0404 	sub.w	r4, r1, #4
 800983a:	bfb8      	it	lt
 800983c:	18e4      	addlt	r4, r4, r3
 800983e:	f000 faed 	bl	8009e1c <__malloc_lock>
 8009842:	4a20      	ldr	r2, [pc, #128]	; (80098c4 <_free_r+0x9c>)
 8009844:	9801      	ldr	r0, [sp, #4]
 8009846:	6813      	ldr	r3, [r2, #0]
 8009848:	4615      	mov	r5, r2
 800984a:	b933      	cbnz	r3, 800985a <_free_r+0x32>
 800984c:	6063      	str	r3, [r4, #4]
 800984e:	6014      	str	r4, [r2, #0]
 8009850:	b003      	add	sp, #12
 8009852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009856:	f000 bae7 	b.w	8009e28 <__malloc_unlock>
 800985a:	42a3      	cmp	r3, r4
 800985c:	d90b      	bls.n	8009876 <_free_r+0x4e>
 800985e:	6821      	ldr	r1, [r4, #0]
 8009860:	1862      	adds	r2, r4, r1
 8009862:	4293      	cmp	r3, r2
 8009864:	bf04      	itt	eq
 8009866:	681a      	ldreq	r2, [r3, #0]
 8009868:	685b      	ldreq	r3, [r3, #4]
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	bf04      	itt	eq
 800986e:	1852      	addeq	r2, r2, r1
 8009870:	6022      	streq	r2, [r4, #0]
 8009872:	602c      	str	r4, [r5, #0]
 8009874:	e7ec      	b.n	8009850 <_free_r+0x28>
 8009876:	461a      	mov	r2, r3
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	b10b      	cbz	r3, 8009880 <_free_r+0x58>
 800987c:	42a3      	cmp	r3, r4
 800987e:	d9fa      	bls.n	8009876 <_free_r+0x4e>
 8009880:	6811      	ldr	r1, [r2, #0]
 8009882:	1855      	adds	r5, r2, r1
 8009884:	42a5      	cmp	r5, r4
 8009886:	d10b      	bne.n	80098a0 <_free_r+0x78>
 8009888:	6824      	ldr	r4, [r4, #0]
 800988a:	4421      	add	r1, r4
 800988c:	1854      	adds	r4, r2, r1
 800988e:	42a3      	cmp	r3, r4
 8009890:	6011      	str	r1, [r2, #0]
 8009892:	d1dd      	bne.n	8009850 <_free_r+0x28>
 8009894:	681c      	ldr	r4, [r3, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	6053      	str	r3, [r2, #4]
 800989a:	4421      	add	r1, r4
 800989c:	6011      	str	r1, [r2, #0]
 800989e:	e7d7      	b.n	8009850 <_free_r+0x28>
 80098a0:	d902      	bls.n	80098a8 <_free_r+0x80>
 80098a2:	230c      	movs	r3, #12
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	e7d3      	b.n	8009850 <_free_r+0x28>
 80098a8:	6825      	ldr	r5, [r4, #0]
 80098aa:	1961      	adds	r1, r4, r5
 80098ac:	428b      	cmp	r3, r1
 80098ae:	bf04      	itt	eq
 80098b0:	6819      	ldreq	r1, [r3, #0]
 80098b2:	685b      	ldreq	r3, [r3, #4]
 80098b4:	6063      	str	r3, [r4, #4]
 80098b6:	bf04      	itt	eq
 80098b8:	1949      	addeq	r1, r1, r5
 80098ba:	6021      	streq	r1, [r4, #0]
 80098bc:	6054      	str	r4, [r2, #4]
 80098be:	e7c7      	b.n	8009850 <_free_r+0x28>
 80098c0:	b003      	add	sp, #12
 80098c2:	bd30      	pop	{r4, r5, pc}
 80098c4:	200004c4 	.word	0x200004c4

080098c8 <_malloc_r>:
 80098c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ca:	1ccd      	adds	r5, r1, #3
 80098cc:	f025 0503 	bic.w	r5, r5, #3
 80098d0:	3508      	adds	r5, #8
 80098d2:	2d0c      	cmp	r5, #12
 80098d4:	bf38      	it	cc
 80098d6:	250c      	movcc	r5, #12
 80098d8:	2d00      	cmp	r5, #0
 80098da:	4606      	mov	r6, r0
 80098dc:	db01      	blt.n	80098e2 <_malloc_r+0x1a>
 80098de:	42a9      	cmp	r1, r5
 80098e0:	d903      	bls.n	80098ea <_malloc_r+0x22>
 80098e2:	230c      	movs	r3, #12
 80098e4:	6033      	str	r3, [r6, #0]
 80098e6:	2000      	movs	r0, #0
 80098e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ea:	f000 fa97 	bl	8009e1c <__malloc_lock>
 80098ee:	4921      	ldr	r1, [pc, #132]	; (8009974 <_malloc_r+0xac>)
 80098f0:	680a      	ldr	r2, [r1, #0]
 80098f2:	4614      	mov	r4, r2
 80098f4:	b99c      	cbnz	r4, 800991e <_malloc_r+0x56>
 80098f6:	4f20      	ldr	r7, [pc, #128]	; (8009978 <_malloc_r+0xb0>)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	b923      	cbnz	r3, 8009906 <_malloc_r+0x3e>
 80098fc:	4621      	mov	r1, r4
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f8e0 	bl	8009ac4 <_sbrk_r>
 8009904:	6038      	str	r0, [r7, #0]
 8009906:	4629      	mov	r1, r5
 8009908:	4630      	mov	r0, r6
 800990a:	f000 f8db 	bl	8009ac4 <_sbrk_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d123      	bne.n	800995a <_malloc_r+0x92>
 8009912:	230c      	movs	r3, #12
 8009914:	6033      	str	r3, [r6, #0]
 8009916:	4630      	mov	r0, r6
 8009918:	f000 fa86 	bl	8009e28 <__malloc_unlock>
 800991c:	e7e3      	b.n	80098e6 <_malloc_r+0x1e>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	1b5b      	subs	r3, r3, r5
 8009922:	d417      	bmi.n	8009954 <_malloc_r+0x8c>
 8009924:	2b0b      	cmp	r3, #11
 8009926:	d903      	bls.n	8009930 <_malloc_r+0x68>
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	441c      	add	r4, r3
 800992c:	6025      	str	r5, [r4, #0]
 800992e:	e004      	b.n	800993a <_malloc_r+0x72>
 8009930:	6863      	ldr	r3, [r4, #4]
 8009932:	42a2      	cmp	r2, r4
 8009934:	bf0c      	ite	eq
 8009936:	600b      	streq	r3, [r1, #0]
 8009938:	6053      	strne	r3, [r2, #4]
 800993a:	4630      	mov	r0, r6
 800993c:	f000 fa74 	bl	8009e28 <__malloc_unlock>
 8009940:	f104 000b 	add.w	r0, r4, #11
 8009944:	1d23      	adds	r3, r4, #4
 8009946:	f020 0007 	bic.w	r0, r0, #7
 800994a:	1ac2      	subs	r2, r0, r3
 800994c:	d0cc      	beq.n	80098e8 <_malloc_r+0x20>
 800994e:	1a1b      	subs	r3, r3, r0
 8009950:	50a3      	str	r3, [r4, r2]
 8009952:	e7c9      	b.n	80098e8 <_malloc_r+0x20>
 8009954:	4622      	mov	r2, r4
 8009956:	6864      	ldr	r4, [r4, #4]
 8009958:	e7cc      	b.n	80098f4 <_malloc_r+0x2c>
 800995a:	1cc4      	adds	r4, r0, #3
 800995c:	f024 0403 	bic.w	r4, r4, #3
 8009960:	42a0      	cmp	r0, r4
 8009962:	d0e3      	beq.n	800992c <_malloc_r+0x64>
 8009964:	1a21      	subs	r1, r4, r0
 8009966:	4630      	mov	r0, r6
 8009968:	f000 f8ac 	bl	8009ac4 <_sbrk_r>
 800996c:	3001      	adds	r0, #1
 800996e:	d1dd      	bne.n	800992c <_malloc_r+0x64>
 8009970:	e7cf      	b.n	8009912 <_malloc_r+0x4a>
 8009972:	bf00      	nop
 8009974:	200004c4 	.word	0x200004c4
 8009978:	200004c8 	.word	0x200004c8

0800997c <iprintf>:
 800997c:	b40f      	push	{r0, r1, r2, r3}
 800997e:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <iprintf+0x2c>)
 8009980:	b513      	push	{r0, r1, r4, lr}
 8009982:	681c      	ldr	r4, [r3, #0]
 8009984:	b124      	cbz	r4, 8009990 <iprintf+0x14>
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	b913      	cbnz	r3, 8009990 <iprintf+0x14>
 800998a:	4620      	mov	r0, r4
 800998c:	f7ff fe70 	bl	8009670 <__sinit>
 8009990:	ab05      	add	r3, sp, #20
 8009992:	9a04      	ldr	r2, [sp, #16]
 8009994:	68a1      	ldr	r1, [r4, #8]
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fa75 	bl	8009e88 <_vfiprintf_r>
 800999e:	b002      	add	sp, #8
 80099a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a4:	b004      	add	sp, #16
 80099a6:	4770      	bx	lr
 80099a8:	20000024 	.word	0x20000024

080099ac <putchar>:
 80099ac:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <putchar+0x28>)
 80099ae:	b513      	push	{r0, r1, r4, lr}
 80099b0:	681c      	ldr	r4, [r3, #0]
 80099b2:	4601      	mov	r1, r0
 80099b4:	b134      	cbz	r4, 80099c4 <putchar+0x18>
 80099b6:	69a3      	ldr	r3, [r4, #24]
 80099b8:	b923      	cbnz	r3, 80099c4 <putchar+0x18>
 80099ba:	9001      	str	r0, [sp, #4]
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff fe57 	bl	8009670 <__sinit>
 80099c2:	9901      	ldr	r1, [sp, #4]
 80099c4:	68a2      	ldr	r2, [r4, #8]
 80099c6:	4620      	mov	r0, r4
 80099c8:	b002      	add	sp, #8
 80099ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ce:	f000 bd1f 	b.w	800a410 <_putc_r>
 80099d2:	bf00      	nop
 80099d4:	20000024 	.word	0x20000024

080099d8 <_puts_r>:
 80099d8:	b570      	push	{r4, r5, r6, lr}
 80099da:	460e      	mov	r6, r1
 80099dc:	4605      	mov	r5, r0
 80099de:	b118      	cbz	r0, 80099e8 <_puts_r+0x10>
 80099e0:	6983      	ldr	r3, [r0, #24]
 80099e2:	b90b      	cbnz	r3, 80099e8 <_puts_r+0x10>
 80099e4:	f7ff fe44 	bl	8009670 <__sinit>
 80099e8:	69ab      	ldr	r3, [r5, #24]
 80099ea:	68ac      	ldr	r4, [r5, #8]
 80099ec:	b913      	cbnz	r3, 80099f4 <_puts_r+0x1c>
 80099ee:	4628      	mov	r0, r5
 80099f0:	f7ff fe3e 	bl	8009670 <__sinit>
 80099f4:	4b2c      	ldr	r3, [pc, #176]	; (8009aa8 <_puts_r+0xd0>)
 80099f6:	429c      	cmp	r4, r3
 80099f8:	d120      	bne.n	8009a3c <_puts_r+0x64>
 80099fa:	686c      	ldr	r4, [r5, #4]
 80099fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099fe:	07db      	lsls	r3, r3, #31
 8009a00:	d405      	bmi.n	8009a0e <_puts_r+0x36>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	0598      	lsls	r0, r3, #22
 8009a06:	d402      	bmi.n	8009a0e <_puts_r+0x36>
 8009a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a0a:	f7ff fef4 	bl	80097f6 <__retarget_lock_acquire_recursive>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	0719      	lsls	r1, r3, #28
 8009a12:	d51d      	bpl.n	8009a50 <_puts_r+0x78>
 8009a14:	6923      	ldr	r3, [r4, #16]
 8009a16:	b1db      	cbz	r3, 8009a50 <_puts_r+0x78>
 8009a18:	3e01      	subs	r6, #1
 8009a1a:	68a3      	ldr	r3, [r4, #8]
 8009a1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a20:	3b01      	subs	r3, #1
 8009a22:	60a3      	str	r3, [r4, #8]
 8009a24:	bb39      	cbnz	r1, 8009a76 <_puts_r+0x9e>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	da38      	bge.n	8009a9c <_puts_r+0xc4>
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	210a      	movs	r1, #10
 8009a2e:	4628      	mov	r0, r5
 8009a30:	f000 f89c 	bl	8009b6c <__swbuf_r>
 8009a34:	3001      	adds	r0, #1
 8009a36:	d011      	beq.n	8009a5c <_puts_r+0x84>
 8009a38:	250a      	movs	r5, #10
 8009a3a:	e011      	b.n	8009a60 <_puts_r+0x88>
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <_puts_r+0xd4>)
 8009a3e:	429c      	cmp	r4, r3
 8009a40:	d101      	bne.n	8009a46 <_puts_r+0x6e>
 8009a42:	68ac      	ldr	r4, [r5, #8]
 8009a44:	e7da      	b.n	80099fc <_puts_r+0x24>
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <_puts_r+0xd8>)
 8009a48:	429c      	cmp	r4, r3
 8009a4a:	bf08      	it	eq
 8009a4c:	68ec      	ldreq	r4, [r5, #12]
 8009a4e:	e7d5      	b.n	80099fc <_puts_r+0x24>
 8009a50:	4621      	mov	r1, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	f000 f8ee 	bl	8009c34 <__swsetup_r>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0dd      	beq.n	8009a18 <_puts_r+0x40>
 8009a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8009a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a62:	07da      	lsls	r2, r3, #31
 8009a64:	d405      	bmi.n	8009a72 <_puts_r+0x9a>
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	059b      	lsls	r3, r3, #22
 8009a6a:	d402      	bmi.n	8009a72 <_puts_r+0x9a>
 8009a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a6e:	f7ff fec3 	bl	80097f8 <__retarget_lock_release_recursive>
 8009a72:	4628      	mov	r0, r5
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da04      	bge.n	8009a84 <_puts_r+0xac>
 8009a7a:	69a2      	ldr	r2, [r4, #24]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	dc06      	bgt.n	8009a8e <_puts_r+0xb6>
 8009a80:	290a      	cmp	r1, #10
 8009a82:	d004      	beq.n	8009a8e <_puts_r+0xb6>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	6022      	str	r2, [r4, #0]
 8009a8a:	7019      	strb	r1, [r3, #0]
 8009a8c:	e7c5      	b.n	8009a1a <_puts_r+0x42>
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 f86b 	bl	8009b6c <__swbuf_r>
 8009a96:	3001      	adds	r0, #1
 8009a98:	d1bf      	bne.n	8009a1a <_puts_r+0x42>
 8009a9a:	e7df      	b.n	8009a5c <_puts_r+0x84>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	250a      	movs	r5, #10
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	701d      	strb	r5, [r3, #0]
 8009aa6:	e7db      	b.n	8009a60 <_puts_r+0x88>
 8009aa8:	0800a7dc 	.word	0x0800a7dc
 8009aac:	0800a7fc 	.word	0x0800a7fc
 8009ab0:	0800a7bc 	.word	0x0800a7bc

08009ab4 <puts>:
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <puts+0xc>)
 8009ab6:	4601      	mov	r1, r0
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f7ff bf8d 	b.w	80099d8 <_puts_r>
 8009abe:	bf00      	nop
 8009ac0:	20000024 	.word	0x20000024

08009ac4 <_sbrk_r>:
 8009ac4:	b538      	push	{r3, r4, r5, lr}
 8009ac6:	4d06      	ldr	r5, [pc, #24]	; (8009ae0 <_sbrk_r+0x1c>)
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4604      	mov	r4, r0
 8009acc:	4608      	mov	r0, r1
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	f7f8 fbf8 	bl	80022c4 <_sbrk>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_sbrk_r+0x1a>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_sbrk_r+0x1a>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000990 	.word	0x20000990

08009ae4 <__sread>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aec:	f000 fcd8 	bl	800a4a0 <_read_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	bfab      	itete	ge
 8009af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009af6:	89a3      	ldrhlt	r3, [r4, #12]
 8009af8:	181b      	addge	r3, r3, r0
 8009afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009afe:	bfac      	ite	ge
 8009b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b02:	81a3      	strhlt	r3, [r4, #12]
 8009b04:	bd10      	pop	{r4, pc}

08009b06 <__swrite>:
 8009b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	05db      	lsls	r3, r3, #23
 8009b10:	4605      	mov	r5, r0
 8009b12:	460c      	mov	r4, r1
 8009b14:	4616      	mov	r6, r2
 8009b16:	d505      	bpl.n	8009b24 <__swrite+0x1e>
 8009b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f000 f906 	bl	8009d30 <_lseek_r>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b2e:	81a3      	strh	r3, [r4, #12]
 8009b30:	4632      	mov	r2, r6
 8009b32:	463b      	mov	r3, r7
 8009b34:	4628      	mov	r0, r5
 8009b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3a:	f000 b869 	b.w	8009c10 <_write_r>

08009b3e <__sseek>:
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b46:	f000 f8f3 	bl	8009d30 <_lseek_r>
 8009b4a:	1c43      	adds	r3, r0, #1
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	bf15      	itete	ne
 8009b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b5a:	81a3      	strheq	r3, [r4, #12]
 8009b5c:	bf18      	it	ne
 8009b5e:	81a3      	strhne	r3, [r4, #12]
 8009b60:	bd10      	pop	{r4, pc}

08009b62 <__sclose>:
 8009b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b66:	f000 b8d3 	b.w	8009d10 <_close_r>
	...

08009b6c <__swbuf_r>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	460e      	mov	r6, r1
 8009b70:	4614      	mov	r4, r2
 8009b72:	4605      	mov	r5, r0
 8009b74:	b118      	cbz	r0, 8009b7e <__swbuf_r+0x12>
 8009b76:	6983      	ldr	r3, [r0, #24]
 8009b78:	b90b      	cbnz	r3, 8009b7e <__swbuf_r+0x12>
 8009b7a:	f7ff fd79 	bl	8009670 <__sinit>
 8009b7e:	4b21      	ldr	r3, [pc, #132]	; (8009c04 <__swbuf_r+0x98>)
 8009b80:	429c      	cmp	r4, r3
 8009b82:	d12b      	bne.n	8009bdc <__swbuf_r+0x70>
 8009b84:	686c      	ldr	r4, [r5, #4]
 8009b86:	69a3      	ldr	r3, [r4, #24]
 8009b88:	60a3      	str	r3, [r4, #8]
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	071a      	lsls	r2, r3, #28
 8009b8e:	d52f      	bpl.n	8009bf0 <__swbuf_r+0x84>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	b36b      	cbz	r3, 8009bf0 <__swbuf_r+0x84>
 8009b94:	6923      	ldr	r3, [r4, #16]
 8009b96:	6820      	ldr	r0, [r4, #0]
 8009b98:	1ac0      	subs	r0, r0, r3
 8009b9a:	6963      	ldr	r3, [r4, #20]
 8009b9c:	b2f6      	uxtb	r6, r6
 8009b9e:	4283      	cmp	r3, r0
 8009ba0:	4637      	mov	r7, r6
 8009ba2:	dc04      	bgt.n	8009bae <__swbuf_r+0x42>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f7ff fcbc 	bl	8009524 <_fflush_r>
 8009bac:	bb30      	cbnz	r0, 8009bfc <__swbuf_r+0x90>
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	60a3      	str	r3, [r4, #8]
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	6022      	str	r2, [r4, #0]
 8009bba:	701e      	strb	r6, [r3, #0]
 8009bbc:	6963      	ldr	r3, [r4, #20]
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	4283      	cmp	r3, r0
 8009bc2:	d004      	beq.n	8009bce <__swbuf_r+0x62>
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	07db      	lsls	r3, r3, #31
 8009bc8:	d506      	bpl.n	8009bd8 <__swbuf_r+0x6c>
 8009bca:	2e0a      	cmp	r6, #10
 8009bcc:	d104      	bne.n	8009bd8 <__swbuf_r+0x6c>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7ff fca7 	bl	8009524 <_fflush_r>
 8009bd6:	b988      	cbnz	r0, 8009bfc <__swbuf_r+0x90>
 8009bd8:	4638      	mov	r0, r7
 8009bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <__swbuf_r+0x9c>)
 8009bde:	429c      	cmp	r4, r3
 8009be0:	d101      	bne.n	8009be6 <__swbuf_r+0x7a>
 8009be2:	68ac      	ldr	r4, [r5, #8]
 8009be4:	e7cf      	b.n	8009b86 <__swbuf_r+0x1a>
 8009be6:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <__swbuf_r+0xa0>)
 8009be8:	429c      	cmp	r4, r3
 8009bea:	bf08      	it	eq
 8009bec:	68ec      	ldreq	r4, [r5, #12]
 8009bee:	e7ca      	b.n	8009b86 <__swbuf_r+0x1a>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f000 f81e 	bl	8009c34 <__swsetup_r>
 8009bf8:	2800      	cmp	r0, #0
 8009bfa:	d0cb      	beq.n	8009b94 <__swbuf_r+0x28>
 8009bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009c00:	e7ea      	b.n	8009bd8 <__swbuf_r+0x6c>
 8009c02:	bf00      	nop
 8009c04:	0800a7dc 	.word	0x0800a7dc
 8009c08:	0800a7fc 	.word	0x0800a7fc
 8009c0c:	0800a7bc 	.word	0x0800a7bc

08009c10 <_write_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	4d07      	ldr	r5, [pc, #28]	; (8009c30 <_write_r+0x20>)
 8009c14:	4604      	mov	r4, r0
 8009c16:	4608      	mov	r0, r1
 8009c18:	4611      	mov	r1, r2
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	602a      	str	r2, [r5, #0]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	f7f8 faff 	bl	8002222 <_write>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d102      	bne.n	8009c2e <_write_r+0x1e>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	b103      	cbz	r3, 8009c2e <_write_r+0x1e>
 8009c2c:	6023      	str	r3, [r4, #0]
 8009c2e:	bd38      	pop	{r3, r4, r5, pc}
 8009c30:	20000990 	.word	0x20000990

08009c34 <__swsetup_r>:
 8009c34:	4b32      	ldr	r3, [pc, #200]	; (8009d00 <__swsetup_r+0xcc>)
 8009c36:	b570      	push	{r4, r5, r6, lr}
 8009c38:	681d      	ldr	r5, [r3, #0]
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	460c      	mov	r4, r1
 8009c3e:	b125      	cbz	r5, 8009c4a <__swsetup_r+0x16>
 8009c40:	69ab      	ldr	r3, [r5, #24]
 8009c42:	b913      	cbnz	r3, 8009c4a <__swsetup_r+0x16>
 8009c44:	4628      	mov	r0, r5
 8009c46:	f7ff fd13 	bl	8009670 <__sinit>
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <__swsetup_r+0xd0>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d10f      	bne.n	8009c70 <__swsetup_r+0x3c>
 8009c50:	686c      	ldr	r4, [r5, #4]
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c58:	0719      	lsls	r1, r3, #28
 8009c5a:	d42c      	bmi.n	8009cb6 <__swsetup_r+0x82>
 8009c5c:	06dd      	lsls	r5, r3, #27
 8009c5e:	d411      	bmi.n	8009c84 <__swsetup_r+0x50>
 8009c60:	2309      	movs	r3, #9
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c68:	81a3      	strh	r3, [r4, #12]
 8009c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6e:	e03e      	b.n	8009cee <__swsetup_r+0xba>
 8009c70:	4b25      	ldr	r3, [pc, #148]	; (8009d08 <__swsetup_r+0xd4>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d101      	bne.n	8009c7a <__swsetup_r+0x46>
 8009c76:	68ac      	ldr	r4, [r5, #8]
 8009c78:	e7eb      	b.n	8009c52 <__swsetup_r+0x1e>
 8009c7a:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <__swsetup_r+0xd8>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	bf08      	it	eq
 8009c80:	68ec      	ldreq	r4, [r5, #12]
 8009c82:	e7e6      	b.n	8009c52 <__swsetup_r+0x1e>
 8009c84:	0758      	lsls	r0, r3, #29
 8009c86:	d512      	bpl.n	8009cae <__swsetup_r+0x7a>
 8009c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8a:	b141      	cbz	r1, 8009c9e <__swsetup_r+0x6a>
 8009c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c90:	4299      	cmp	r1, r3
 8009c92:	d002      	beq.n	8009c9a <__swsetup_r+0x66>
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff fdc7 	bl	8009828 <_free_r>
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8009c9e:	89a3      	ldrh	r3, [r4, #12]
 8009ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ca4:	81a3      	strh	r3, [r4, #12]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	6063      	str	r3, [r4, #4]
 8009caa:	6923      	ldr	r3, [r4, #16]
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	f043 0308 	orr.w	r3, r3, #8
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	6923      	ldr	r3, [r4, #16]
 8009cb8:	b94b      	cbnz	r3, 8009cce <__swsetup_r+0x9a>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc4:	d003      	beq.n	8009cce <__swsetup_r+0x9a>
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f867 	bl	8009d9c <__smakebuf_r>
 8009cce:	89a0      	ldrh	r0, [r4, #12]
 8009cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009cd4:	f010 0301 	ands.w	r3, r0, #1
 8009cd8:	d00a      	beq.n	8009cf0 <__swsetup_r+0xbc>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	6963      	ldr	r3, [r4, #20]
 8009ce0:	425b      	negs	r3, r3
 8009ce2:	61a3      	str	r3, [r4, #24]
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	b943      	cbnz	r3, 8009cfa <__swsetup_r+0xc6>
 8009ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cec:	d1ba      	bne.n	8009c64 <__swsetup_r+0x30>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	0781      	lsls	r1, r0, #30
 8009cf2:	bf58      	it	pl
 8009cf4:	6963      	ldrpl	r3, [r4, #20]
 8009cf6:	60a3      	str	r3, [r4, #8]
 8009cf8:	e7f4      	b.n	8009ce4 <__swsetup_r+0xb0>
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e7f7      	b.n	8009cee <__swsetup_r+0xba>
 8009cfe:	bf00      	nop
 8009d00:	20000024 	.word	0x20000024
 8009d04:	0800a7dc 	.word	0x0800a7dc
 8009d08:	0800a7fc 	.word	0x0800a7fc
 8009d0c:	0800a7bc 	.word	0x0800a7bc

08009d10 <_close_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d06      	ldr	r5, [pc, #24]	; (8009d2c <_close_r+0x1c>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	f7f8 fa9d 	bl	800225a <_close>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d102      	bne.n	8009d2a <_close_r+0x1a>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	b103      	cbz	r3, 8009d2a <_close_r+0x1a>
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	bd38      	pop	{r3, r4, r5, pc}
 8009d2c:	20000990 	.word	0x20000990

08009d30 <_lseek_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d07      	ldr	r5, [pc, #28]	; (8009d50 <_lseek_r+0x20>)
 8009d34:	4604      	mov	r4, r0
 8009d36:	4608      	mov	r0, r1
 8009d38:	4611      	mov	r1, r2
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	602a      	str	r2, [r5, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f7f8 fab2 	bl	80022a8 <_lseek>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_lseek_r+0x1e>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_lseek_r+0x1e>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20000990 	.word	0x20000990

08009d54 <__swhatbuf_r>:
 8009d54:	b570      	push	{r4, r5, r6, lr}
 8009d56:	460e      	mov	r6, r1
 8009d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5c:	2900      	cmp	r1, #0
 8009d5e:	b096      	sub	sp, #88	; 0x58
 8009d60:	4614      	mov	r4, r2
 8009d62:	461d      	mov	r5, r3
 8009d64:	da07      	bge.n	8009d76 <__swhatbuf_r+0x22>
 8009d66:	2300      	movs	r3, #0
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	89b3      	ldrh	r3, [r6, #12]
 8009d6c:	061a      	lsls	r2, r3, #24
 8009d6e:	d410      	bmi.n	8009d92 <__swhatbuf_r+0x3e>
 8009d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d74:	e00e      	b.n	8009d94 <__swhatbuf_r+0x40>
 8009d76:	466a      	mov	r2, sp
 8009d78:	f000 fba4 	bl	800a4c4 <_fstat_r>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	dbf2      	blt.n	8009d66 <__swhatbuf_r+0x12>
 8009d80:	9a01      	ldr	r2, [sp, #4]
 8009d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d8a:	425a      	negs	r2, r3
 8009d8c:	415a      	adcs	r2, r3
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	e7ee      	b.n	8009d70 <__swhatbuf_r+0x1c>
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	2000      	movs	r0, #0
 8009d96:	6023      	str	r3, [r4, #0]
 8009d98:	b016      	add	sp, #88	; 0x58
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}

08009d9c <__smakebuf_r>:
 8009d9c:	898b      	ldrh	r3, [r1, #12]
 8009d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009da0:	079d      	lsls	r5, r3, #30
 8009da2:	4606      	mov	r6, r0
 8009da4:	460c      	mov	r4, r1
 8009da6:	d507      	bpl.n	8009db8 <__smakebuf_r+0x1c>
 8009da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	6123      	str	r3, [r4, #16]
 8009db0:	2301      	movs	r3, #1
 8009db2:	6163      	str	r3, [r4, #20]
 8009db4:	b002      	add	sp, #8
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	ab01      	add	r3, sp, #4
 8009dba:	466a      	mov	r2, sp
 8009dbc:	f7ff ffca 	bl	8009d54 <__swhatbuf_r>
 8009dc0:	9900      	ldr	r1, [sp, #0]
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff fd7f 	bl	80098c8 <_malloc_r>
 8009dca:	b948      	cbnz	r0, 8009de0 <__smakebuf_r+0x44>
 8009dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d4ef      	bmi.n	8009db4 <__smakebuf_r+0x18>
 8009dd4:	f023 0303 	bic.w	r3, r3, #3
 8009dd8:	f043 0302 	orr.w	r3, r3, #2
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	e7e3      	b.n	8009da8 <__smakebuf_r+0xc>
 8009de0:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <__smakebuf_r+0x7c>)
 8009de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	6020      	str	r0, [r4, #0]
 8009de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dec:	81a3      	strh	r3, [r4, #12]
 8009dee:	9b00      	ldr	r3, [sp, #0]
 8009df0:	6163      	str	r3, [r4, #20]
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	6120      	str	r0, [r4, #16]
 8009df6:	b15b      	cbz	r3, 8009e10 <__smakebuf_r+0x74>
 8009df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f000 fb73 	bl	800a4e8 <_isatty_r>
 8009e02:	b128      	cbz	r0, 8009e10 <__smakebuf_r+0x74>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f023 0303 	bic.w	r3, r3, #3
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	89a0      	ldrh	r0, [r4, #12]
 8009e12:	4305      	orrs	r5, r0
 8009e14:	81a5      	strh	r5, [r4, #12]
 8009e16:	e7cd      	b.n	8009db4 <__smakebuf_r+0x18>
 8009e18:	08009609 	.word	0x08009609

08009e1c <__malloc_lock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__malloc_lock+0x8>)
 8009e1e:	f7ff bcea 	b.w	80097f6 <__retarget_lock_acquire_recursive>
 8009e22:	bf00      	nop
 8009e24:	20000988 	.word	0x20000988

08009e28 <__malloc_unlock>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__malloc_unlock+0x8>)
 8009e2a:	f7ff bce5 	b.w	80097f8 <__retarget_lock_release_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20000988 	.word	0x20000988

08009e34 <__sfputc_r>:
 8009e34:	6893      	ldr	r3, [r2, #8]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	b410      	push	{r4}
 8009e3c:	6093      	str	r3, [r2, #8]
 8009e3e:	da08      	bge.n	8009e52 <__sfputc_r+0x1e>
 8009e40:	6994      	ldr	r4, [r2, #24]
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	db01      	blt.n	8009e4a <__sfputc_r+0x16>
 8009e46:	290a      	cmp	r1, #10
 8009e48:	d103      	bne.n	8009e52 <__sfputc_r+0x1e>
 8009e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e4e:	f7ff be8d 	b.w	8009b6c <__swbuf_r>
 8009e52:	6813      	ldr	r3, [r2, #0]
 8009e54:	1c58      	adds	r0, r3, #1
 8009e56:	6010      	str	r0, [r2, #0]
 8009e58:	7019      	strb	r1, [r3, #0]
 8009e5a:	4608      	mov	r0, r1
 8009e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <__sfputs_r>:
 8009e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	4614      	mov	r4, r2
 8009e6a:	18d5      	adds	r5, r2, r3
 8009e6c:	42ac      	cmp	r4, r5
 8009e6e:	d101      	bne.n	8009e74 <__sfputs_r+0x12>
 8009e70:	2000      	movs	r0, #0
 8009e72:	e007      	b.n	8009e84 <__sfputs_r+0x22>
 8009e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e78:	463a      	mov	r2, r7
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ffda 	bl	8009e34 <__sfputc_r>
 8009e80:	1c43      	adds	r3, r0, #1
 8009e82:	d1f3      	bne.n	8009e6c <__sfputs_r+0xa>
 8009e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e88 <_vfiprintf_r>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	b09d      	sub	sp, #116	; 0x74
 8009e90:	4614      	mov	r4, r2
 8009e92:	4698      	mov	r8, r3
 8009e94:	4606      	mov	r6, r0
 8009e96:	b118      	cbz	r0, 8009ea0 <_vfiprintf_r+0x18>
 8009e98:	6983      	ldr	r3, [r0, #24]
 8009e9a:	b90b      	cbnz	r3, 8009ea0 <_vfiprintf_r+0x18>
 8009e9c:	f7ff fbe8 	bl	8009670 <__sinit>
 8009ea0:	4b89      	ldr	r3, [pc, #548]	; (800a0c8 <_vfiprintf_r+0x240>)
 8009ea2:	429d      	cmp	r5, r3
 8009ea4:	d11b      	bne.n	8009ede <_vfiprintf_r+0x56>
 8009ea6:	6875      	ldr	r5, [r6, #4]
 8009ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009eaa:	07d9      	lsls	r1, r3, #31
 8009eac:	d405      	bmi.n	8009eba <_vfiprintf_r+0x32>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	059a      	lsls	r2, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_vfiprintf_r+0x32>
 8009eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb6:	f7ff fc9e 	bl	80097f6 <__retarget_lock_acquire_recursive>
 8009eba:	89ab      	ldrh	r3, [r5, #12]
 8009ebc:	071b      	lsls	r3, r3, #28
 8009ebe:	d501      	bpl.n	8009ec4 <_vfiprintf_r+0x3c>
 8009ec0:	692b      	ldr	r3, [r5, #16]
 8009ec2:	b9eb      	cbnz	r3, 8009f00 <_vfiprintf_r+0x78>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff feb4 	bl	8009c34 <__swsetup_r>
 8009ecc:	b1c0      	cbz	r0, 8009f00 <_vfiprintf_r+0x78>
 8009ece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed0:	07dc      	lsls	r4, r3, #31
 8009ed2:	d50e      	bpl.n	8009ef2 <_vfiprintf_r+0x6a>
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b01d      	add	sp, #116	; 0x74
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	4b7b      	ldr	r3, [pc, #492]	; (800a0cc <_vfiprintf_r+0x244>)
 8009ee0:	429d      	cmp	r5, r3
 8009ee2:	d101      	bne.n	8009ee8 <_vfiprintf_r+0x60>
 8009ee4:	68b5      	ldr	r5, [r6, #8]
 8009ee6:	e7df      	b.n	8009ea8 <_vfiprintf_r+0x20>
 8009ee8:	4b79      	ldr	r3, [pc, #484]	; (800a0d0 <_vfiprintf_r+0x248>)
 8009eea:	429d      	cmp	r5, r3
 8009eec:	bf08      	it	eq
 8009eee:	68f5      	ldreq	r5, [r6, #12]
 8009ef0:	e7da      	b.n	8009ea8 <_vfiprintf_r+0x20>
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	0598      	lsls	r0, r3, #22
 8009ef6:	d4ed      	bmi.n	8009ed4 <_vfiprintf_r+0x4c>
 8009ef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009efa:	f7ff fc7d 	bl	80097f8 <__retarget_lock_release_recursive>
 8009efe:	e7e9      	b.n	8009ed4 <_vfiprintf_r+0x4c>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9309      	str	r3, [sp, #36]	; 0x24
 8009f04:	2320      	movs	r3, #32
 8009f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0e:	2330      	movs	r3, #48	; 0x30
 8009f10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0d4 <_vfiprintf_r+0x24c>
 8009f14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f18:	f04f 0901 	mov.w	r9, #1
 8009f1c:	4623      	mov	r3, r4
 8009f1e:	469a      	mov	sl, r3
 8009f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f24:	b10a      	cbz	r2, 8009f2a <_vfiprintf_r+0xa2>
 8009f26:	2a25      	cmp	r2, #37	; 0x25
 8009f28:	d1f9      	bne.n	8009f1e <_vfiprintf_r+0x96>
 8009f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2e:	d00b      	beq.n	8009f48 <_vfiprintf_r+0xc0>
 8009f30:	465b      	mov	r3, fp
 8009f32:	4622      	mov	r2, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ff93 	bl	8009e62 <__sfputs_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f000 80aa 	beq.w	800a096 <_vfiprintf_r+0x20e>
 8009f42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f44:	445a      	add	r2, fp
 8009f46:	9209      	str	r2, [sp, #36]	; 0x24
 8009f48:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 80a2 	beq.w	800a096 <_vfiprintf_r+0x20e>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295
 8009f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f5c:	f10a 0a01 	add.w	sl, sl, #1
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f68:	931a      	str	r3, [sp, #104]	; 0x68
 8009f6a:	4654      	mov	r4, sl
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f72:	4858      	ldr	r0, [pc, #352]	; (800a0d4 <_vfiprintf_r+0x24c>)
 8009f74:	f7f6 f944 	bl	8000200 <memchr>
 8009f78:	9a04      	ldr	r2, [sp, #16]
 8009f7a:	b9d8      	cbnz	r0, 8009fb4 <_vfiprintf_r+0x12c>
 8009f7c:	06d1      	lsls	r1, r2, #27
 8009f7e:	bf44      	itt	mi
 8009f80:	2320      	movmi	r3, #32
 8009f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f86:	0713      	lsls	r3, r2, #28
 8009f88:	bf44      	itt	mi
 8009f8a:	232b      	movmi	r3, #43	; 0x2b
 8009f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f90:	f89a 3000 	ldrb.w	r3, [sl]
 8009f94:	2b2a      	cmp	r3, #42	; 0x2a
 8009f96:	d015      	beq.n	8009fc4 <_vfiprintf_r+0x13c>
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	4654      	mov	r4, sl
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	f04f 0c0a 	mov.w	ip, #10
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa8:	3b30      	subs	r3, #48	; 0x30
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	d94e      	bls.n	800a04c <_vfiprintf_r+0x1c4>
 8009fae:	b1b0      	cbz	r0, 8009fde <_vfiprintf_r+0x156>
 8009fb0:	9207      	str	r2, [sp, #28]
 8009fb2:	e014      	b.n	8009fde <_vfiprintf_r+0x156>
 8009fb4:	eba0 0308 	sub.w	r3, r0, r8
 8009fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	46a2      	mov	sl, r4
 8009fc2:	e7d2      	b.n	8009f6a <_vfiprintf_r+0xe2>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	1d19      	adds	r1, r3, #4
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bfbb      	ittet	lt
 8009fd0:	425b      	neglt	r3, r3
 8009fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd6:	9307      	strge	r3, [sp, #28]
 8009fd8:	9307      	strlt	r3, [sp, #28]
 8009fda:	bfb8      	it	lt
 8009fdc:	9204      	strlt	r2, [sp, #16]
 8009fde:	7823      	ldrb	r3, [r4, #0]
 8009fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8009fe2:	d10c      	bne.n	8009ffe <_vfiprintf_r+0x176>
 8009fe4:	7863      	ldrb	r3, [r4, #1]
 8009fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fe8:	d135      	bne.n	800a056 <_vfiprintf_r+0x1ce>
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	9203      	str	r2, [sp, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfb8      	it	lt
 8009ff6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ffa:	3402      	adds	r4, #2
 8009ffc:	9305      	str	r3, [sp, #20]
 8009ffe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0e4 <_vfiprintf_r+0x25c>
 800a002:	7821      	ldrb	r1, [r4, #0]
 800a004:	2203      	movs	r2, #3
 800a006:	4650      	mov	r0, sl
 800a008:	f7f6 f8fa 	bl	8000200 <memchr>
 800a00c:	b140      	cbz	r0, 800a020 <_vfiprintf_r+0x198>
 800a00e:	2340      	movs	r3, #64	; 0x40
 800a010:	eba0 000a 	sub.w	r0, r0, sl
 800a014:	fa03 f000 	lsl.w	r0, r3, r0
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	4303      	orrs	r3, r0
 800a01c:	3401      	adds	r4, #1
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a024:	482c      	ldr	r0, [pc, #176]	; (800a0d8 <_vfiprintf_r+0x250>)
 800a026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a02a:	2206      	movs	r2, #6
 800a02c:	f7f6 f8e8 	bl	8000200 <memchr>
 800a030:	2800      	cmp	r0, #0
 800a032:	d03f      	beq.n	800a0b4 <_vfiprintf_r+0x22c>
 800a034:	4b29      	ldr	r3, [pc, #164]	; (800a0dc <_vfiprintf_r+0x254>)
 800a036:	bb1b      	cbnz	r3, 800a080 <_vfiprintf_r+0x1f8>
 800a038:	9b03      	ldr	r3, [sp, #12]
 800a03a:	3307      	adds	r3, #7
 800a03c:	f023 0307 	bic.w	r3, r3, #7
 800a040:	3308      	adds	r3, #8
 800a042:	9303      	str	r3, [sp, #12]
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	443b      	add	r3, r7
 800a048:	9309      	str	r3, [sp, #36]	; 0x24
 800a04a:	e767      	b.n	8009f1c <_vfiprintf_r+0x94>
 800a04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a050:	460c      	mov	r4, r1
 800a052:	2001      	movs	r0, #1
 800a054:	e7a5      	b.n	8009fa2 <_vfiprintf_r+0x11a>
 800a056:	2300      	movs	r3, #0
 800a058:	3401      	adds	r4, #1
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	4619      	mov	r1, r3
 800a05e:	f04f 0c0a 	mov.w	ip, #10
 800a062:	4620      	mov	r0, r4
 800a064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a068:	3a30      	subs	r2, #48	; 0x30
 800a06a:	2a09      	cmp	r2, #9
 800a06c:	d903      	bls.n	800a076 <_vfiprintf_r+0x1ee>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0c5      	beq.n	8009ffe <_vfiprintf_r+0x176>
 800a072:	9105      	str	r1, [sp, #20]
 800a074:	e7c3      	b.n	8009ffe <_vfiprintf_r+0x176>
 800a076:	fb0c 2101 	mla	r1, ip, r1, r2
 800a07a:	4604      	mov	r4, r0
 800a07c:	2301      	movs	r3, #1
 800a07e:	e7f0      	b.n	800a062 <_vfiprintf_r+0x1da>
 800a080:	ab03      	add	r3, sp, #12
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	462a      	mov	r2, r5
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <_vfiprintf_r+0x258>)
 800a088:	a904      	add	r1, sp, #16
 800a08a:	4630      	mov	r0, r6
 800a08c:	f3af 8000 	nop.w
 800a090:	4607      	mov	r7, r0
 800a092:	1c78      	adds	r0, r7, #1
 800a094:	d1d6      	bne.n	800a044 <_vfiprintf_r+0x1bc>
 800a096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a098:	07d9      	lsls	r1, r3, #31
 800a09a:	d405      	bmi.n	800a0a8 <_vfiprintf_r+0x220>
 800a09c:	89ab      	ldrh	r3, [r5, #12]
 800a09e:	059a      	lsls	r2, r3, #22
 800a0a0:	d402      	bmi.n	800a0a8 <_vfiprintf_r+0x220>
 800a0a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0a4:	f7ff fba8 	bl	80097f8 <__retarget_lock_release_recursive>
 800a0a8:	89ab      	ldrh	r3, [r5, #12]
 800a0aa:	065b      	lsls	r3, r3, #25
 800a0ac:	f53f af12 	bmi.w	8009ed4 <_vfiprintf_r+0x4c>
 800a0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0b2:	e711      	b.n	8009ed8 <_vfiprintf_r+0x50>
 800a0b4:	ab03      	add	r3, sp, #12
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	462a      	mov	r2, r5
 800a0ba:	4b09      	ldr	r3, [pc, #36]	; (800a0e0 <_vfiprintf_r+0x258>)
 800a0bc:	a904      	add	r1, sp, #16
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f880 	bl	800a1c4 <_printf_i>
 800a0c4:	e7e4      	b.n	800a090 <_vfiprintf_r+0x208>
 800a0c6:	bf00      	nop
 800a0c8:	0800a7dc 	.word	0x0800a7dc
 800a0cc:	0800a7fc 	.word	0x0800a7fc
 800a0d0:	0800a7bc 	.word	0x0800a7bc
 800a0d4:	0800a820 	.word	0x0800a820
 800a0d8:	0800a82a 	.word	0x0800a82a
 800a0dc:	00000000 	.word	0x00000000
 800a0e0:	08009e63 	.word	0x08009e63
 800a0e4:	0800a826 	.word	0x0800a826

0800a0e8 <_printf_common>:
 800a0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ec:	4616      	mov	r6, r2
 800a0ee:	4699      	mov	r9, r3
 800a0f0:	688a      	ldr	r2, [r1, #8]
 800a0f2:	690b      	ldr	r3, [r1, #16]
 800a0f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	bfb8      	it	lt
 800a0fc:	4613      	movlt	r3, r2
 800a0fe:	6033      	str	r3, [r6, #0]
 800a100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a104:	4607      	mov	r7, r0
 800a106:	460c      	mov	r4, r1
 800a108:	b10a      	cbz	r2, 800a10e <_printf_common+0x26>
 800a10a:	3301      	adds	r3, #1
 800a10c:	6033      	str	r3, [r6, #0]
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	0699      	lsls	r1, r3, #26
 800a112:	bf42      	ittt	mi
 800a114:	6833      	ldrmi	r3, [r6, #0]
 800a116:	3302      	addmi	r3, #2
 800a118:	6033      	strmi	r3, [r6, #0]
 800a11a:	6825      	ldr	r5, [r4, #0]
 800a11c:	f015 0506 	ands.w	r5, r5, #6
 800a120:	d106      	bne.n	800a130 <_printf_common+0x48>
 800a122:	f104 0a19 	add.w	sl, r4, #25
 800a126:	68e3      	ldr	r3, [r4, #12]
 800a128:	6832      	ldr	r2, [r6, #0]
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	42ab      	cmp	r3, r5
 800a12e:	dc26      	bgt.n	800a17e <_printf_common+0x96>
 800a130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a134:	1e13      	subs	r3, r2, #0
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	bf18      	it	ne
 800a13a:	2301      	movne	r3, #1
 800a13c:	0692      	lsls	r2, r2, #26
 800a13e:	d42b      	bmi.n	800a198 <_printf_common+0xb0>
 800a140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a144:	4649      	mov	r1, r9
 800a146:	4638      	mov	r0, r7
 800a148:	47c0      	blx	r8
 800a14a:	3001      	adds	r0, #1
 800a14c:	d01e      	beq.n	800a18c <_printf_common+0xa4>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	68e5      	ldr	r5, [r4, #12]
 800a152:	6832      	ldr	r2, [r6, #0]
 800a154:	f003 0306 	and.w	r3, r3, #6
 800a158:	2b04      	cmp	r3, #4
 800a15a:	bf08      	it	eq
 800a15c:	1aad      	subeq	r5, r5, r2
 800a15e:	68a3      	ldr	r3, [r4, #8]
 800a160:	6922      	ldr	r2, [r4, #16]
 800a162:	bf0c      	ite	eq
 800a164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a168:	2500      	movne	r5, #0
 800a16a:	4293      	cmp	r3, r2
 800a16c:	bfc4      	itt	gt
 800a16e:	1a9b      	subgt	r3, r3, r2
 800a170:	18ed      	addgt	r5, r5, r3
 800a172:	2600      	movs	r6, #0
 800a174:	341a      	adds	r4, #26
 800a176:	42b5      	cmp	r5, r6
 800a178:	d11a      	bne.n	800a1b0 <_printf_common+0xc8>
 800a17a:	2000      	movs	r0, #0
 800a17c:	e008      	b.n	800a190 <_printf_common+0xa8>
 800a17e:	2301      	movs	r3, #1
 800a180:	4652      	mov	r2, sl
 800a182:	4649      	mov	r1, r9
 800a184:	4638      	mov	r0, r7
 800a186:	47c0      	blx	r8
 800a188:	3001      	adds	r0, #1
 800a18a:	d103      	bne.n	800a194 <_printf_common+0xac>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295
 800a190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a194:	3501      	adds	r5, #1
 800a196:	e7c6      	b.n	800a126 <_printf_common+0x3e>
 800a198:	18e1      	adds	r1, r4, r3
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	2030      	movs	r0, #48	; 0x30
 800a19e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1a2:	4422      	add	r2, r4
 800a1a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	e7c7      	b.n	800a140 <_printf_common+0x58>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4622      	mov	r2, r4
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	47c0      	blx	r8
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d0e6      	beq.n	800a18c <_printf_common+0xa4>
 800a1be:	3601      	adds	r6, #1
 800a1c0:	e7d9      	b.n	800a176 <_printf_common+0x8e>
	...

0800a1c4 <_printf_i>:
 800a1c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	4691      	mov	r9, r2
 800a1cc:	7e27      	ldrb	r7, [r4, #24]
 800a1ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a1d0:	2f78      	cmp	r7, #120	; 0x78
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	469a      	mov	sl, r3
 800a1d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1da:	d807      	bhi.n	800a1ec <_printf_i+0x28>
 800a1dc:	2f62      	cmp	r7, #98	; 0x62
 800a1de:	d80a      	bhi.n	800a1f6 <_printf_i+0x32>
 800a1e0:	2f00      	cmp	r7, #0
 800a1e2:	f000 80d8 	beq.w	800a396 <_printf_i+0x1d2>
 800a1e6:	2f58      	cmp	r7, #88	; 0x58
 800a1e8:	f000 80a3 	beq.w	800a332 <_printf_i+0x16e>
 800a1ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1f4:	e03a      	b.n	800a26c <_printf_i+0xa8>
 800a1f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1fa:	2b15      	cmp	r3, #21
 800a1fc:	d8f6      	bhi.n	800a1ec <_printf_i+0x28>
 800a1fe:	a001      	add	r0, pc, #4	; (adr r0, 800a204 <_printf_i+0x40>)
 800a200:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a204:	0800a25d 	.word	0x0800a25d
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a1ed 	.word	0x0800a1ed
 800a210:	0800a1ed 	.word	0x0800a1ed
 800a214:	0800a1ed 	.word	0x0800a1ed
 800a218:	0800a1ed 	.word	0x0800a1ed
 800a21c:	0800a271 	.word	0x0800a271
 800a220:	0800a1ed 	.word	0x0800a1ed
 800a224:	0800a1ed 	.word	0x0800a1ed
 800a228:	0800a1ed 	.word	0x0800a1ed
 800a22c:	0800a1ed 	.word	0x0800a1ed
 800a230:	0800a37d 	.word	0x0800a37d
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a35f 	.word	0x0800a35f
 800a23c:	0800a1ed 	.word	0x0800a1ed
 800a240:	0800a1ed 	.word	0x0800a1ed
 800a244:	0800a39f 	.word	0x0800a39f
 800a248:	0800a1ed 	.word	0x0800a1ed
 800a24c:	0800a2a1 	.word	0x0800a2a1
 800a250:	0800a1ed 	.word	0x0800a1ed
 800a254:	0800a1ed 	.word	0x0800a1ed
 800a258:	0800a367 	.word	0x0800a367
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	1d1a      	adds	r2, r3, #4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	600a      	str	r2, [r1, #0]
 800a264:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a26c:	2301      	movs	r3, #1
 800a26e:	e0a3      	b.n	800a3b8 <_printf_i+0x1f4>
 800a270:	6825      	ldr	r5, [r4, #0]
 800a272:	6808      	ldr	r0, [r1, #0]
 800a274:	062e      	lsls	r6, r5, #24
 800a276:	f100 0304 	add.w	r3, r0, #4
 800a27a:	d50a      	bpl.n	800a292 <_printf_i+0xce>
 800a27c:	6805      	ldr	r5, [r0, #0]
 800a27e:	600b      	str	r3, [r1, #0]
 800a280:	2d00      	cmp	r5, #0
 800a282:	da03      	bge.n	800a28c <_printf_i+0xc8>
 800a284:	232d      	movs	r3, #45	; 0x2d
 800a286:	426d      	negs	r5, r5
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	485e      	ldr	r0, [pc, #376]	; (800a408 <_printf_i+0x244>)
 800a28e:	230a      	movs	r3, #10
 800a290:	e019      	b.n	800a2c6 <_printf_i+0x102>
 800a292:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a296:	6805      	ldr	r5, [r0, #0]
 800a298:	600b      	str	r3, [r1, #0]
 800a29a:	bf18      	it	ne
 800a29c:	b22d      	sxthne	r5, r5
 800a29e:	e7ef      	b.n	800a280 <_printf_i+0xbc>
 800a2a0:	680b      	ldr	r3, [r1, #0]
 800a2a2:	6825      	ldr	r5, [r4, #0]
 800a2a4:	1d18      	adds	r0, r3, #4
 800a2a6:	6008      	str	r0, [r1, #0]
 800a2a8:	0628      	lsls	r0, r5, #24
 800a2aa:	d501      	bpl.n	800a2b0 <_printf_i+0xec>
 800a2ac:	681d      	ldr	r5, [r3, #0]
 800a2ae:	e002      	b.n	800a2b6 <_printf_i+0xf2>
 800a2b0:	0669      	lsls	r1, r5, #25
 800a2b2:	d5fb      	bpl.n	800a2ac <_printf_i+0xe8>
 800a2b4:	881d      	ldrh	r5, [r3, #0]
 800a2b6:	4854      	ldr	r0, [pc, #336]	; (800a408 <_printf_i+0x244>)
 800a2b8:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ba:	bf0c      	ite	eq
 800a2bc:	2308      	moveq	r3, #8
 800a2be:	230a      	movne	r3, #10
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2c6:	6866      	ldr	r6, [r4, #4]
 800a2c8:	60a6      	str	r6, [r4, #8]
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	bfa2      	ittt	ge
 800a2ce:	6821      	ldrge	r1, [r4, #0]
 800a2d0:	f021 0104 	bicge.w	r1, r1, #4
 800a2d4:	6021      	strge	r1, [r4, #0]
 800a2d6:	b90d      	cbnz	r5, 800a2dc <_printf_i+0x118>
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	d04d      	beq.n	800a378 <_printf_i+0x1b4>
 800a2dc:	4616      	mov	r6, r2
 800a2de:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2e2:	fb03 5711 	mls	r7, r3, r1, r5
 800a2e6:	5dc7      	ldrb	r7, [r0, r7]
 800a2e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2ec:	462f      	mov	r7, r5
 800a2ee:	42bb      	cmp	r3, r7
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	d9f4      	bls.n	800a2de <_printf_i+0x11a>
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d10b      	bne.n	800a310 <_printf_i+0x14c>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	07df      	lsls	r7, r3, #31
 800a2fc:	d508      	bpl.n	800a310 <_printf_i+0x14c>
 800a2fe:	6923      	ldr	r3, [r4, #16]
 800a300:	6861      	ldr	r1, [r4, #4]
 800a302:	4299      	cmp	r1, r3
 800a304:	bfde      	ittt	le
 800a306:	2330      	movle	r3, #48	; 0x30
 800a308:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a30c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a310:	1b92      	subs	r2, r2, r6
 800a312:	6122      	str	r2, [r4, #16]
 800a314:	f8cd a000 	str.w	sl, [sp]
 800a318:	464b      	mov	r3, r9
 800a31a:	aa03      	add	r2, sp, #12
 800a31c:	4621      	mov	r1, r4
 800a31e:	4640      	mov	r0, r8
 800a320:	f7ff fee2 	bl	800a0e8 <_printf_common>
 800a324:	3001      	adds	r0, #1
 800a326:	d14c      	bne.n	800a3c2 <_printf_i+0x1fe>
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
 800a32c:	b004      	add	sp, #16
 800a32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a332:	4835      	ldr	r0, [pc, #212]	; (800a408 <_printf_i+0x244>)
 800a334:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	680e      	ldr	r6, [r1, #0]
 800a33c:	061f      	lsls	r7, r3, #24
 800a33e:	f856 5b04 	ldr.w	r5, [r6], #4
 800a342:	600e      	str	r6, [r1, #0]
 800a344:	d514      	bpl.n	800a370 <_printf_i+0x1ac>
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	bf44      	itt	mi
 800a34a:	f043 0320 	orrmi.w	r3, r3, #32
 800a34e:	6023      	strmi	r3, [r4, #0]
 800a350:	b91d      	cbnz	r5, 800a35a <_printf_i+0x196>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f023 0320 	bic.w	r3, r3, #32
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	2310      	movs	r3, #16
 800a35c:	e7b0      	b.n	800a2c0 <_printf_i+0xfc>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	f043 0320 	orr.w	r3, r3, #32
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	2378      	movs	r3, #120	; 0x78
 800a368:	4828      	ldr	r0, [pc, #160]	; (800a40c <_printf_i+0x248>)
 800a36a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a36e:	e7e3      	b.n	800a338 <_printf_i+0x174>
 800a370:	065e      	lsls	r6, r3, #25
 800a372:	bf48      	it	mi
 800a374:	b2ad      	uxthmi	r5, r5
 800a376:	e7e6      	b.n	800a346 <_printf_i+0x182>
 800a378:	4616      	mov	r6, r2
 800a37a:	e7bb      	b.n	800a2f4 <_printf_i+0x130>
 800a37c:	680b      	ldr	r3, [r1, #0]
 800a37e:	6826      	ldr	r6, [r4, #0]
 800a380:	6960      	ldr	r0, [r4, #20]
 800a382:	1d1d      	adds	r5, r3, #4
 800a384:	600d      	str	r5, [r1, #0]
 800a386:	0635      	lsls	r5, r6, #24
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	d501      	bpl.n	800a390 <_printf_i+0x1cc>
 800a38c:	6018      	str	r0, [r3, #0]
 800a38e:	e002      	b.n	800a396 <_printf_i+0x1d2>
 800a390:	0671      	lsls	r1, r6, #25
 800a392:	d5fb      	bpl.n	800a38c <_printf_i+0x1c8>
 800a394:	8018      	strh	r0, [r3, #0]
 800a396:	2300      	movs	r3, #0
 800a398:	6123      	str	r3, [r4, #16]
 800a39a:	4616      	mov	r6, r2
 800a39c:	e7ba      	b.n	800a314 <_printf_i+0x150>
 800a39e:	680b      	ldr	r3, [r1, #0]
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	600a      	str	r2, [r1, #0]
 800a3a4:	681e      	ldr	r6, [r3, #0]
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7f5 ff28 	bl	8000200 <memchr>
 800a3b0:	b108      	cbz	r0, 800a3b6 <_printf_i+0x1f2>
 800a3b2:	1b80      	subs	r0, r0, r6
 800a3b4:	6060      	str	r0, [r4, #4]
 800a3b6:	6863      	ldr	r3, [r4, #4]
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3c0:	e7a8      	b.n	800a314 <_printf_i+0x150>
 800a3c2:	6923      	ldr	r3, [r4, #16]
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	47d0      	blx	sl
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d0ab      	beq.n	800a328 <_printf_i+0x164>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	079b      	lsls	r3, r3, #30
 800a3d4:	d413      	bmi.n	800a3fe <_printf_i+0x23a>
 800a3d6:	68e0      	ldr	r0, [r4, #12]
 800a3d8:	9b03      	ldr	r3, [sp, #12]
 800a3da:	4298      	cmp	r0, r3
 800a3dc:	bfb8      	it	lt
 800a3de:	4618      	movlt	r0, r3
 800a3e0:	e7a4      	b.n	800a32c <_printf_i+0x168>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	4632      	mov	r2, r6
 800a3e6:	4649      	mov	r1, r9
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	47d0      	blx	sl
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	d09b      	beq.n	800a328 <_printf_i+0x164>
 800a3f0:	3501      	adds	r5, #1
 800a3f2:	68e3      	ldr	r3, [r4, #12]
 800a3f4:	9903      	ldr	r1, [sp, #12]
 800a3f6:	1a5b      	subs	r3, r3, r1
 800a3f8:	42ab      	cmp	r3, r5
 800a3fa:	dcf2      	bgt.n	800a3e2 <_printf_i+0x21e>
 800a3fc:	e7eb      	b.n	800a3d6 <_printf_i+0x212>
 800a3fe:	2500      	movs	r5, #0
 800a400:	f104 0619 	add.w	r6, r4, #25
 800a404:	e7f5      	b.n	800a3f2 <_printf_i+0x22e>
 800a406:	bf00      	nop
 800a408:	0800a831 	.word	0x0800a831
 800a40c:	0800a842 	.word	0x0800a842

0800a410 <_putc_r>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	460d      	mov	r5, r1
 800a414:	4614      	mov	r4, r2
 800a416:	4606      	mov	r6, r0
 800a418:	b118      	cbz	r0, 800a422 <_putc_r+0x12>
 800a41a:	6983      	ldr	r3, [r0, #24]
 800a41c:	b90b      	cbnz	r3, 800a422 <_putc_r+0x12>
 800a41e:	f7ff f927 	bl	8009670 <__sinit>
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <_putc_r+0x84>)
 800a424:	429c      	cmp	r4, r3
 800a426:	d124      	bne.n	800a472 <_putc_r+0x62>
 800a428:	6874      	ldr	r4, [r6, #4]
 800a42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a42c:	07d8      	lsls	r0, r3, #31
 800a42e:	d405      	bmi.n	800a43c <_putc_r+0x2c>
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	0599      	lsls	r1, r3, #22
 800a434:	d402      	bmi.n	800a43c <_putc_r+0x2c>
 800a436:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a438:	f7ff f9dd 	bl	80097f6 <__retarget_lock_acquire_recursive>
 800a43c:	68a3      	ldr	r3, [r4, #8]
 800a43e:	3b01      	subs	r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	60a3      	str	r3, [r4, #8]
 800a444:	da05      	bge.n	800a452 <_putc_r+0x42>
 800a446:	69a2      	ldr	r2, [r4, #24]
 800a448:	4293      	cmp	r3, r2
 800a44a:	db1c      	blt.n	800a486 <_putc_r+0x76>
 800a44c:	b2eb      	uxtb	r3, r5
 800a44e:	2b0a      	cmp	r3, #10
 800a450:	d019      	beq.n	800a486 <_putc_r+0x76>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	6022      	str	r2, [r4, #0]
 800a458:	701d      	strb	r5, [r3, #0]
 800a45a:	b2ed      	uxtb	r5, r5
 800a45c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a45e:	07da      	lsls	r2, r3, #31
 800a460:	d405      	bmi.n	800a46e <_putc_r+0x5e>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	059b      	lsls	r3, r3, #22
 800a466:	d402      	bmi.n	800a46e <_putc_r+0x5e>
 800a468:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a46a:	f7ff f9c5 	bl	80097f8 <__retarget_lock_release_recursive>
 800a46e:	4628      	mov	r0, r5
 800a470:	bd70      	pop	{r4, r5, r6, pc}
 800a472:	4b09      	ldr	r3, [pc, #36]	; (800a498 <_putc_r+0x88>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d101      	bne.n	800a47c <_putc_r+0x6c>
 800a478:	68b4      	ldr	r4, [r6, #8]
 800a47a:	e7d6      	b.n	800a42a <_putc_r+0x1a>
 800a47c:	4b07      	ldr	r3, [pc, #28]	; (800a49c <_putc_r+0x8c>)
 800a47e:	429c      	cmp	r4, r3
 800a480:	bf08      	it	eq
 800a482:	68f4      	ldreq	r4, [r6, #12]
 800a484:	e7d1      	b.n	800a42a <_putc_r+0x1a>
 800a486:	4629      	mov	r1, r5
 800a488:	4622      	mov	r2, r4
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff fb6e 	bl	8009b6c <__swbuf_r>
 800a490:	4605      	mov	r5, r0
 800a492:	e7e3      	b.n	800a45c <_putc_r+0x4c>
 800a494:	0800a7dc 	.word	0x0800a7dc
 800a498:	0800a7fc 	.word	0x0800a7fc
 800a49c:	0800a7bc 	.word	0x0800a7bc

0800a4a0 <_read_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4d07      	ldr	r5, [pc, #28]	; (800a4c0 <_read_r+0x20>)
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	4608      	mov	r0, r1
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 fe9a 	bl	80021e8 <_read>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_read_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_read_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000990 	.word	0x20000990

0800a4c4 <_fstat_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d07      	ldr	r5, [pc, #28]	; (800a4e4 <_fstat_r+0x20>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	602b      	str	r3, [r5, #0]
 800a4d2:	f7f7 fece 	bl	8002272 <_fstat>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d102      	bne.n	800a4e0 <_fstat_r+0x1c>
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	b103      	cbz	r3, 800a4e0 <_fstat_r+0x1c>
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000990 	.word	0x20000990

0800a4e8 <_isatty_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d06      	ldr	r5, [pc, #24]	; (800a504 <_isatty_r+0x1c>)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	f7f7 fecd 	bl	8002292 <_isatty>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_isatty_r+0x1a>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_isatty_r+0x1a>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20000990 	.word	0x20000990

0800a508 <_init>:
 800a508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50a:	bf00      	nop
 800a50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a50e:	bc08      	pop	{r3}
 800a510:	469e      	mov	lr, r3
 800a512:	4770      	bx	lr

0800a514 <_fini>:
 800a514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a516:	bf00      	nop
 800a518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51a:	bc08      	pop	{r3}
 800a51c:	469e      	mov	lr, r3
 800a51e:	4770      	bx	lr
