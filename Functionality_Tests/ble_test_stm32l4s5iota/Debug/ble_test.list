
ble_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6ac  0800a6ac  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6ac  0800a6ac  0001a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6b4  0800a6b4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6b8  0800a6b8  0001a6b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a6bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000088  0800a744  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800a744  00020988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f056  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048c9  00000000  00000000  0004f10e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e28  00000000  00000000  000539d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c78  00000000  00000000  00055800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033290  00000000  00000000  00057478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b435  00000000  00000000  0008a708  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00127fba  00000000  00000000  000a5b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cdaf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086b4  00000000  00000000  001cdb74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a378 	.word	0x0800a378

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800a378 	.word	0x0800a378

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005a6:	4a73      	ldr	r2, [pc, #460]	; (8000774 <MX_BlueNRG_MS_Init+0x1d4>)
 80005a8:	f107 031c 	add.w	r3, r7, #28
 80005ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b0:	6018      	str	r0, [r3, #0]
 80005b2:	3304      	adds	r3, #4
 80005b4:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005b6:	4a70      	ldr	r2, [pc, #448]	; (8000778 <MX_BlueNRG_MS_Init+0x1d8>)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c0:	6018      	str	r0, [r3, #0]
 80005c2:	3304      	adds	r3, #4
 80005c4:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005c6:	f000 f8fd 	bl	80007c4 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f001 ffe8 	bl	80025a0 <BSP_PB_GetState>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <MX_BlueNRG_MS_Init+0x1dc>)
 80005d6:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005d8:	2100      	movs	r1, #0
 80005da:	4869      	ldr	r0, [pc, #420]	; (8000780 <MX_BlueNRG_MS_Init+0x1e0>)
 80005dc:	f008 fbf0 	bl	8008dc0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005e0:	1cba      	adds	r2, r7, #2
 80005e2:	1d7b      	adds	r3, r7, #5
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f008 fa60 	bl	8008aac <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005ec:	f008 faa2 	bl	8008b34 <hci_reset>

  HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f002 fa89 	bl	8002b08 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	4619      	mov	r1, r3
 80005fa:	887b      	ldrh	r3, [r7, #2]
 80005fc:	461a      	mov	r2, r3
 80005fe:	4861      	ldr	r0, [pc, #388]	; (8000784 <MX_BlueNRG_MS_Init+0x1e4>)
 8000600:	f009 f94a 	bl	8009898 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000604:	797b      	ldrb	r3, [r7, #5]
 8000606:	2b30      	cmp	r3, #48	; 0x30
 8000608:	d902      	bls.n	8000610 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 800060a:	4b5f      	ldr	r3, [pc, #380]	; (8000788 <MX_BlueNRG_MS_Init+0x1e8>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000610:	4b5e      	ldr	r3, [pc, #376]	; (800078c <MX_BlueNRG_MS_Init+0x1ec>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d109      	bne.n	800062c <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	f107 021c 	add.w	r2, r7, #28
 8000620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000624:	6018      	str	r0, [r3, #0]
 8000626:	3304      	adds	r3, #4
 8000628:	8019      	strh	r1, [r3, #0]
 800062a:	e008      	b.n	800063e <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	f107 0214 	add.w	r2, r7, #20
 8000634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000638:	6018      	str	r0, [r3, #0]
 800063a:	3304      	adds	r3, #4
 800063c:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	461a      	mov	r2, r3
 8000644:	2106      	movs	r1, #6
 8000646:	2000      	movs	r0, #0
 8000648:	f008 f997 	bl	800897a <aci_hal_write_config_data>
 800064c:	4603      	mov	r3, r0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000658:	484d      	ldr	r0, [pc, #308]	; (8000790 <MX_BlueNRG_MS_Init+0x1f0>)
 800065a:	f009 f91d 	bl	8009898 <iprintf>
  }

  ret = aci_gatt_init();
 800065e:	f007 fe27 	bl	80082b0 <aci_gatt_init>
 8000662:	4603      	mov	r3, r0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 8000666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 800066c:	4849      	ldr	r0, [pc, #292]	; (8000794 <MX_BlueNRG_MS_Init+0x1f4>)
 800066e:	f009 f99b 	bl	80099a8 <puts>
  }

  if (BLE_Role == SERVER) {
 8000672:	4b46      	ldr	r3, [pc, #280]	; (800078c <MX_BlueNRG_MS_Init+0x1ec>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d11e      	bne.n	80006b8 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 800067a:	4b43      	ldr	r3, [pc, #268]	; (8000788 <MX_BlueNRG_MS_Init+0x1e8>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d10f      	bne.n	80006a2 <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000682:	f107 020a 	add.w	r2, r7, #10
 8000686:	1dbb      	adds	r3, r7, #6
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	4613      	mov	r3, r2
 8000692:	2207      	movs	r2, #7
 8000694:	2100      	movs	r1, #0
 8000696:	2001      	movs	r0, #1
 8000698:	f007 fbd6 	bl	8007e48 <aci_gap_init_IDB05A1>
 800069c:	4603      	mov	r3, r0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
 80006a0:	e028      	b.n	80006f4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	f107 0208 	add.w	r2, r7, #8
 80006a8:	f107 010a 	add.w	r1, r7, #10
 80006ac:	2001      	movs	r0, #1
 80006ae:	f007 fc1b 	bl	8007ee8 <aci_gap_init_IDB04A1>
 80006b2:	4603      	mov	r3, r0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
 80006b6:	e01d      	b.n	80006f4 <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 80006b8:	4b33      	ldr	r3, [pc, #204]	; (8000788 <MX_BlueNRG_MS_Init+0x1e8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d10f      	bne.n	80006e0 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006c0:	f107 020a 	add.w	r2, r7, #10
 80006c4:	1dbb      	adds	r3, r7, #6
 80006c6:	9301      	str	r3, [sp, #4]
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4613      	mov	r3, r2
 80006d0:	2207      	movs	r2, #7
 80006d2:	2100      	movs	r1, #0
 80006d4:	2004      	movs	r0, #4
 80006d6:	f007 fbb7 	bl	8007e48 <aci_gap_init_IDB05A1>
 80006da:	4603      	mov	r3, r0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
 80006de:	e009      	b.n	80006f4 <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006e0:	1dbb      	adds	r3, r7, #6
 80006e2:	f107 0208 	add.w	r2, r7, #8
 80006e6:	f107 010a 	add.w	r1, r7, #10
 80006ea:	2003      	movs	r0, #3
 80006ec:	f007 fbfc 	bl	8007ee8 <aci_gap_init_IDB04A1>
 80006f0:	4603      	mov	r3, r0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006fa:	4827      	ldr	r0, [pc, #156]	; (8000798 <MX_BlueNRG_MS_Init+0x1f8>)
 80006fc:	f009 f954 	bl	80099a8 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000700:	2301      	movs	r3, #1
 8000702:	9303      	str	r3, [sp, #12]
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_BlueNRG_MS_Init+0x1fc>)
 8000706:	9302      	str	r3, [sp, #8]
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2310      	movs	r3, #16
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2307      	movs	r3, #7
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2001      	movs	r0, #1
 8000718:	f007 fd1f 	bl	800815a <aci_gap_set_auth_requirement>
 800071c:	4603      	mov	r3, r0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	2b00      	cmp	r3, #0
 8000724:	d102      	bne.n	800072c <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <MX_BlueNRG_MS_Init+0x200>)
 8000728:	f009 f93e 	bl	80099a8 <puts>
  }

  if (BLE_Role == SERVER) {
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_BlueNRG_MS_Init+0x1ec>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d111      	bne.n	8000758 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 8000734:	481b      	ldr	r0, [pc, #108]	; (80007a4 <MX_BlueNRG_MS_Init+0x204>)
 8000736:	f009 f937 	bl	80099a8 <puts>
    ret = Add_Sample_Service();
 800073a:	f000 f8f1 	bl	8000920 <Add_Sample_Service>
 800073e:	4603      	mov	r3, r0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	2b00      	cmp	r3, #0
 8000746:	d103      	bne.n	8000750 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8000748:	4817      	ldr	r0, [pc, #92]	; (80007a8 <MX_BlueNRG_MS_Init+0x208>)
 800074a:	f009 f92d 	bl	80099a8 <puts>
 800074e:	e006      	b.n	800075e <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000750:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_BlueNRG_MS_Init+0x20c>)
 8000752:	f009 f929 	bl	80099a8 <puts>
 8000756:	e002      	b.n	800075e <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_BlueNRG_MS_Init+0x210>)
 800075a:	f009 f925 	bl	80099a8 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,7);
 800075e:	2107      	movs	r1, #7
 8000760:	2001      	movs	r0, #1
 8000762:	f008 f972 	bl	8008a4a <aci_hal_set_tx_power_level>
 8000766:	4603      	mov	r3, r0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	0800a47c 	.word	0x0800a47c
 8000778:	0800a484 	.word	0x0800a484
 800077c:	20000000 	.word	0x20000000
 8000780:	08000dcd 	.word	0x08000dcd
 8000784:	0800a390 	.word	0x0800a390
 8000788:	200000a4 	.word	0x200000a4
 800078c:	20000001 	.word	0x20000001
 8000790:	0800a3a4 	.word	0x0800a3a4
 8000794:	0800a3c4 	.word	0x0800a3c4
 8000798:	0800a3d8 	.word	0x0800a3d8
 800079c:	0001e240 	.word	0x0001e240
 80007a0:	0800a3ec 	.word	0x0800a3ec
 80007a4:	0800a404 	.word	0x0800a404
 80007a8:	0800a424 	.word	0x0800a424
 80007ac:	0800a440 	.word	0x0800a440
 80007b0:	0800a45c 	.word	0x0800a45c

080007b4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80007b8:	f000 f812 	bl	80007e0 <User_Process>
  hci_user_evt_proc();
 80007bc:	f008 fc7a 	bl	80090b4 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007c8:	2101      	movs	r1, #1
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fe94 	bl	80024f8 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 fdfd 	bl	80023d0 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f001 ff40 	bl	800265c <BSP_COM_Init>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
  if (set_connectable)
 80007e6:	4b3d      	ldr	r3, [pc, #244]	; (80008dc <User_Process+0xfc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00b      	beq.n	8000808 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 80007f0:	f000 f908 	bl	8000a04 <Make_Connection>
    set_connectable = FALSE;
 80007f4:	4b39      	ldr	r3, [pc, #228]	; (80008dc <User_Process+0xfc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f001 fed0 	bl	80025a0 <BSP_PB_GetState>
 8000800:	4603      	mov	r3, r0
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <User_Process+0x100>)
 8000806:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <User_Process+0x104>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d12e      	bne.n	800086e <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <User_Process+0x108>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d007      	beq.n	8000828 <User_Process+0x48>
 8000818:	4b34      	ldr	r3, [pc, #208]	; (80008ec <User_Process+0x10c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <User_Process+0x48>
      startReadTXCharHandle();
 8000822:	f000 f959 	bl	8000ad8 <startReadTXCharHandle>
 8000826:	e00a      	b.n	800083e <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <User_Process+0x108>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d006      	beq.n	800083e <User_Process+0x5e>
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <User_Process+0x110>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <User_Process+0x5e>
      startReadRXCharHandle();
 800083a:	f000 f973 	bl	8000b24 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <User_Process+0x108>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d013      	beq.n	800086e <User_Process+0x8e>
 8000846:	4b29      	ldr	r3, [pc, #164]	; (80008ec <User_Process+0x10c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d00e      	beq.n	800086e <User_Process+0x8e>
 8000850:	4b27      	ldr	r3, [pc, #156]	; (80008f0 <User_Process+0x110>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d009      	beq.n	800086e <User_Process+0x8e>
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <User_Process+0x114>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d104      	bne.n	800086e <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000864:	2000      	movs	r0, #0
 8000866:	f001 fddb 	bl	8002420 <BSP_LED_Off>
      enableNotification();
 800086a:	f000 f9d7 	bl	8000c1c <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 800086e:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <User_Process+0x118>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d02c      	beq.n	80008d2 <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 8000878:	2032      	movs	r0, #50	; 0x32
 800087a:	f002 f945 	bl	8002b08 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 800087e:	bf00      	nop
 8000880:	2000      	movs	r0, #0
 8000882:	f001 fe8d 	bl	80025a0 <BSP_PB_GetState>
 8000886:	4602      	mov	r2, r0
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <User_Process+0x100>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	429a      	cmp	r2, r3
 800089a:	d0f1      	beq.n	8000880 <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	; 0x32
 800089e:	f002 f933 	bl	8002b08 <HAL_Delay>

    if (connected && notification_enabled)
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <User_Process+0x108>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d010      	beq.n	80008cc <User_Process+0xec>
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <User_Process+0x114>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d00b      	beq.n	80008cc <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <User_Process+0x11c>)
 80008b6:	1d3c      	adds	r4, r7, #4
 80008b8:	461d      	mov	r5, r3
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2114      	movs	r1, #20
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f978 	bl	8000bbc <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <User_Process+0x118>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  }
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bdb0      	pop	{r4, r5, r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000002 	.word	0x20000002
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000001 	.word	0x20000001
 80008e8:	200000a8 	.word	0x200000a8
 80008ec:	200000b1 	.word	0x200000b1
 80008f0:	200000b2 	.word	0x200000b2
 80008f4:	200000ae 	.word	0x200000ae
 80008f8:	200000a5 	.word	0x200000a5
 80008fc:	0800a48c 	.word	0x0800a48c

08000900 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <BSP_PB_Callback+0x1c>)
 800090c:	2201      	movs	r2, #1
 800090e:	701a      	strb	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	200000a5 	.word	0x200000a5

08000920 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b095      	sub	sp, #84	; 0x54
 8000924:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <Add_Sample_Service+0xcc>)
 8000928:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800092c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800092e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000932:	4b2f      	ldr	r3, [pc, #188]	; (80009f0 <Add_Sample_Service+0xd0>)
 8000934:	f107 0414 	add.w	r4, r7, #20
 8000938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800093e:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <Add_Sample_Service+0xd4>)
 8000940:	1d3c      	adds	r4, r7, #4
 8000942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000948:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800094c:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <Add_Sample_Service+0xd8>)
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2307      	movs	r3, #7
 8000952:	2201      	movs	r2, #1
 8000954:	2002      	movs	r0, #2
 8000956:	f007 fcce 	bl	80082f6 <aci_gatt_add_serv>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000964:	2b00      	cmp	r3, #0
 8000966:	d136      	bne.n	80009d6 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <Add_Sample_Service+0xd8>)
 800096a:	8818      	ldrh	r0, [r3, #0]
 800096c:	f107 0214 	add.w	r2, r7, #20
 8000970:	4b22      	ldr	r3, [pc, #136]	; (80009fc <Add_Sample_Service+0xdc>)
 8000972:	9305      	str	r3, [sp, #20]
 8000974:	2301      	movs	r3, #1
 8000976:	9304      	str	r3, [sp, #16]
 8000978:	2310      	movs	r3, #16
 800097a:	9303      	str	r3, [sp, #12]
 800097c:	2300      	movs	r3, #0
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	2310      	movs	r3, #16
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2314      	movs	r3, #20
 800098a:	2102      	movs	r1, #2
 800098c:	f007 fd3f 	bl	800840e <aci_gatt_add_char>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000996:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800099a:	2b00      	cmp	r3, #0
 800099c:	d11d      	bne.n	80009da <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <Add_Sample_Service+0xd8>)
 80009a0:	8818      	ldrh	r0, [r3, #0]
 80009a2:	1d3a      	adds	r2, r7, #4
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <Add_Sample_Service+0xe0>)
 80009a6:	9305      	str	r3, [sp, #20]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9304      	str	r3, [sp, #16]
 80009ac:	2310      	movs	r3, #16
 80009ae:	9303      	str	r3, [sp, #12]
 80009b0:	2301      	movs	r3, #1
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2300      	movs	r3, #0
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	230c      	movs	r3, #12
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2314      	movs	r3, #20
 80009be:	2102      	movs	r1, #2
 80009c0:	f007 fd25 	bl	800840e <aci_gatt_add_char>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d105      	bne.n	80009de <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e005      	b.n	80009e2 <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009d6:	bf00      	nop
 80009d8:	e002      	b.n	80009e0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009da:	bf00      	nop
 80009dc:	e000      	b.n	80009e0 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009de:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 80009e0:	2347      	movs	r3, #71	; 0x47
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	373c      	adds	r7, #60	; 0x3c
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800a4a0 	.word	0x0800a4a0
 80009f0:	0800a4b0 	.word	0x0800a4b0
 80009f4:	0800a4c0 	.word	0x0800a4c0
 80009f8:	200004d2 	.word	0x200004d2
 80009fc:	200004d0 	.word	0x200004d0
 8000a00:	200004d4 	.word	0x200004d4

08000a04 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b08f      	sub	sp, #60	; 0x3c
 8000a08:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <Make_Connection+0xc0>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d133      	bne.n	8000a7a <Make_Connection+0x76>

    printf("Client Create Connection\n");
 8000a12:	482d      	ldr	r0, [pc, #180]	; (8000ac8 <Make_Connection+0xc4>)
 8000a14:	f008 ffc8 	bl	80099a8 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a18:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <Make_Connection+0xc8>)
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a22:	6018      	str	r0, [r3, #0]
 8000a24:	3304      	adds	r3, #4
 8000a26:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fce3 	bl	80023f4 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000a2e:	f107 0210 	add.w	r2, r7, #16
 8000a32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a36:	9306      	str	r3, [sp, #24]
 8000a38:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a3c:	9305      	str	r3, [sp, #20]
 8000a3e:	233c      	movs	r3, #60	; 0x3c
 8000a40:	9304      	str	r3, [sp, #16]
 8000a42:	2300      	movs	r3, #0
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	2328      	movs	r3, #40	; 0x28
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2328      	movs	r3, #40	; 0x28
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4613      	mov	r3, r2
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a5e:	f007 fbd3 	bl	8008208 <aci_gap_create_connection>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d027      	beq.n	8000abc <Make_Connection+0xb8>
      printf("Error while starting connection.\n");
 8000a6c:	4818      	ldr	r0, [pc, #96]	; (8000ad0 <Make_Connection+0xcc>)
 8000a6e:	f008 ff9b 	bl	80099a8 <puts>
      HAL_Delay(100);
 8000a72:	2064      	movs	r0, #100	; 0x64
 8000a74:	f002 f848 	bl	8002b08 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000a78:	e020      	b.n	8000abc <Make_Connection+0xb8>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <Make_Connection+0xd0>)
 8000a7c:	463c      	mov	r4, r7
 8000a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a80:	c407      	stmia	r4!, {r0, r1, r2}
 8000a82:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f008 f8c0 	bl	8008c0c <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9306      	str	r3, [sp, #24]
 8000a90:	2300      	movs	r3, #0
 8000a92:	9305      	str	r3, [sp, #20]
 8000a94:	2300      	movs	r3, #0
 8000a96:	9304      	str	r3, [sp, #16]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9303      	str	r3, [sp, #12]
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	230d      	movs	r3, #13
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f007 fa62 	bl	8007f7c <aci_gap_set_discoverable>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	75fb      	strb	r3, [r7, #23]
}
 8000abc:	bf00      	nop
 8000abe:	371c      	adds	r7, #28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	20000001 	.word	0x20000001
 8000ac8:	0800a4d0 	.word	0x0800a4d0
 8000acc:	0800a510 	.word	0x0800a510
 8000ad0:	0800a4ec 	.word	0x0800a4ec
 8000ad4:	0800a518 	.word	0x0800a518

08000ad8 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <startReadTXCharHandle+0x40>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d112      	bne.n	8000b0e <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <startReadTXCharHandle+0x44>)
 8000aea:	463c      	mov	r4, r7
 8000aec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <startReadTXCharHandle+0x48>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b298      	uxth	r0, r3
 8000af8:	463b      	mov	r3, r7
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2302      	movs	r3, #2
 8000afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b02:	2101      	movs	r1, #1
 8000b04:	f007 fde8 	bl	80086d8 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <startReadTXCharHandle+0x40>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3714      	adds	r7, #20
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd90      	pop	{r4, r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000af 	.word	0x200000af
 8000b1c:	0800a4b0 	.word	0x0800a4b0
 8000b20:	200000ac 	.word	0x200000ac

08000b24 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <startReadRXCharHandle+0x40>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d112      	bne.n	8000b5a <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <startReadRXCharHandle+0x44>)
 8000b36:	463c      	mov	r4, r7
 8000b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <startReadRXCharHandle+0x48>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	b298      	uxth	r0, r3
 8000b44:	463b      	mov	r3, r7
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4e:	2101      	movs	r1, #1
 8000b50:	f007 fdc2 	bl	80086d8 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <startReadRXCharHandle+0x40>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000b0 	.word	0x200000b0
 8000b68:	0800a4c0 	.word	0x0800a4c0
 8000b6c:	200000ac 	.word	0x200000ac

08000b70 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 fc65 	bl	800244c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e009      	b.n	8000b9c <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fe99 	bl	80098c8 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	dbf1      	blt.n	8000b88 <receiveData+0x18>
  }
  fflush(stdout);
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <receiveData+0x48>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f008 fcb8 	bl	8009520 <fflush>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000024 	.word	0x20000024

08000bbc <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <sendData+0x4c>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10b      	bne.n	8000be8 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <sendData+0x50>)
 8000bd2:	8818      	ldrh	r0, [r3, #0]
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <sendData+0x54>)
 8000bd6:	8819      	ldrh	r1, [r3, #0]
 8000bd8:	78fa      	ldrb	r2, [r7, #3]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4613      	mov	r3, r2
 8000be0:	2200      	movs	r2, #0
 8000be2:	f007 fce6 	bl	80085b2 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000be6:	e00a      	b.n	8000bfe <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <sendData+0x58>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b298      	uxth	r0, r3
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <sendData+0x5c>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f007 fe79 	bl	80088f0 <aci_gatt_write_without_response>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000001 	.word	0x20000001
 8000c0c:	200004d2 	.word	0x200004d2
 8000c10:	200004d0 	.word	0x200004d0
 8000c14:	200000ac 	.word	0x200000ac
 8000c18:	200004ce 	.word	0x200004ce

08000c1c <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000c22:	2301      	movs	r3, #1
 8000c24:	703b      	strb	r3, [r7, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	707b      	strb	r3, [r7, #1]

  uint32_t tickstart = HAL_GetTick();
 8000c2a:	f001 ff61 	bl	8002af0 <HAL_GetTick>
 8000c2e:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c30:	e008      	b.n	8000c44 <enableNotification+0x28>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c32:	f001 ff5d 	bl	8002af0 <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d80e      	bhi.n	8000c62 <enableNotification+0x46>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <enableNotification+0x58>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <enableNotification+0x5c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	b299      	uxth	r1, r3
 8000c52:	463b      	mov	r3, r7
 8000c54:	2202      	movs	r2, #2
 8000c56:	f007 fdce 	bl	80087f6 <aci_gatt_write_charac_descriptor>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b46      	cmp	r3, #70	; 0x46
 8000c5e:	d0e8      	beq.n	8000c32 <enableNotification+0x16>
 8000c60:	e000      	b.n	8000c64 <enableNotification+0x48>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c62:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <enableNotification+0x60>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000ac 	.word	0x200000ac
 8000c78:	200004cc 	.word	0x200004cc
 8000c7c:	200000ae 	.word	0x200000ae

08000c80 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	80fb      	strh	r3, [r7, #6]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000c90:	88fa      	ldrh	r2, [r7, #6]
 8000c92:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <Attribute_Modified_CB+0x4c>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	3301      	adds	r3, #1
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d105      	bne.n	8000ca8 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	6838      	ldr	r0, [r7, #0]
 8000ca2:	f7ff ff65 	bl	8000b70 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000ca6:	e00c      	b.n	8000cc2 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <Attribute_Modified_CB+0x50>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3302      	adds	r3, #2
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d106      	bne.n	8000cc2 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d102      	bne.n	8000cc2 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <Attribute_Modified_CB+0x54>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200004d4 	.word	0x200004d4
 8000cd0:	200004d0 	.word	0x200004d0
 8000cd4:	200000ae 	.word	0x200000ae

08000cd8 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <GAP_ConnectionComplete_CB+0x54>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000cea:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <GAP_ConnectionComplete_CB+0x58>)
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <GAP_ConnectionComplete_CB+0x5c>)
 8000cf2:	f008 fdd1 	bl	8009898 <iprintf>
  for(int i = 5; i > 0; i--){
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e00a      	b.n	8000d12 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	480c      	ldr	r0, [pc, #48]	; (8000d38 <GAP_ConnectionComplete_CB+0x60>)
 8000d08:	f008 fdc6 	bl	8009898 <iprintf>
  for(int i = 5; i > 0; i--){
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	dcf1      	bgt.n	8000cfc <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <GAP_ConnectionComplete_CB+0x64>)
 8000d20:	f008 fdba 	bl	8009898 <iprintf>
}
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000a8 	.word	0x200000a8
 8000d30:	200000ac 	.word	0x200000ac
 8000d34:	0800a528 	.word	0x0800a528
 8000d38:	0800a540 	.word	0x0800a540
 8000d3c:	0800a548 	.word	0x0800a548

08000d40 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <GAP_DisconnectionComplete_CB+0x38>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <GAP_DisconnectionComplete_CB+0x3c>)
 8000d4c:	f008 fe2c 	bl	80099a8 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <GAP_DisconnectionComplete_CB+0x40>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <GAP_DisconnectionComplete_CB+0x44>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <GAP_DisconnectionComplete_CB+0x48>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <GAP_DisconnectionComplete_CB+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <GAP_DisconnectionComplete_CB+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <GAP_DisconnectionComplete_CB+0x54>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	0800a550 	.word	0x0800a550
 8000d80:	20000002 	.word	0x20000002
 8000d84:	200000ae 	.word	0x200000ae
 8000d88:	200000af 	.word	0x200000af
 8000d8c:	200000b0 	.word	0x200000b0
 8000d90:	200000b1 	.word	0x200000b1
 8000d94:	200000b2 	.word	0x200000b2

08000d98 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	603a      	str	r2, [r7, #0]
 8000da2:	80fb      	strh	r3, [r7, #6]
 8000da4:	460b      	mov	r3, r1
 8000da6:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <GATT_Notification_CB+0x30>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	3301      	adds	r3, #1
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d104      	bne.n	8000dbe <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000db4:	797b      	ldrb	r3, [r7, #5]
 8000db6:	4619      	mov	r1, r3
 8000db8:	6838      	ldr	r0, [r7, #0]
 8000dba:	f7ff fed9 	bl	8000b70 <receiveData>
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200004cc 	.word	0x200004cc

08000dcc <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	3301      	adds	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	f040 80e1 	bne.w	8000faa <user_notify+0x1de>
    return;

  switch(event_pckt->evt){
 8000de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b3e      	cmp	r3, #62	; 0x3e
 8000dee:	d007      	beq.n	8000e00 <user_notify+0x34>
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d01c      	beq.n	8000e2e <user_notify+0x62>
 8000df4:	2b05      	cmp	r3, #5
 8000df6:	f040 80db 	bne.w	8000fb0 <user_notify+0x1e4>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000dfa:	f7ff ffa1 	bl	8000d40 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000dfe:	e0d7      	b.n	8000fb0 <user_notify+0x1e4>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	3302      	adds	r3, #2
 8000e04:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d000      	beq.n	8000e10 <user_notify+0x44>
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
        }
        break;
      }
    }
    break;
 8000e0e:	e0cf      	b.n	8000fb0 <user_notify+0x1e4>
          evt_le_connection_complete *cc = (void *)evt->data;
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	1d5a      	adds	r2, r3, #5
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f7ff ff57 	bl	8000cd8 <GAP_ConnectionComplete_CB>
        break;
 8000e2a:	bf00      	nop
    break;
 8000e2c:	e0c0      	b.n	8000fb0 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	3302      	adds	r3, #2
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000e3e:	2b11      	cmp	r3, #17
 8000e40:	f200 80b5 	bhi.w	8000fae <user_notify+0x1e2>
 8000e44:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <user_notify+0x80>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e95 	.word	0x08000e95
 8000e50:	08000faf 	.word	0x08000faf
 8000e54:	08000faf 	.word	0x08000faf
 8000e58:	08000faf 	.word	0x08000faf
 8000e5c:	08000faf 	.word	0x08000faf
 8000e60:	08000faf 	.word	0x08000faf
 8000e64:	08000faf 	.word	0x08000faf
 8000e68:	08000faf 	.word	0x08000faf
 8000e6c:	08000faf 	.word	0x08000faf
 8000e70:	08000faf 	.word	0x08000faf
 8000e74:	08000faf 	.word	0x08000faf
 8000e78:	08000faf 	.word	0x08000faf
 8000e7c:	08000faf 	.word	0x08000faf
 8000e80:	08000faf 	.word	0x08000faf
 8000e84:	08000ed5 	.word	0x08000ed5
 8000e88:	08000f61 	.word	0x08000f61
 8000e8c:	08000faf 	.word	0x08000faf
 8000e90:	08000ef7 	.word	0x08000ef7

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000e94:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <user_notify+0x1ec>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10d      	bne.n	8000eb8 <user_notify+0xec>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	885b      	ldrh	r3, [r3, #2]
 8000ea6:	b298      	uxth	r0, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	7919      	ldrb	r1, [r3, #4]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3307      	adds	r3, #7
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f7ff fee5 	bl	8000c80 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000eb6:	e076      	b.n	8000fa6 <user_notify+0x1da>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	3302      	adds	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	885b      	ldrh	r3, [r3, #2]
 8000ec2:	b298      	uxth	r0, r3
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	7919      	ldrb	r1, [r3, #4]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	3305      	adds	r3, #5
 8000ecc:	461a      	mov	r2, r3
 8000ece:	f7ff fed7 	bl	8000c80 <Attribute_Modified_CB>
        break;
 8000ed2:	e068      	b.n	8000fa6 <user_notify+0x1da>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000ee0:	b298      	uxth	r0, r3
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3305      	adds	r3, #5
 8000eee:	461a      	mov	r2, r3
 8000ef0:	f7ff ff52 	bl	8000d98 <GATT_Notification_CB>
        }
        break;
 8000ef4:	e057      	b.n	8000fa6 <user_notify+0x1da>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000ef6:	4b31      	ldr	r3, [pc, #196]	; (8000fbc <user_notify+0x1f0>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d150      	bne.n	8000fa0 <user_notify+0x1d4>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	3302      	adds	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f04:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <user_notify+0x1f4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d011      	beq.n	8000f32 <user_notify+0x166>
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <user_notify+0x1f8>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10c      	bne.n	8000f32 <user_notify+0x166>
          {
            tx_handle = resp->attr_handle;
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <user_notify+0x1fc>)
 8000f22:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <user_notify+0x1fc>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4828      	ldr	r0, [pc, #160]	; (8000fcc <user_notify+0x200>)
 8000f2c:	f008 fcb4 	bl	8009898 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000f30:	e036      	b.n	8000fa0 <user_notify+0x1d4>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <user_notify+0x204>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d031      	beq.n	8000fa0 <user_notify+0x1d4>
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <user_notify+0x208>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d12c      	bne.n	8000fa0 <user_notify+0x1d4>
            rx_handle = resp->attr_handle;
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <user_notify+0x20c>)
 8000f50:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <user_notify+0x20c>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4820      	ldr	r0, [pc, #128]	; (8000fdc <user_notify+0x210>)
 8000f5a:	f008 fc9d 	bl	8009898 <iprintf>
        break;
 8000f5e:	e01f      	b.n	8000fa0 <user_notify+0x1d4>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000f60:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <user_notify+0x1f0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11d      	bne.n	8000fa4 <user_notify+0x1d8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f68:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <user_notify+0x1f4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <user_notify+0x1b8>
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <user_notify+0x1f8>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d103      	bne.n	8000f84 <user_notify+0x1b8>
          {
            end_read_tx_char_handle = TRUE;
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <user_notify+0x1f8>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000f82:	e00f      	b.n	8000fa4 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <user_notify+0x204>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00a      	beq.n	8000fa4 <user_notify+0x1d8>
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <user_notify+0x208>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d105      	bne.n	8000fa4 <user_notify+0x1d8>
            end_read_rx_char_handle = TRUE;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <user_notify+0x208>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
        break;
 8000f9e:	e001      	b.n	8000fa4 <user_notify+0x1d8>
        break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <user_notify+0x1da>
        break;
 8000fa4:	bf00      	nop
      }
    }
    break;
 8000fa6:	bf00      	nop
 8000fa8:	e001      	b.n	8000fae <user_notify+0x1e2>
    return;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <user_notify+0x1e4>
    break;
 8000fae:	bf00      	nop
  }
}
 8000fb0:	3730      	adds	r7, #48	; 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000a4 	.word	0x200000a4
 8000fbc:	20000001 	.word	0x20000001
 8000fc0:	200000af 	.word	0x200000af
 8000fc4:	200000b1 	.word	0x200000b1
 8000fc8:	200004cc 	.word	0x200004cc
 8000fcc:	0800a560 	.word	0x0800a560
 8000fd0:	200000b0 	.word	0x200000b0
 8000fd4:	200000b2 	.word	0x200000b2
 8000fd8:	200004ce 	.word	0x200004ce
 8000fdc:	0800a578 	.word	0x0800a578

08000fe0 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <HCI_TL_SPI_Init+0x84>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HCI_TL_SPI_Init+0x84>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HCI_TL_SPI_Init+0x84>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HCI_TL_SPI_Init+0x88>)
 8001006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	4816      	ldr	r0, [pc, #88]	; (800106c <HCI_TL_SPI_Init+0x8c>)
 8001014:	f002 fefe 	bl	8003e14 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800101c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f002 feee 	bl	8003e14 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	4619      	mov	r1, r3
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <HCI_TL_SPI_Init+0x90>)
 8001052:	f002 fedf 	bl	8003e14 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001056:	f001 fbf1 	bl	800283c <BSP_SPI3_Init>
 800105a:	4603      	mov	r3, r0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000
 8001068:	10110000 	.word	0x10110000
 800106c:	48001000 	.word	0x48001000
 8001070:	48000c00 	.word	0x48000c00

08001074 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <HCI_TL_SPI_DeInit+0x28>)
 800107c:	f003 f85c 	bl	8004138 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HCI_TL_SPI_DeInit+0x2c>)
 8001086:	f003 f857 	bl	8004138 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800108a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f003 f851 	bl	8004138 <HAL_GPIO_DeInit>
  return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	bd80      	pop	{r7, pc}
 800109c:	48001000 	.word	0x48001000
 80010a0:	48000c00 	.word	0x48000c00

080010a4 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <HCI_TL_SPI_Reset+0x40>)
 80010b0:	f003 f94c 	bl	800434c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f003 f945 	bl	800434c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f001 fd20 	bl	8002b08 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f003 f93b 	bl	800434c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010d6:	2005      	movs	r0, #5
 80010d8:	f001 fd16 	bl	8002b08 <HAL_Delay>
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	48000c00 	.word	0x48000c00

080010e8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80010f8:	23ff      	movs	r3, #255	; 0xff
 80010fa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80010fc:	230b      	movs	r3, #11
 80010fe:	753b      	strb	r3, [r7, #20]
 8001100:	2300      	movs	r3, #0
 8001102:	757b      	strb	r3, [r7, #21]
 8001104:	2300      	movs	r3, #0
 8001106:	75bb      	strb	r3, [r7, #22]
 8001108:	2300      	movs	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]
 800110c:	2300      	movs	r3, #0
 800110e:	763b      	strb	r3, [r7, #24]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <HCI_TL_SPI_Receive+0xb4>)
 8001118:	f003 f918 	bl	800434c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800111c:	f107 010c 	add.w	r1, r7, #12
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2205      	movs	r2, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fbb8 	bl	800289c <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d129      	bne.n	8001186 <HCI_TL_SPI_Receive+0x9e>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001132:	7c3b      	ldrb	r3, [r7, #16]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001142:	8bfb      	ldrh	r3, [r7, #30]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01e      	beq.n	8001186 <HCI_TL_SPI_Receive+0x9e>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001148:	8bfa      	ldrh	r2, [r7, #30]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	429a      	cmp	r2, r3
 800114e:	d901      	bls.n	8001154 <HCI_TL_SPI_Receive+0x6c>
        byte_count = size;
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001154:	2300      	movs	r3, #0
 8001156:	777b      	strb	r3, [r7, #29]
 8001158:	e010      	b.n	800117c <HCI_TL_SPI_Receive+0x94>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 800115a:	f107 011b 	add.w	r1, r7, #27
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	2201      	movs	r2, #1
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fb99 	bl	800289c <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 800116a:	7f7b      	ldrb	r3, [r7, #29]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	7efa      	ldrb	r2, [r7, #27]
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001176:	7f7b      	ldrb	r3, [r7, #29]
 8001178:	3301      	adds	r3, #1
 800117a:	777b      	strb	r3, [r7, #29]
 800117c:	7f7b      	ldrb	r3, [r7, #29]
 800117e:	b29b      	uxth	r3, r3
 8001180:	8bfa      	ldrh	r2, [r7, #30]
 8001182:	429a      	cmp	r2, r3
 8001184:	d8e9      	bhi.n	800115a <HCI_TL_SPI_Receive+0x72>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <HCI_TL_SPI_Receive+0xb4>)
 800118e:	f003 f8dd 	bl	800434c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 8001192:	7f7b      	ldrb	r3, [r7, #29]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	48000c00 	.word	0x48000c00

080011a0 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80011ac:	230a      	movs	r3, #10
 80011ae:	743b      	strb	r3, [r7, #16]
 80011b0:	2300      	movs	r3, #0
 80011b2:	747b      	strb	r3, [r7, #17]
 80011b4:	2300      	movs	r3, #0
 80011b6:	74bb      	strb	r3, [r7, #18]
 80011b8:	2300      	movs	r3, #0
 80011ba:	74fb      	strb	r3, [r7, #19]
 80011bc:	2300      	movs	r3, #0
 80011be:	753b      	strb	r3, [r7, #20]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f001 fc96 	bl	8002af0 <HAL_GetTick>
 80011c4:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	481c      	ldr	r0, [pc, #112]	; (8001244 <HCI_TL_SPI_Send+0xa4>)
 80011d2:	f003 f8bb 	bl	800434c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80011d6:	f107 0108 	add.w	r1, r7, #8
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2205      	movs	r2, #5
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fb5b 	bl	800289c <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 80011e6:	7a3b      	ldrb	r3, [r7, #8]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d10f      	bne.n	800120c <HCI_TL_SPI_Send+0x6c>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80011ec:	7a7b      	ldrb	r3, [r7, #9]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d806      	bhi.n	8001204 <HCI_TL_SPI_Send+0x64>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4913      	ldr	r1, [pc, #76]	; (8001248 <HCI_TL_SPI_Send+0xa8>)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f001 fb4d 	bl	800289c <BSP_SPI3_SendRecv>
 8001202:	e006      	b.n	8001212 <HCI_TL_SPI_Send+0x72>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 8001204:	f06f 0301 	mvn.w	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e002      	b.n	8001212 <HCI_TL_SPI_Send+0x72>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001210:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	480a      	ldr	r0, [pc, #40]	; (8001244 <HCI_TL_SPI_Send+0xa4>)
 800121a:	f003 f897 	bl	800434c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800121e:	f001 fc67 	bl	8002af0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d903      	bls.n	8001234 <HCI_TL_SPI_Send+0x94>
    {
      result = -3;
 800122c:	f06f 0302 	mvn.w	r3, #2
 8001230:	61fb      	str	r3, [r7, #28]
      break;
 8001232:	e002      	b.n	800123a <HCI_TL_SPI_Send+0x9a>
    }
  } while(result < 0);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b00      	cmp	r3, #0
 8001238:	dbc5      	blt.n	80011c6 <HCI_TL_SPI_Send+0x26>

  return result;
 800123a:	69fb      	ldr	r3, [r7, #28]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	48000c00 	.word	0x48000c00
 8001248:	200000b4 	.word	0x200000b4

0800124c <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <IsDataAvailable+0x1c>)
 8001254:	f003 f862 	bl	800431c <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	bf0c      	ite	eq
 800125e:	2301      	moveq	r3, #1
 8001260:	2300      	movne	r3, #0
 8001262:	b2db      	uxtb	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	bd80      	pop	{r7, pc}
 8001268:	48001000 	.word	0x48001000

0800126c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <hci_tl_lowlevel_init+0x50>)
 8001274:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <hci_tl_lowlevel_init+0x54>)
 8001278:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <hci_tl_lowlevel_init+0x58>)
 800127c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800127e:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <hci_tl_lowlevel_init+0x5c>)
 8001280:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <hci_tl_lowlevel_init+0x60>)
 8001284:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <hci_tl_lowlevel_init+0x64>)
 8001288:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f007 fdd9 	bl	8008e44 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001292:	4910      	ldr	r1, [pc, #64]	; (80012d4 <hci_tl_lowlevel_init+0x68>)
 8001294:	4810      	ldr	r0, [pc, #64]	; (80012d8 <hci_tl_lowlevel_init+0x6c>)
 8001296:	f002 fd79 	bl	8003d8c <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <hci_tl_lowlevel_init+0x70>)
 800129c:	2100      	movs	r1, #0
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <hci_tl_lowlevel_init+0x6c>)
 80012a0:	f002 fd5a 	bl	8003d58 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2017      	movs	r0, #23
 80012aa:	f002 fc12 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012ae:	2017      	movs	r0, #23
 80012b0:	f002 fc2b 	bl	8003b0a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80012b4:	bf00      	nop
 80012b6:	3720      	adds	r7, #32
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	08000fe1 	.word	0x08000fe1
 80012c0:	08001075 	.word	0x08001075
 80012c4:	080011a1 	.word	0x080011a1
 80012c8:	080010e9 	.word	0x080010e9
 80012cc:	080010a5 	.word	0x080010a5
 80012d0:	080028dd 	.word	0x080028dd
 80012d4:	16000006 	.word	0x16000006
 80012d8:	200004d8 	.word	0x200004d8
 80012dc:	080012e1 	.word	0x080012e1

080012e0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80012e4:	e005      	b.n	80012f2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80012e6:	2000      	movs	r0, #0
 80012e8:	f007 ff0e 	bl	8009108 <hci_notify_asynch_evt>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80012f2:	f7ff ffab 	bl	800124c <IsDataAvailable>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f4      	bne.n	80012e6 <hci_tl_lowlevel_isr+0x6>
 80012fc:	e000      	b.n	8001300 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80012fe:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8001300:	bd80      	pop	{r7, pc}

08001302 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f001 fb8b 	bl	8002a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f81b 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f000 fb67 	bl	80019e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001312:	f000 f8c7 	bl	80014a4 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001316:	f000 f929 	bl	800156c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 800131a:	f000 f95f 	bl	80015dc <MX_I2C1_Init>
  MX_I2C2_Init();
 800131e:	f000 f99d 	bl	800165c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001322:	f000 f9db 	bl	80016dc <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8001326:	f000 fa2f 	bl	8001788 <MX_SPI1_Init>
  MX_UART4_Init();
 800132a:	f000 fa6b 	bl	8001804 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800132e:	f000 fab5 	bl	800189c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001332:	f000 fb01 	bl	8001938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001336:	f000 fb4b 	bl	80019d0 <MX_USB_OTG_FS_USB_Init>
  MX_BlueNRG_MS_Init();
 800133a:	f7ff f931 	bl	80005a0 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_BlueNRG_MS_Process();
 800133e:	f7ff fa39 	bl	80007b4 <MX_BlueNRG_MS_Process>
 8001342:	e7fc      	b.n	800133e <main+0x3c>

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0bc      	sub	sp, #240	; 0xf0
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800134e:	2244      	movs	r2, #68	; 0x44
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f008 f9ef 	bl	8009736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2294      	movs	r2, #148	; 0x94
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f008 f9e1 	bl	8009736 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001374:	2000      	movs	r0, #0
 8001376:	f003 fe8b 	bl	8005090 <HAL_PWREx_ControlVoltageScaling>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8001380:	f000 fc6c 	bl	8001c5c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001384:	f003 fe54 	bl	8005030 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <SystemClock_Config+0x158>)
 800138a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800138e:	4a43      	ldr	r2, [pc, #268]	; (800149c <SystemClock_Config+0x158>)
 8001390:	f023 0318 	bic.w	r3, r3, #24
 8001394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001398:	2314      	movs	r3, #20
 800139a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013b0:	2360      	movs	r3, #96	; 0x60
 80013b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013bc:	2301      	movs	r3, #1
 80013be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 fef7 	bl	80051d8 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013f0:	f000 fc34 	bl	8001c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fa:	2303      	movs	r3, #3
 80013fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001412:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001416:	2105      	movs	r1, #5
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fb03 	bl	8005a24 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001424:	f000 fc1a 	bl	8001c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <SystemClock_Config+0x15c>)
 800142a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800142c:	2300      	movs	r3, #0
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001430:	2300      	movs	r3, #0
 8001432:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001438:	2300      	movs	r3, #0
 800143a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800143c:	2300      	movs	r3, #0
 800143e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001440:	2300      	movs	r3, #0
 8001442:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001444:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800145c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800145e:	2301      	movs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001466:	2318      	movs	r3, #24
 8001468:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001476:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800147a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fd80 	bl	8005f84 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800148a:	f000 fbe7 	bl	8001c5c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800148e:	f005 f8a1 	bl	80065d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001492:	bf00      	nop
 8001494:	37f0      	adds	r7, #240	; 0xf0
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	010160cf 	.word	0x010160cf

080014a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014aa:	463b      	mov	r3, r7
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <MX_ADC1_Init+0xc0>)
 80014be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014da:	2204      	movs	r2, #4
 80014dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC1_Init+0xbc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_ADC1_Init+0xbc>)
 8001500:	2200      	movs	r2, #0
 8001502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_ADC1_Init+0xbc>)
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_ADC1_Init+0xbc>)
 800150e:	2200      	movs	r2, #0
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_ADC1_Init+0xbc>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800151a:	4811      	ldr	r0, [pc, #68]	; (8001560 <MX_ADC1_Init+0xbc>)
 800151c:	f001 fcb6 	bl	8002e8c <HAL_ADC_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001526:	f000 fb99 	bl	8001c5c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_ADC1_Init+0xc4>)
 800152c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152e:	2306      	movs	r3, #6
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001536:	237f      	movs	r3, #127	; 0x7f
 8001538:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800153a:	2304      	movs	r3, #4
 800153c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_ADC1_Init+0xbc>)
 8001548:	f001 fdec 	bl	8003124 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001552:	f000 fb83 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000658 	.word	0x20000658
 8001564:	50040000 	.word	0x50040000
 8001568:	04300002 	.word	0x04300002

0800156c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <MX_DFSDM1_Init+0x6c>)
 8001574:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 8001578:	2201      	movs	r2, #1
 800157a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 8001584:	2202      	movs	r2, #2
 8001586:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 800159c:	2200      	movs	r2, #0
 800159e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015a2:	2204      	movs	r2, #4
 80015a4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_DFSDM1_Init+0x68>)
 80015c0:	f002 fabe 	bl	8003b40 <HAL_DFSDM_ChannelInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80015ca:	f000 fb47 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000844 	.word	0x20000844
 80015d8:	40016040 	.word	0x40016040

080015dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <MX_I2C1_Init+0x74>)
 8001618:	f002 feed 	bl	80043f6 <HAL_I2C_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001622:	f000 fb1b 	bl	8001c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162a:	f002 ff73 	bl	8004514 <HAL_I2CEx_ConfigAnalogFilter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001634:	f000 fb12 	bl	8001c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_I2C1_Init+0x74>)
 800163c:	f002 ffb5 	bl	80045aa <HAL_I2CEx_ConfigDigitalFilter>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 fb09 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000570 	.word	0x20000570
 8001654:	40005400 	.word	0x40005400
 8001658:	307075b1 	.word	0x307075b1

0800165c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <MX_I2C2_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <MX_I2C2_Init+0x7c>)
 800166a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_I2C2_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001674:	2201      	movs	r2, #1
 8001676:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <MX_I2C2_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_I2C2_Init+0x74>)
 800168c:	2200      	movs	r2, #0
 800168e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <MX_I2C2_Init+0x74>)
 8001698:	f002 fead 	bl	80043f6 <HAL_I2C_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016a2:	f000 fadb 	bl	8001c5c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <MX_I2C2_Init+0x74>)
 80016aa:	f002 ff33 	bl	8004514 <HAL_I2CEx_ConfigAnalogFilter>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016b4:	f000 fad2 	bl	8001c5c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_I2C2_Init+0x74>)
 80016bc:	f002 ff75 	bl	80045aa <HAL_I2CEx_ConfigDigitalFilter>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 fac9 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000060c 	.word	0x2000060c
 80016d4:	40005800 	.word	0x40005800
 80016d8:	307075b1 	.word	0x307075b1

080016dc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80016f0:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 80016f2:	4a24      	ldr	r2, [pc, #144]	; (8001784 <MX_OCTOSPI1_Init+0xa8>)
 80016f4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001704:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001708:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 800170c:	2220      	movs	r2, #32
 800170e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001722:	4b17      	ldr	r3, [pc, #92]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001724:	2201      	movs	r2, #1
 8001726:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 800173c:	2208      	movs	r2, #8
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001742:	f002 ff7f 	bl	8004644 <HAL_OSPI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800174c:	f000 fa86 	bl	8001c5c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001750:	2301      	movs	r3, #1
 8001752:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001758:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_OCTOSPI1_Init+0xa4>)
 8001768:	f003 f826 	bl	80047b8 <HAL_OSPIM_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001772:	f000 fa73 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200005bc 	.word	0x200005bc
 8001784:	a0001000 	.word	0xa0001000

08001788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_SPI1_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <MX_SPI1_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_SPI1_Init+0x74>)
 8001794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001798:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_SPI1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_SPI1_Init+0x74>)
 80017a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_SPI1_Init+0x74>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_SPI1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_SPI1_Init+0x74>)
 80017b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_SPI1_Init+0x74>)
 80017be:	2208      	movs	r2, #8
 80017c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_SPI1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_SPI1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_SPI1_Init+0x74>)
 80017d6:	2207      	movs	r2, #7
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_SPI1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_SPI1_Init+0x74>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_SPI1_Init+0x74>)
 80017e8:	f005 f8e4 	bl	80069b4 <HAL_SPI_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 fa33 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000750 	.word	0x20000750
 8001800:	40013000 	.word	0x40013000

08001804 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001808:	4b22      	ldr	r3, [pc, #136]	; (8001894 <MX_UART4_Init+0x90>)
 800180a:	4a23      	ldr	r2, [pc, #140]	; (8001898 <MX_UART4_Init+0x94>)
 800180c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_UART4_Init+0x90>)
 8001810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001814:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_UART4_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_UART4_Init+0x90>)
 800181e:	2200      	movs	r2, #0
 8001820:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_UART4_Init+0x90>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_UART4_Init+0x90>)
 800182a:	220c      	movs	r2, #12
 800182c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_UART4_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001834:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_UART4_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <MX_UART4_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_UART4_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <MX_UART4_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800184c:	4811      	ldr	r0, [pc, #68]	; (8001894 <MX_UART4_Init+0x90>)
 800184e:	f005 fcd5 	bl	80071fc <HAL_UART_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001858:	f000 fa00 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800185c:	2100      	movs	r1, #0
 800185e:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_UART4_Init+0x90>)
 8001860:	f006 fa28 	bl	8007cb4 <HAL_UARTEx_SetTxFifoThreshold>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800186a:	f000 f9f7 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800186e:	2100      	movs	r1, #0
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <MX_UART4_Init+0x90>)
 8001872:	f006 fa5d 	bl	8007d30 <HAL_UARTEx_SetRxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800187c:	f000 f9ee 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	; (8001894 <MX_UART4_Init+0x90>)
 8001882:	f006 f9de 	bl	8007c42 <HAL_UARTEx_DisableFifoMode>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800188c:	f000 f9e6 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200006c0 	.word	0x200006c0
 8001898:	40004c00 	.word	0x40004c00

0800189c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018a2:	4a24      	ldr	r2, [pc, #144]	; (8001934 <MX_USART2_UART_Init+0x98>)
 80018a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018c2:	220c      	movs	r2, #12
 80018c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018e8:	f005 fc88 	bl	80071fc <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f000 f9b3 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f6:	2100      	movs	r1, #0
 80018f8:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_USART2_UART_Init+0x94>)
 80018fa:	f006 f9db 	bl	8007cb4 <HAL_UARTEx_SetTxFifoThreshold>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001904:	f000 f9aa 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001908:	2100      	movs	r1, #0
 800190a:	4809      	ldr	r0, [pc, #36]	; (8001930 <MX_USART2_UART_Init+0x94>)
 800190c:	f006 fa10 	bl	8007d30 <HAL_UARTEx_SetRxFifoThreshold>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001916:	f000 f9a1 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART2_UART_Init+0x94>)
 800191c:	f006 f991 	bl	8007c42 <HAL_UARTEx_DisableFifoMode>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001926:	f000 f999 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200007b4 	.word	0x200007b4
 8001934:	40004400 	.word	0x40004400

08001938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800193c:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <MX_USART3_UART_Init+0x94>)
 8001940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001956:	4b1c      	ldr	r3, [pc, #112]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 800195e:	220c      	movs	r2, #12
 8001960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001962:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196e:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001980:	4811      	ldr	r0, [pc, #68]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001982:	f005 fc3b 	bl	80071fc <HAL_UART_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800198c:	f000 f966 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 8001994:	f006 f98e 	bl	8007cb4 <HAL_UARTEx_SetTxFifoThreshold>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800199e:	f000 f95d 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a2:	2100      	movs	r1, #0
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 80019a6:	f006 f9c3 	bl	8007d30 <HAL_UARTEx_SetRxFifoThreshold>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019b0:	f000 f954 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <MX_USART3_UART_Init+0x90>)
 80019b6:	f006 f944 	bl	8007c42 <HAL_UARTEx_DisableFifoMode>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019c0:	f000 f94c 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200004e0 	.word	0x200004e0
 80019cc:	40004800 	.word	0x40004800

080019d0 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	; 0x30
 80019e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	4b93      	ldr	r3, [pc, #588]	; (8001c44 <MX_GPIO_Init+0x264>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a92      	ldr	r2, [pc, #584]	; (8001c44 <MX_GPIO_Init+0x264>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b90      	ldr	r3, [pc, #576]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	4b8d      	ldr	r3, [pc, #564]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a8c      	ldr	r2, [pc, #560]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b8a      	ldr	r3, [pc, #552]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a26:	4b87      	ldr	r3, [pc, #540]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a86      	ldr	r2, [pc, #536]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b84      	ldr	r3, [pc, #528]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a80      	ldr	r2, [pc, #512]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b7e      	ldr	r3, [pc, #504]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a62:	4b78      	ldr	r3, [pc, #480]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	4b75      	ldr	r3, [pc, #468]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a74:	f043 0308 	orr.w	r3, r3, #8
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <MX_GPIO_Init+0x264>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f240 1105 	movw	r1, #261	; 0x105
 8001a8c:	486e      	ldr	r0, [pc, #440]	; (8001c48 <MX_GPIO_Init+0x268>)
 8001a8e:	f002 fc5d 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001a92:	2200      	movs	r2, #0
 8001a94:	f248 111c 	movw	r1, #33052	; 0x811c
 8001a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9c:	f002 fc56 	bl	800434c <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001aa6:	4869      	ldr	r0, [pc, #420]	; (8001c4c <MX_GPIO_Init+0x26c>)
 8001aa8:	f002 fc50 	bl	800434c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f242 0183 	movw	r1, #8323	; 0x2083
 8001ab2:	4867      	ldr	r0, [pc, #412]	; (8001c50 <MX_GPIO_Init+0x270>)
 8001ab4:	f002 fc4a 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2140      	movs	r1, #64	; 0x40
 8001abc:	4865      	ldr	r0, [pc, #404]	; (8001c54 <MX_GPIO_Init+0x274>)
 8001abe:	f002 fc45 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001ac2:	f240 1305 	movw	r3, #261	; 0x105
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	485b      	ldr	r0, [pc, #364]	; (8001c48 <MX_GPIO_Init+0x268>)
 8001adc:	f002 f99a 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001ae0:	237a      	movs	r3, #122	; 0x7a
 8001ae2:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae4:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <MX_GPIO_Init+0x278>)
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4855      	ldr	r0, [pc, #340]	; (8001c48 <MX_GPIO_Init+0x268>)
 8001af4:	f002 f98e 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001af8:	f248 131c 	movw	r3, #33052	; 0x811c
 8001afc:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b14:	f002 f97e 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1c:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <MX_GPIO_Init+0x278>)
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4848      	ldr	r0, [pc, #288]	; (8001c4c <MX_GPIO_Init+0x26c>)
 8001b2c:	f002 f972 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b40:	2302      	movs	r3, #2
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4840      	ldr	r0, [pc, #256]	; (8001c4c <MX_GPIO_Init+0x26c>)
 8001b4c:	f002 f962 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001b50:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001b54:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4619      	mov	r1, r3
 8001b68:	4838      	ldr	r0, [pc, #224]	; (8001c4c <MX_GPIO_Init+0x26c>)
 8001b6a:	f002 f953 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001b6e:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001b72:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b74:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <MX_GPIO_Init+0x278>)
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4833      	ldr	r0, [pc, #204]	; (8001c50 <MX_GPIO_Init+0x270>)
 8001b84:	f002 f946 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001b88:	f242 0383 	movw	r3, #8323	; 0x2083
 8001b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b9a:	f107 031c 	add.w	r3, r7, #28
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482b      	ldr	r0, [pc, #172]	; (8001c50 <MX_GPIO_Init+0x270>)
 8001ba2:	f002 f937 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001ba6:	2340      	movs	r3, #64	; 0x40
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4825      	ldr	r0, [pc, #148]	; (8001c54 <MX_GPIO_Init+0x274>)
 8001bbe:	f002 f929 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001bc2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_GPIO_Init+0x278>)
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <MX_GPIO_Init+0x274>)
 8001bd8:	f002 f91c 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bf4:	f002 f90e 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001bf8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 031c 	add.w	r3, r7, #28
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c18:	f002 f8fc 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2017      	movs	r0, #23
 8001c22:	f001 ff56 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c26:	2017      	movs	r0, #23
 8001c28:	f001 ff6f 	bl	8003b0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2028      	movs	r0, #40	; 0x28
 8001c32:	f001 ff4e 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c36:	2028      	movs	r0, #40	; 0x28
 8001c38:	f001 ff67 	bl	8003b0a <HAL_NVIC_EnableIRQ>

}
 8001c3c:	bf00      	nop
 8001c3e:	3730      	adds	r7, #48	; 0x30
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48001000 	.word	0x48001000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000c00 	.word	0x48000c00
 8001c54:	48000800 	.word	0x48000800
 8001c58:	10110000 	.word	0x10110000

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <Error_Handler+0x6>

08001c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6613      	str	r3, [r2, #96]	; 0x60
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x44>)
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_MspInit+0x74>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d123      	bne.n	8001d16 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a0e      	ldr	r2, [pc, #56]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_ADC_MspInit+0x78>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001cfe:	233f      	movs	r3, #63	; 0x3f
 8001d00:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d02:	230b      	movs	r3, #11
 8001d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_ADC_MspInit+0x7c>)
 8001d12:	f002 f87f 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	50040000 	.word	0x50040000
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000800 	.word	0x48000800

08001d2c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d12d      	bne.n	8001da8 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d50:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6613      	str	r3, [r2, #96]	; 0x60
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d7c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d8e:	2306      	movs	r3, #6
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001d9a:	f002 f83b 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001da6:	6013      	str	r3, [r2, #0]
  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200001b4 	.word	0x200001b4
 8001db4:	40021000 	.word	0x40021000
 8001db8:	48001000 	.word	0x48001000

08001dbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <HAL_I2C_MspInit+0xdc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d129      	bne.n	8001e32 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b2f      	ldr	r3, [pc, #188]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de2:	4a2e      	ldr	r2, [pc, #184]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dea:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4823      	ldr	r0, [pc, #140]	; (8001ea0 <HAL_I2C_MspInit+0xe4>)
 8001e14:	f001 fffe 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e22:	6593      	str	r3, [r2, #88]	; 0x58
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e30:	e02d      	b.n	8001e8e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_I2C_MspInit+0xe8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d128      	bne.n	8001e8e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001e54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5a:	2312      	movs	r3, #18
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e66:	2304      	movs	r3, #4
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480b      	ldr	r0, [pc, #44]	; (8001ea0 <HAL_I2C_MspInit+0xe4>)
 8001e72:	f001 ffcf 	bl	8003e14 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a08      	ldr	r2, [pc, #32]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_I2C_MspInit+0xe0>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	; 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	40005800 	.word	0x40005800

08001ea8 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	; 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_OSPI_MspInit+0x94>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d134      	bne.n	8001f34 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee6:	4a16      	ldr	r2, [pc, #88]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6513      	str	r3, [r2, #80]	; 0x50
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001f00:	f043 0310 	orr.w	r3, r3, #16
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <HAL_OSPI_MspInit+0x98>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001f12:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001f16:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001f24:	230a      	movs	r3, #10
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <HAL_OSPI_MspInit+0x9c>)
 8001f30:	f001 ff70 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	; 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	a0001000 	.word	0xa0001000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48001000 	.word	0x48001000

08001f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_SPI_MspInit+0x7c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d128      	bne.n	8001fbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f74:	6613      	str	r3, [r2, #96]	; 0x60
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_SPI_MspInit+0x80>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001f9a:	23e0      	movs	r3, #224	; 0xe0
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001faa:	2305      	movs	r3, #5
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb8:	f001 ff2c 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40013000 	.word	0x40013000
 8001fc8:	40021000 	.word	0x40021000

08001fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08e      	sub	sp, #56	; 0x38
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a46      	ldr	r2, [pc, #280]	; (8002104 <HAL_UART_MspInit+0x138>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d129      	bne.n	8002042 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4a45      	ldr	r2, [pc, #276]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8001ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002006:	4b40      	ldr	r3, [pc, #256]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a3f      	ldr	r2, [pc, #252]	; (8002108 <HAL_UART_MspInit+0x13c>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800201e:	2303      	movs	r3, #3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202a:	2303      	movs	r3, #3
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800202e:	2308      	movs	r3, #8
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f001 feea 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002040:	e05b      	b.n	80020fa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_UART_MspInit+0x140>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d128      	bne.n	800209e <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800204c:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <HAL_UART_MspInit+0x13c>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	4a2d      	ldr	r2, [pc, #180]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8002052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002056:	6593      	str	r3, [r2, #88]	; 0x58
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <HAL_UART_MspInit+0x13c>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b28      	ldr	r3, [pc, #160]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <HAL_UART_MspInit+0x13c>)
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <HAL_UART_MspInit+0x13c>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800207c:	2378      	movs	r3, #120	; 0x78
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208c:	2307      	movs	r3, #7
 800208e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002094:	4619      	mov	r1, r3
 8002096:	481e      	ldr	r0, [pc, #120]	; (8002110 <HAL_UART_MspInit+0x144>)
 8002098:	f001 febc 	bl	8003e14 <HAL_GPIO_Init>
}
 800209c:	e02d      	b.n	80020fa <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_UART_MspInit+0x148>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d128      	bne.n	80020fa <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a16      	ldr	r2, [pc, #88]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c4:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_UART_MspInit+0x13c>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ea:	2307      	movs	r3, #7
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4806      	ldr	r0, [pc, #24]	; (8002110 <HAL_UART_MspInit+0x144>)
 80020f6:	f001 fe8d 	bl	8003e14 <HAL_GPIO_Init>
}
 80020fa:	bf00      	nop
 80020fc:	3738      	adds	r7, #56	; 0x38
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40004c00 	.word	0x40004c00
 8002108:	40021000 	.word	0x40021000
 800210c:	40004400 	.word	0x40004400
 8002110:	48000c00 	.word	0x48000c00
 8002114:	40004800 	.word	0x40004800

08002118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800211c:	e7fe      	b.n	800211c <NMI_Handler+0x4>

0800211e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002122:	e7fe      	b.n	8002122 <HardFault_Handler+0x4>

08002124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <MemManage_Handler+0x4>

0800212a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <UsageFault_Handler+0x4>

08002136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002164:	f000 fcb0 	bl	8002ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}

0800216c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002170:	2020      	movs	r0, #32
 8002172:	f002 f91d 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <EXTI9_5_IRQHandler+0x24>)
 8002178:	f001 fe1c 	bl	8003db4 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800217c:	2080      	movs	r0, #128	; 0x80
 800217e:	f002 f917 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002182:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002186:	f002 f913 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200004d8 	.word	0x200004d8

08002194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002198:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800219c:	f002 f908 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80021a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021a4:	f002 f904 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021ac:	f002 f900 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80021b0:	4806      	ldr	r0, [pc, #24]	; (80021cc <EXTI15_10_IRQHandler+0x38>)
 80021b2:	f001 fdff 	bl	8003db4 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021ba:	f002 f8f9 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021c2:	f002 f8f5 	bl	80043b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000010 	.word	0x20000010

080021d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	e00a      	b.n	80021f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021e2:	f3af 8000 	nop.w
 80021e6:	4601      	mov	r1, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	b2ca      	uxtb	r2, r1
 80021f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3301      	adds	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dbf0      	blt.n	80021e2 <_read+0x12>
	}

return len;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e009      	b.n	8002230 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	60ba      	str	r2, [r7, #8]
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 faa9 	bl	800277c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	429a      	cmp	r2, r3
 8002236:	dbf1      	blt.n	800221c <_write+0x12>
	}
	return len;
 8002238:	687b      	ldr	r3, [r7, #4]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_close>:

int _close(int file)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
	return -1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800226a:	605a      	str	r2, [r3, #4]
	return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <_isatty>:

int _isatty(int file)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
	return 1;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
	return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <_sbrk+0x5c>)
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <_sbrk+0x60>)
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <_sbrk+0x64>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d102      	bne.n	80022ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <_sbrk+0x64>)
 80022ca:	4a12      	ldr	r2, [pc, #72]	; (8002314 <_sbrk+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <_sbrk+0x64>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d207      	bcs.n	80022ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022dc:	f007 f86a 	bl	80093b4 <__errno>
 80022e0:	4602      	mov	r2, r0
 80022e2:	230c      	movs	r3, #12
 80022e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80022e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022ea:	e009      	b.n	8002300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <_sbrk+0x64>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <_sbrk+0x64>)
 80022fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022fe:	68fb      	ldr	r3, [r7, #12]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200a0000 	.word	0x200a0000
 800230c:	00000400 	.word	0x00000400
 8002310:	200001b8 	.word	0x200001b8
 8002314:	20000988 	.word	0x20000988

08002318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800231c:	4b15      	ldr	r3, [pc, #84]	; (8002374 <SystemInit+0x5c>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <SystemInit+0x5c>)
 8002324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <SystemInit+0x60>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a11      	ldr	r2, [pc, #68]	; (8002378 <SystemInit+0x60>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <SystemInit+0x60>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <SystemInit+0x60>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a0d      	ldr	r2, [pc, #52]	; (8002378 <SystemInit+0x60>)
 8002344:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002348:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800234c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <SystemInit+0x60>)
 8002350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002354:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <SystemInit+0x60>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <SystemInit+0x60>)
 800235c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002360:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <SystemInit+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	40021000 	.word	0x40021000

0800237c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800237c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002380:	f7ff ffca 	bl	8002318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002384:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002386:	e003      	b.n	8002390 <LoopCopyDataInit>

08002388 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800238a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800238c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800238e:	3104      	adds	r1, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002390:	480a      	ldr	r0, [pc, #40]	; (80023bc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002394:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002396:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002398:	d3f6      	bcc.n	8002388 <CopyDataInit>
	ldr	r2, =_sbss
 800239a:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800239c:	e002      	b.n	80023a4 <LoopFillZerobss>

0800239e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800239e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023a0:	f842 3b04 	str.w	r3, [r2], #4

080023a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <LoopForever+0x16>)
	cmp	r2, r3
 80023a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023a8:	d3f9      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023aa:	f007 f995 	bl	80096d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ae:	f7fe ffa8 	bl	8001302 <main>

080023b2 <LoopForever>:

LoopForever:
    b LoopForever
 80023b2:	e7fe      	b.n	80023b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b4:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80023b8:	0800a6bc 	.word	0x0800a6bc
	ldr	r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023c0:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80023c4:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80023c8:	20000988 	.word	0x20000988

080023cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023cc:	e7fe      	b.n	80023cc <ADC1_IRQHandler>
	...

080023d0 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <BSP_LED_Init+0x20>)
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800a5d8 	.word	0x0800a5d8

080023f4 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <BSP_LED_On+0x28>)
 8002402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	2201      	movs	r2, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f001 ff9d 	bl	800434c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000008 	.word	0x20000008

08002420 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <BSP_LED_Off+0x28>)
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002436:	2200      	movs	r2, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f001 ff87 	bl	800434c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000008 	.word	0x20000008

0800244c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <BSP_LED_Toggle+0x28>)
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f001 ff89 	bl	800437c <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000008 	.word	0x20000008

08002478 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800247e:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024aa:	4a11      	ldr	r2, [pc, #68]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <LED_USER_GPIO_Init+0x78>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c4:	480b      	ldr	r0, [pc, #44]	; (80024f4 <LED_USER_GPIO_Init+0x7c>)
 80024c6:	f001 ff41 	bl	800434c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80024dc:	f107 030c 	add.w	r3, r7, #12
 80024e0:	4619      	mov	r1, r3
 80024e2:	4804      	ldr	r0, [pc, #16]	; (80024f4 <LED_USER_GPIO_Init+0x7c>)
 80024e4:	f001 fc96 	bl	8003e14 <HAL_GPIO_Init>

}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	48000800 	.word	0x48000800

080024f8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	71fb      	strb	r3, [r7, #7]
 8002504:	4613      	mov	r3, r2
 8002506:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <BSP_PB_Init+0x94>)
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d131      	bne.n	8002580 <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <BSP_PB_Init+0x98>)
 8002522:	1898      	adds	r0, r3, r2
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4a1b      	ldr	r2, [pc, #108]	; (8002594 <BSP_PB_Init+0x9c>)
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	4619      	mov	r1, r3
 800252e:	f001 fc2d 	bl	8003d8c <HAL_EXTI_GetHandle>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002538:	f06f 0303 	mvn.w	r3, #3
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	e01f      	b.n	8002580 <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4a12      	ldr	r2, [pc, #72]	; (8002590 <BSP_PB_Init+0x98>)
 8002546:	1898      	adds	r0, r3, r2
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <BSP_PB_Init+0xa0>)
 800254c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002550:	461a      	mov	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f001 fc00 	bl	8003d58 <HAL_EXTI_RegisterCallback>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800255e:	f06f 0303 	mvn.w	r3, #3
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e00c      	b.n	8002580 <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002566:	2028      	movs	r0, #40	; 0x28
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <BSP_PB_Init+0xa4>)
 800256c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	f001 faad 	bl	8003ad2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002578:	2328      	movs	r3, #40	; 0x28
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fac5 	bl	8003b0a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	0800a5dc 	.word	0x0800a5dc
 8002590:	20000010 	.word	0x20000010
 8002594:	0800a5e0 	.word	0x0800a5e0
 8002598:	0800a5e4 	.word	0x0800a5e4
 800259c:	0800a5e8 	.word	0x0800a5e8

080025a0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	4a09      	ldr	r2, [pc, #36]	; (80025d4 <BSP_PB_GetState+0x34>)
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f001 feaf 	bl	800431c <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000000c 	.word	0x2000000c

080025d8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80025dc:	2000      	movs	r0, #0
 80025de:	f7fe f98f 	bl	8000900 <BSP_PB_Callback>
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	4a17      	ldr	r2, [pc, #92]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 800261c:	f043 0304 	orr.w	r3, r3, #4
 8002620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <BUTTON_USER_GPIO_Init+0x68>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800262e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <BUTTON_USER_GPIO_Init+0x6c>)
 8002636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	4619      	mov	r1, r3
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <BUTTON_USER_GPIO_Init+0x70>)
 8002644:	f001 fbe6 	bl	8003e14 <HAL_GPIO_Init>

}
 8002648:	bf00      	nop
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	10110000 	.word	0x10110000
 8002658:	48000800 	.word	0x48000800

0800265c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d903      	bls.n	8002678 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002670:	f06f 0301 	mvn.w	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e025      	b.n	80026c4 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	79fa      	ldrb	r2, [r7, #7]
 800267c:	4914      	ldr	r1, [pc, #80]	; (80026d0 <BSP_COM_Init+0x74>)
 800267e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002682:	4814      	ldr	r0, [pc, #80]	; (80026d4 <BSP_COM_Init+0x78>)
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4403      	add	r3, r0
 800268e:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8002690:	79fa      	ldrb	r2, [r7, #7]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	4a0e      	ldr	r2, [pc, #56]	; (80026d4 <BSP_COM_Init+0x78>)
 800269c:	4413      	add	r3, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f888 	bl	80027b4 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80026a4:	79fa      	ldrb	r2, [r7, #7]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <BSP_COM_Init+0x78>)
 80026b0:	4413      	add	r3, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f810 	bl	80026d8 <MX_USART1_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026be:	f06f 0303 	mvn.w	r3, #3
 80026c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80026c4:	68fb      	ldr	r3, [r7, #12]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000018 	.word	0x20000018
 80026d4:	2000087c 	.word	0x2000087c

080026d8 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART1;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a24      	ldr	r2, [pc, #144]	; (8002778 <MX_USART1_UART_Init+0xa0>)
 80026e8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f0:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	220c      	movs	r2, #12
 8002708:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f004 fd67 	bl	80071fc <HAL_UART_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002738:	2100      	movs	r1, #0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f005 faba 	bl	8007cb4 <HAL_UARTEx_SetTxFifoThreshold>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800274a:	2100      	movs	r1, #0
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f005 faef 	bl	8007d30 <HAL_UARTEx_SetRxFifoThreshold>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f005 fa70 	bl	8007c42 <HAL_UARTEx_DisableFifoMode>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800276c:	7bfb      	ldrb	r3, [r7, #15]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40013800 	.word	0x40013800

0800277c <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <__io_putchar+0x30>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4613      	mov	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4413      	add	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <__io_putchar+0x34>)
 8002794:	1898      	adds	r0, r3, r2
 8002796:	1d39      	adds	r1, r7, #4
 8002798:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279c:	2201      	movs	r2, #1
 800279e:	f004 fd7d 	bl	800729c <HAL_UART_Transmit>
  return ch;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200001bc 	.word	0x200001bc
 80027b0:	2000087c 	.word	0x2000087c

080027b4 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <USART1_MspInit+0x80>)
 80027be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <USART1_MspInit+0x80>)
 80027c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c6:	6613      	str	r3, [r2, #96]	; 0x60
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <USART1_MspInit+0x80>)
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <USART1_MspInit+0x80>)
 80027d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <USART1_MspInit+0x80>)
 80027da:	f043 0302 	orr.w	r3, r3, #2
 80027de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <USART1_MspInit+0x80>)
 80027e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 80027ec:	2340      	movs	r3, #64	; 0x40
 80027ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 80027fc:	2307      	movs	r3, #7
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	4619      	mov	r1, r3
 8002806:	480c      	ldr	r0, [pc, #48]	; (8002838 <USART1_MspInit+0x84>)
 8002808:	f001 fb04 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800281c:	2307      	movs	r3, #7
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4619      	mov	r1, r3
 8002826:	4804      	ldr	r0, [pc, #16]	; (8002838 <USART1_MspInit+0x84>)
 8002828:	f001 faf4 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800282c:	bf00      	nop
 800282e:	3728      	adds	r7, #40	; 0x28
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	48000400 	.word	0x48000400

0800283c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8002846:	4b12      	ldr	r3, [pc, #72]	; (8002890 <BSP_SPI3_Init+0x54>)
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <BSP_SPI3_Init+0x58>)
 800284a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <BSP_SPI3_Init+0x5c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	4911      	ldr	r1, [pc, #68]	; (8002898 <BSP_SPI3_Init+0x5c>)
 8002854:	600a      	str	r2, [r1, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <BSP_SPI3_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 800285a:	480d      	ldr	r0, [pc, #52]	; (8002890 <BSP_SPI3_Init+0x54>)
 800285c:	f004 fb60 	bl	8006f20 <HAL_SPI_GetState>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10e      	bne.n	8002884 <BSP_SPI3_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI3_MspInit(&hspi3);
 8002866:	480a      	ldr	r0, [pc, #40]	; (8002890 <BSP_SPI3_Init+0x54>)
 8002868:	f000 f882 	bl	8002970 <SPI3_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d108      	bne.n	8002884 <BSP_SPI3_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <BSP_SPI3_Init+0x54>)
 8002874:	f000 f83a 	bl	80028ec <MX_SPI3_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <BSP_SPI3_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 800287e:	f06f 0307 	mvn.w	r3, #7
 8002882:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000090c 	.word	0x2000090c
 8002894:	40003c00 	.word	0x40003c00
 8002898:	200001c0 	.word	0x200001c0

0800289c <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80028ae:	88fa      	ldrh	r2, [r7, #6]
 80028b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	4806      	ldr	r0, [pc, #24]	; (80028d8 <BSP_SPI3_SendRecv+0x3c>)
 80028be:	f004 f91c 	bl	8006afa <HAL_SPI_TransmitReceive>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <BSP_SPI3_SendRecv+0x32>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80028c8:	f06f 0305 	mvn.w	r3, #5
 80028cc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	2000090c 	.word	0x2000090c

080028dc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80028e0:	f000 f906 	bl	8002af0 <HAL_GetTick>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a1c      	ldr	r2, [pc, #112]	; (800296c <MX_SPI3_Init+0x80>)
 80028fc:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002904:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002912:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2218      	movs	r2, #24
 800292c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2207      	movs	r2, #7
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2208      	movs	r2, #8
 8002950:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f004 f82e 	bl	80069b4 <HAL_SPI_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002962:	7bfb      	ldrb	r3, [r7, #15]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40003c00 	.word	0x40003c00

08002970 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <SPI3_MspInit+0xa8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <SPI3_MspInit+0xa8>)
 800297e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <SPI3_MspInit+0xa8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <SPI3_MspInit+0xa8>)
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <SPI3_MspInit+0xa8>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <SPI3_MspInit+0xa8>)
 800299e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80029a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80029ba:	2306      	movs	r3, #6
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	4815      	ldr	r0, [pc, #84]	; (8002a1c <SPI3_MspInit+0xac>)
 80029c6:	f001 fa25 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80029ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80029dc:	2306      	movs	r3, #6
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	480d      	ldr	r0, [pc, #52]	; (8002a1c <SPI3_MspInit+0xac>)
 80029e8:	f001 fa14 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80029ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80029fe:	2306      	movs	r3, #6
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <SPI3_MspInit+0xac>)
 8002a0a:	f001 fa03 	bl	8003e14 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	48000800 	.word	0x48000800

08002a20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	f001 f846 	bl	8003abc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f80d 	bl	8002a50 <HAL_InitTick>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	71fb      	strb	r3, [r7, #7]
 8002a40:	e001      	b.n	8002a46 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a42:	f7ff f90f 	bl	8001c64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a46:	79fb      	ldrb	r3, [r7, #7]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <HAL_InitTick+0x6c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002a64:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_InitTick+0x70>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <HAL_InitTick+0x6c>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f853 	bl	8003b26 <HAL_SYSTICK_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b0f      	cmp	r3, #15
 8002a8a:	d809      	bhi.n	8002aa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a94:	f001 f81d 	bl	8003ad2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <HAL_InitTick+0x74>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	e004      	b.n	8002ab0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	e001      	b.n	8002ab0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20000020 	.word	0x20000020
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	2000001c 	.word	0x2000001c

08002ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002acc:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_IncTick+0x20>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_IncTick+0x24>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_IncTick+0x24>)
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000020 	.word	0x20000020
 8002aec:	20000970 	.word	0x20000970

08002af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return uwTick;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_GetTick+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000970 	.word	0x20000970

08002b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff ffee 	bl	8002af0 <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b20:	d005      	beq.n	8002b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_Delay+0x40>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b2e:	bf00      	nop
 8002b30:	f7ff ffde 	bl	8002af0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8f7      	bhi.n	8002b30 <HAL_Delay+0x28>
  {
  }
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000020 	.word	0x20000020

08002b4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3360      	adds	r3, #96	; 0x60
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <LL_ADC_SetOffset+0x44>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bec:	bf00      	nop
 8002bee:	371c      	adds	r7, #28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	03fff000 	.word	0x03fff000

08002bfc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3360      	adds	r3, #96	; 0x60
 8002c38:	461a      	mov	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	615a      	str	r2, [r3, #20]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3330      	adds	r3, #48	; 0x30
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	4413      	add	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	211f      	movs	r1, #31
 8002cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 011f 	and.w	r1, r3, #31
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3314      	adds	r3, #20
 8002cec:	461a      	mov	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	0e5b      	lsrs	r3, r3, #25
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	4413      	add	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	0d1b      	lsrs	r3, r3, #20
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2107      	movs	r1, #7
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	401a      	ands	r2, r3
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	0d1b      	lsrs	r3, r3, #20
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0318 	and.w	r3, r3, #24
 8002d56:	4908      	ldr	r1, [pc, #32]	; (8002d78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d58:	40d9      	lsrs	r1, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	0007ffff 	.word	0x0007ffff

08002d7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6093      	str	r3, [r2, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db4:	d101      	bne.n	8002dba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_IsEnabled+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_IsEnabled+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d101      	bne.n	8002e56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d101      	bne.n	8002e7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e12f      	b.n	8003106 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe fef9 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff ff67 	bl	8002da0 <LL_ADC_IsDeepPowerDownEnabled>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff4d 	bl	8002d7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ff82 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d115      	bne.n	8002f1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff66 	bl	8002dc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002efc:	4b84      	ldr	r3, [pc, #528]	; (8003110 <HAL_ADC_Init+0x284>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	099b      	lsrs	r3, r3, #6
 8002f02:	4a84      	ldr	r2, [pc, #528]	; (8003114 <HAL_ADC_Init+0x288>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff64 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff75 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8002f54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f040 80c8 	bne.w	80030f4 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 80c4 	bne.w	80030f4 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff49 	bl	8002e18 <LL_ADC_IsEnabled>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f8c:	4862      	ldr	r0, [pc, #392]	; (8003118 <HAL_ADC_Init+0x28c>)
 8002f8e:	f7ff ff43 	bl	8002e18 <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	485f      	ldr	r0, [pc, #380]	; (800311c <HAL_ADC_Init+0x290>)
 8002fa0:	f7ff fdd4 	bl	8002b4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e5b      	ldrb	r3, [r3, #25]
 8002fa8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d106      	bne.n	8002fe0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	045b      	lsls	r3, r3, #17
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d009      	beq.n	8002ffc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_ADC_Init+0x294>)
 8003004:	4013      	ands	r3, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	430b      	orrs	r3, r1
 800300e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff12 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 800301a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff1f 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 8003026:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d140      	bne.n	80030b0 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d13d      	bne.n	80030b0 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800303e:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003046:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003056:	f023 0306 	bic.w	r3, r3, #6
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6812      	ldr	r2, [r2, #0]
 800305e:	69b9      	ldr	r1, [r7, #24]
 8003060:	430b      	orrs	r3, r1
 8003062:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800306a:	2b01      	cmp	r3, #1
 800306c:	d118      	bne.n	80030a0 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003084:	4311      	orrs	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800308a:	4311      	orrs	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003090:	430a      	orrs	r2, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e007      	b.n	80030b0 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f023 010f 	bic.w	r1, r3, #15
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
 80030d0:	e007      	b.n	80030e2 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 020f 	bic.w	r2, r2, #15
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	f023 0303 	bic.w	r3, r3, #3
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	659a      	str	r2, [r3, #88]	; 0x58
 80030f2:	e007      	b.n	8003104 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003104:	7ffb      	ldrb	r3, [r7, #31]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000004 	.word	0x20000004
 8003114:	053e2d63 	.word	0x053e2d63
 8003118:	50040000 	.word	0x50040000
 800311c:	50040300 	.word	0x50040300
 8003120:	fff0c007 	.word	0xfff0c007

08003124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0b6      	sub	sp, #216	; 0xd8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x22>
 8003142:	2302      	movs	r3, #2
 8003144:	e3d5      	b.n	80038f2 <HAL_ADC_ConfigChannel+0x7ce>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fe73 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 83ba 	bne.w	80038d4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d824      	bhi.n	80031b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	3b02      	subs	r3, #2
 800316e:	2b03      	cmp	r3, #3
 8003170:	d81b      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0x86>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_ADC_ConfigChannel+0x54>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	08003189 	.word	0x08003189
 800317c:	08003191 	.word	0x08003191
 8003180:	08003199 	.word	0x08003199
 8003184:	080031a1 	.word	0x080031a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	220c      	movs	r2, #12
 800318c:	605a      	str	r2, [r3, #4]
          break;
 800318e:	e011      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2212      	movs	r2, #18
 8003194:	605a      	str	r2, [r3, #4]
          break;
 8003196:	e00d      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2218      	movs	r2, #24
 800319c:	605a      	str	r2, [r3, #4]
          break;
 800319e:	e009      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031a6:	605a      	str	r2, [r3, #4]
          break;
 80031a8:	e004      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2206      	movs	r2, #6
 80031ae:	605a      	str	r2, [r3, #4]
          break;
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f7ff fd5f 	bl	8002c84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fe37 	bl	8002e3e <LL_ADC_REG_IsConversionOngoing>
 80031d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fe43 	bl	8002e64 <LL_ADC_INJ_IsConversionOngoing>
 80031de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 81c1 	bne.w	800356e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 81bc 	bne.w	800356e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fe:	d10f      	bne.n	8003220 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	4619      	mov	r1, r3
 800320c:	f7ff fd66 	bl	8002cdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fd20 	bl	8002c5e <LL_ADC_SetSamplingTimeCommonConfig>
 800321e:	e00e      	b.n	800323e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	461a      	mov	r2, r3
 800322e:	f7ff fd55 	bl	8002cdc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fd10 	bl	8002c5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00a      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6919      	ldr	r1, [r3, #16]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003270:	f7ff fca0 	bl	8002bb4 <LL_ADC_SetOffset>
 8003274:	e17b      	b.n	800356e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fcbd 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003282:	4603      	mov	r3, r0
 8003284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10a      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x17e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2100      	movs	r1, #0
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fcb2 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003298:	4603      	mov	r3, r0
 800329a:	0e9b      	lsrs	r3, r3, #26
 800329c:	f003 021f 	and.w	r2, r3, #31
 80032a0:	e01e      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x1bc>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fca7 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e004      	b.n	80032de <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80032d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d105      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1d4>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	e018      	b.n	800332a <HAL_ADC_ConfigChannel+0x206>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800330c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e004      	b.n	800332a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003320:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800332a:	429a      	cmp	r2, r3
 800332c:	d106      	bne.n	800333c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fc76 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff fc5a 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003348:	4603      	mov	r3, r0
 800334a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x244>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fc4f 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800335e:	4603      	mov	r3, r0
 8003360:	0e9b      	lsrs	r3, r3, #26
 8003362:	f003 021f 	and.w	r2, r3, #31
 8003366:	e01e      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x282>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fc44 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800338a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800338e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e004      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800339a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_ADC_ConfigChannel+0x29a>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	e018      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x2cc>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033ca:	fa93 f3a3 	rbit	r3, r3
 80033ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e004      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80033e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d106      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2101      	movs	r1, #1
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fc13 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fbf7 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_ADC_ConfigChannel+0x30a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2102      	movs	r1, #2
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fbec 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	0e9b      	lsrs	r3, r3, #26
 8003428:	f003 021f 	and.w	r2, r3, #31
 800342c:	e01e      	b.n	800346c <HAL_ADC_ConfigChannel+0x348>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2102      	movs	r1, #2
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fbe1 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800344c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003450:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800345c:	2320      	movs	r3, #32
 800345e:	e004      	b.n	800346a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x360>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0e9b      	lsrs	r3, r3, #26
 800347e:	f003 031f 	and.w	r3, r3, #31
 8003482:	e016      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x38e>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800349c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e004      	b.n	80034b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d106      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fbb2 	bl	8002c28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2103      	movs	r1, #3
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff fb96 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x3cc>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2103      	movs	r1, #3
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fb8b 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80034e6:	4603      	mov	r3, r0
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	f003 021f 	and.w	r2, r3, #31
 80034ee:	e017      	b.n	8003520 <HAL_ADC_ConfigChannel+0x3fc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2103      	movs	r1, #3
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff fb80 	bl	8002bfc <LL_ADC_GetOffsetChannel>
 80034fc:	4603      	mov	r3, r0
 80034fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003508:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800350a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800350c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003512:	2320      	movs	r3, #32
 8003514:	e003      	b.n	800351e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8003516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_ADC_ConfigChannel+0x414>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	e011      	b.n	800355c <HAL_ADC_ConfigChannel+0x438>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003546:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003548:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8003550:	2320      	movs	r3, #32
 8003552:	e003      	b.n	800355c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800355c:	429a      	cmp	r2, r3
 800355e:	d106      	bne.n	800356e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2200      	movs	r2, #0
 8003566:	2103      	movs	r1, #3
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff fb5d 	bl	8002c28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fc50 	bl	8002e18 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 8140 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6819      	ldr	r1, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	461a      	mov	r2, r3
 800358e:	f7ff fbd1 	bl	8002d34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	4a8f      	ldr	r2, [pc, #572]	; (80037d4 <HAL_ADC_ConfigChannel+0x6b0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	f040 8131 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x4a2>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	0e9b      	lsrs	r3, r3, #26
 80035b4:	3301      	adds	r3, #1
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2b09      	cmp	r3, #9
 80035bc:	bf94      	ite	ls
 80035be:	2301      	movls	r3, #1
 80035c0:	2300      	movhi	r3, #0
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	e019      	b.n	80035fa <HAL_ADC_ConfigChannel+0x4d6>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80035de:	2320      	movs	r3, #32
 80035e0:	e003      	b.n	80035ea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80035e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e4:	fab3 f383 	clz	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	bf94      	ite	ls
 80035f4:	2301      	movls	r3, #1
 80035f6:	2300      	movhi	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d079      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003606:	2b00      	cmp	r3, #0
 8003608:	d107      	bne.n	800361a <HAL_ADC_ConfigChannel+0x4f6>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e9b      	lsrs	r3, r3, #26
 8003610:	3301      	adds	r3, #1
 8003612:	069b      	lsls	r3, r3, #26
 8003614:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003618:	e015      	b.n	8003646 <HAL_ADC_ConfigChannel+0x522>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800362c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003632:	2320      	movs	r3, #32
 8003634:	e003      	b.n	800363e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	3301      	adds	r3, #1
 8003640:	069b      	lsls	r3, r3, #26
 8003642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x542>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	3301      	adds	r3, #1
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	e017      	b.n	8003696 <HAL_ADC_ConfigChannel+0x572>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e003      	b.n	800368a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	ea42 0103 	orr.w	r1, r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x598>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	3301      	adds	r3, #1
 80036ae:	f003 021f 	and.w	r2, r3, #31
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	e018      	b.n	80036ee <HAL_ADC_ConfigChannel+0x5ca>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 021f 	and.w	r2, r3, #31
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ee:	430b      	orrs	r3, r1
 80036f0:	e081      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_ADC_ConfigChannel+0x5ea>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0e9b      	lsrs	r3, r3, #26
 8003704:	3301      	adds	r3, #1
 8003706:	069b      	lsls	r3, r3, #26
 8003708:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800370c:	e015      	b.n	800373a <HAL_ADC_ConfigChannel+0x616>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	fa93 f3a3 	rbit	r3, r3
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8003726:	2320      	movs	r3, #32
 8003728:	e003      	b.n	8003732 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	3301      	adds	r3, #1
 8003734:	069b      	lsls	r3, r3, #26
 8003736:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_ADC_ConfigChannel+0x636>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	3301      	adds	r3, #1
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	e017      	b.n	800378a <HAL_ADC_ConfigChannel+0x666>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003760:	6a3b      	ldr	r3, [r7, #32]
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	61fb      	str	r3, [r7, #28]
  return result;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e003      	b.n	800377e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3301      	adds	r3, #1
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	ea42 0103 	orr.w	r1, r2, r3
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x692>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	0e9b      	lsrs	r3, r3, #26
 80037a0:	3301      	adds	r3, #1
 80037a2:	f003 021f 	and.w	r2, r3, #31
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	3b1e      	subs	r3, #30
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b4:	e01e      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x6d0>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa93 f3a3 	rbit	r3, r3
 80037c2:	613b      	str	r3, [r7, #16]
  return result;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d104      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80037ce:	2320      	movs	r3, #32
 80037d0:	e006      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x6bc>
 80037d2:	bf00      	nop
 80037d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fab3 f383 	clz	r3, r3
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	3301      	adds	r3, #1
 80037e2:	f003 021f 	and.w	r2, r3, #31
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	3b1e      	subs	r3, #30
 80037ee:	051b      	lsls	r3, r3, #20
 80037f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037f4:	430b      	orrs	r3, r1
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	6892      	ldr	r2, [r2, #8]
 80037fa:	4619      	mov	r1, r3
 80037fc:	f7ff fa6e 	bl	8002cdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_ADC_ConfigChannel+0x7d8>)
 8003806:	4013      	ands	r3, r2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d06c      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800380c:	483c      	ldr	r0, [pc, #240]	; (8003900 <HAL_ADC_ConfigChannel+0x7dc>)
 800380e:	f7ff f9c3 	bl	8002b98 <LL_ADC_GetCommonPathInternalCh>
 8003812:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a3a      	ldr	r2, [pc, #232]	; (8003904 <HAL_ADC_ConfigChannel+0x7e0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d127      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d121      	bne.n	8003870 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a35      	ldr	r2, [pc, #212]	; (8003908 <HAL_ADC_ConfigChannel+0x7e4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d157      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003836:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800383a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800383e:	4619      	mov	r1, r3
 8003840:	482f      	ldr	r0, [pc, #188]	; (8003900 <HAL_ADC_ConfigChannel+0x7dc>)
 8003842:	f7ff f996 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003846:	4b31      	ldr	r3, [pc, #196]	; (800390c <HAL_ADC_ConfigChannel+0x7e8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	4a30      	ldr	r2, [pc, #192]	; (8003910 <HAL_ADC_ConfigChannel+0x7ec>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003860:	e002      	b.n	8003868 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	3b01      	subs	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f9      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800386e:	e03a      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <HAL_ADC_ConfigChannel+0x7f0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d113      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x77e>
 800387a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800387e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10d      	bne.n	80038a2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <HAL_ADC_ConfigChannel+0x7e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d12a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003898:	4619      	mov	r1, r3
 800389a:	4819      	ldr	r0, [pc, #100]	; (8003900 <HAL_ADC_ConfigChannel+0x7dc>)
 800389c:	f7ff f969 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a0:	e021      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <HAL_ADC_ConfigChannel+0x7f4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d11c      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d116      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a12      	ldr	r2, [pc, #72]	; (8003908 <HAL_ADC_ConfigChannel+0x7e4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ca:	4619      	mov	r1, r3
 80038cc:	480c      	ldr	r0, [pc, #48]	; (8003900 <HAL_ADC_ConfigChannel+0x7dc>)
 80038ce:	f7ff f950 	bl	8002b72 <LL_ADC_SetCommonPathInternalCh>
 80038d2:	e008      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80038ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	37d8      	adds	r7, #216	; 0xd8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	80080000 	.word	0x80080000
 8003900:	50040300 	.word	0x50040300
 8003904:	c7520000 	.word	0xc7520000
 8003908:	50040000 	.word	0x50040000
 800390c:	20000004 	.word	0x20000004
 8003910:	053e2d63 	.word	0x053e2d63
 8003914:	cb840000 	.word	0xcb840000
 8003918:	80000001 	.word	0x80000001

0800391c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003938:	4013      	ands	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394e:	4a04      	ldr	r2, [pc, #16]	; (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	60d3      	str	r3, [r2, #12]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003968:	4b04      	ldr	r3, [pc, #16]	; (800397c <__NVIC_GetPriorityGrouping+0x18>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	f003 0307 	and.w	r3, r3, #7
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db0b      	blt.n	80039aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	4907      	ldr	r1, [pc, #28]	; (80039b8 <__NVIC_EnableIRQ+0x38>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2001      	movs	r0, #1
 80039a2:	fa00 f202 	lsl.w	r2, r0, r2
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000e100 	.word	0xe000e100

080039bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	db0a      	blt.n	80039e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	490c      	ldr	r1, [pc, #48]	; (8003a08 <__NVIC_SetPriority+0x4c>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	440b      	add	r3, r1
 80039e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e4:	e00a      	b.n	80039fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4908      	ldr	r1, [pc, #32]	; (8003a0c <__NVIC_SetPriority+0x50>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	3b04      	subs	r3, #4
 80039f4:	0112      	lsls	r2, r2, #4
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	440b      	add	r3, r1
 80039fa:	761a      	strb	r2, [r3, #24]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f1c3 0307 	rsb	r3, r3, #7
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf28      	it	cs
 8003a2e:	2304      	movcs	r3, #4
 8003a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d902      	bls.n	8003a40 <NVIC_EncodePriority+0x30>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b03      	subs	r3, #3
 8003a3e:	e000      	b.n	8003a42 <NVIC_EncodePriority+0x32>
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	401a      	ands	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	4313      	orrs	r3, r2
         );
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	; 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a88:	d301      	bcc.n	8003a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <SysTick_Config+0x40>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a96:	210f      	movs	r1, #15
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a9c:	f7ff ff8e 	bl	80039bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <SysTick_Config+0x40>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff29 	bl	800391c <__NVIC_SetPriorityGrouping>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae4:	f7ff ff3e 	bl	8003964 <__NVIC_GetPriorityGrouping>
 8003ae8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff8e 	bl	8003a10 <NVIC_EncodePriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff5d 	bl	80039bc <__NVIC_SetPriority>
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff31 	bl	8003980 <__NVIC_EnableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffa2 	bl	8003a78 <SysTick_Config>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e0ac      	b.n	8003cac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8b2 	bl	8003cc0 <DFSDM_GetChannelFromInstance>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <HAL_DFSDM_ChannelInit+0x174>)
 8003b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e09f      	b.n	8003cac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7fe f8dd 	bl	8001d2c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_DFSDM_ChannelInit+0x178>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	4a4f      	ldr	r2, [pc, #316]	; (8003cb8 <HAL_DFSDM_ChannelInit+0x178>)
 8003b7a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b7c:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_DFSDM_ChannelInit+0x178>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d125      	bne.n	8003bd0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b84:	4b4d      	ldr	r3, [pc, #308]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a4c      	ldr	r2, [pc, #304]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b8e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b90:	4b4a      	ldr	r3, [pc, #296]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4948      	ldr	r1, [pc, #288]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a46      	ldr	r2, [pc, #280]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003ba8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	791b      	ldrb	r3, [r3, #4]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d108      	bne.n	8003bc4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003bb2:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	493f      	ldr	r1, [pc, #252]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003bc4:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <HAL_DFSDM_ChannelInit+0x17c>)
 8003bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003bde:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bf4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 020f 	bic.w	r2, r2, #15
 8003c0c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6819      	ldr	r1, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003c34:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f002 0207 	and.w	r2, r2, #7
 8003c60:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6859      	ldr	r1, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f810 	bl	8003cc0 <DFSDM_GetChannelFromInstance>
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <HAL_DFSDM_ChannelInit+0x174>)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	200001c8 	.word	0x200001c8
 8003cb8:	200001c4 	.word	0x200001c4
 8003cbc:	40016000 	.word	0x40016000

08003cc0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <DFSDM_GetChannelFromInstance+0x7c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d102      	bne.n	8003cd6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	e02b      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <DFSDM_GetChannelFromInstance+0x80>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d102      	bne.n	8003ce4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	e024      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	; (8003d44 <DFSDM_GetChannelFromInstance+0x84>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d102      	bne.n	8003cf2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003cec:	2302      	movs	r3, #2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e01d      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <DFSDM_GetChannelFromInstance+0x88>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d102      	bne.n	8003d00 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	e016      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <DFSDM_GetChannelFromInstance+0x8c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d102      	bne.n	8003d0e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003d08:	2305      	movs	r3, #5
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e00f      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <DFSDM_GetChannelFromInstance+0x90>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d102      	bne.n	8003d1c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003d16:	2306      	movs	r3, #6
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	e008      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <DFSDM_GetChannelFromInstance+0x94>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d102      	bne.n	8003d2a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d24:	2307      	movs	r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	e001      	b.n	8003d2e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40016000 	.word	0x40016000
 8003d40:	40016020 	.word	0x40016020
 8003d44:	40016040 	.word	0x40016040
 8003d48:	40016080 	.word	0x40016080
 8003d4c:	400160a0 	.word	0x400160a0
 8003d50:	400160c0 	.word	0x400160c0
 8003d54:	400160e0 	.word	0x400160e0

08003d58 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b087      	sub	sp, #28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	460b      	mov	r3, r1
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d103      	bne.n	8003d78 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]
      break;
 8003d76:	e002      	b.n	8003d7e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d7c:	bf00      	nop
  }

  return status;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e003      	b.n	8003da8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
  }
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_EXTI_IRQHandler+0x5c>)
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4798      	blx	r3
    }
  }
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40010414 	.word	0x40010414

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e22:	e166      	b.n	80040f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2101      	movs	r1, #1
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e30:	4013      	ands	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8158 	beq.w	80040ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d00b      	beq.n	8003e5c <HAL_GPIO_Init+0x48>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d007      	beq.n	8003e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e50:	2b11      	cmp	r3, #17
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b12      	cmp	r3, #18
 8003e5a:	d130      	bne.n	8003ebe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e92:	2201      	movs	r2, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0201 	and.w	r2, r3, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0xea>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b12      	cmp	r3, #18
 8003efc:	d123      	bne.n	8003f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	08da      	lsrs	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3208      	adds	r2, #8
 8003f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	08da      	lsrs	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3208      	adds	r2, #8
 8003f40:	6939      	ldr	r1, [r7, #16]
 8003f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	2203      	movs	r2, #3
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80b2 	beq.w	80040ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f88:	4b61      	ldr	r3, [pc, #388]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	4a60      	ldr	r2, [pc, #384]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	6613      	str	r3, [r2, #96]	; 0x60
 8003f94:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <HAL_GPIO_Init+0x2fc>)
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa0:	4a5c      	ldr	r2, [pc, #368]	; (8004114 <HAL_GPIO_Init+0x300>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fca:	d02b      	beq.n	8004024 <HAL_GPIO_Init+0x210>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a52      	ldr	r2, [pc, #328]	; (8004118 <HAL_GPIO_Init+0x304>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d025      	beq.n	8004020 <HAL_GPIO_Init+0x20c>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a51      	ldr	r2, [pc, #324]	; (800411c <HAL_GPIO_Init+0x308>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01f      	beq.n	800401c <HAL_GPIO_Init+0x208>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a50      	ldr	r2, [pc, #320]	; (8004120 <HAL_GPIO_Init+0x30c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d019      	beq.n	8004018 <HAL_GPIO_Init+0x204>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a4f      	ldr	r2, [pc, #316]	; (8004124 <HAL_GPIO_Init+0x310>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_GPIO_Init+0x200>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4e      	ldr	r2, [pc, #312]	; (8004128 <HAL_GPIO_Init+0x314>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00d      	beq.n	8004010 <HAL_GPIO_Init+0x1fc>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a4d      	ldr	r2, [pc, #308]	; (800412c <HAL_GPIO_Init+0x318>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d007      	beq.n	800400c <HAL_GPIO_Init+0x1f8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a4c      	ldr	r2, [pc, #304]	; (8004130 <HAL_GPIO_Init+0x31c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_GPIO_Init+0x1f4>
 8004004:	2307      	movs	r3, #7
 8004006:	e00e      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004008:	2308      	movs	r3, #8
 800400a:	e00c      	b.n	8004026 <HAL_GPIO_Init+0x212>
 800400c:	2306      	movs	r3, #6
 800400e:	e00a      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004010:	2305      	movs	r3, #5
 8004012:	e008      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004014:	2304      	movs	r3, #4
 8004016:	e006      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004018:	2303      	movs	r3, #3
 800401a:	e004      	b.n	8004026 <HAL_GPIO_Init+0x212>
 800401c:	2302      	movs	r3, #2
 800401e:	e002      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <HAL_GPIO_Init+0x212>
 8004024:	2300      	movs	r3, #0
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	f002 0203 	and.w	r2, r2, #3
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	4093      	lsls	r3, r2
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_GPIO_Init+0x300>)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004068:	4a32      	ldr	r2, [pc, #200]	; (8004134 <HAL_GPIO_Init+0x320>)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	43db      	mvns	r3, r3
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4013      	ands	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <HAL_GPIO_Init+0x320>)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_GPIO_Init+0x320>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	43db      	mvns	r3, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	43db      	mvns	r3, r3
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4013      	ands	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <HAL_GPIO_Init+0x320>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f ae91 	bne.w	8003e24 <HAL_GPIO_Init+0x10>
  }
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40010000 	.word	0x40010000
 8004118:	48000400 	.word	0x48000400
 800411c:	48000800 	.word	0x48000800
 8004120:	48000c00 	.word	0x48000c00
 8004124:	48001000 	.word	0x48001000
 8004128:	48001400 	.word	0x48001400
 800412c:	48001800 	.word	0x48001800
 8004130:	48001c00 	.word	0x48001c00
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004146:	e0c9      	b.n	80042dc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004148:	2201      	movs	r2, #1
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80bc 	beq.w	80042d6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <HAL_GPIO_DeInit+0x1c0>)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	3302      	adds	r3, #2
 8004166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	220f      	movs	r2, #15
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4013      	ands	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004186:	d02b      	beq.n	80041e0 <HAL_GPIO_DeInit+0xa8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a5c      	ldr	r2, [pc, #368]	; (80042fc <HAL_GPIO_DeInit+0x1c4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d025      	beq.n	80041dc <HAL_GPIO_DeInit+0xa4>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a5b      	ldr	r2, [pc, #364]	; (8004300 <HAL_GPIO_DeInit+0x1c8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d01f      	beq.n	80041d8 <HAL_GPIO_DeInit+0xa0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a5a      	ldr	r2, [pc, #360]	; (8004304 <HAL_GPIO_DeInit+0x1cc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d019      	beq.n	80041d4 <HAL_GPIO_DeInit+0x9c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a59      	ldr	r2, [pc, #356]	; (8004308 <HAL_GPIO_DeInit+0x1d0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_GPIO_DeInit+0x98>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a58      	ldr	r2, [pc, #352]	; (800430c <HAL_GPIO_DeInit+0x1d4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00d      	beq.n	80041cc <HAL_GPIO_DeInit+0x94>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a57      	ldr	r2, [pc, #348]	; (8004310 <HAL_GPIO_DeInit+0x1d8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d007      	beq.n	80041c8 <HAL_GPIO_DeInit+0x90>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a56      	ldr	r2, [pc, #344]	; (8004314 <HAL_GPIO_DeInit+0x1dc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_GPIO_DeInit+0x8c>
 80041c0:	2307      	movs	r3, #7
 80041c2:	e00e      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041c4:	2308      	movs	r3, #8
 80041c6:	e00c      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041c8:	2306      	movs	r3, #6
 80041ca:	e00a      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041cc:	2305      	movs	r3, #5
 80041ce:	e008      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041d0:	2304      	movs	r3, #4
 80041d2:	e006      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041d4:	2303      	movs	r3, #3
 80041d6:	e004      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041d8:	2302      	movs	r3, #2
 80041da:	e002      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_GPIO_DeInit+0xaa>
 80041e0:	2300      	movs	r3, #0
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	f002 0203 	and.w	r2, r2, #3
 80041e8:	0092      	lsls	r2, r2, #2
 80041ea:	4093      	lsls	r3, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d132      	bne.n	8004258 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80041f2:	4b49      	ldr	r3, [pc, #292]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	4947      	ldr	r1, [pc, #284]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004200:	4b45      	ldr	r3, [pc, #276]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	43db      	mvns	r3, r3
 8004208:	4943      	ldr	r1, [pc, #268]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 800420a:	4013      	ands	r3, r2
 800420c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800420e:	4b42      	ldr	r3, [pc, #264]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	43db      	mvns	r3, r3
 8004216:	4940      	ldr	r1, [pc, #256]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 8004218:	4013      	ands	r3, r2
 800421a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800421c:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	493c      	ldr	r1, [pc, #240]	; (8004318 <HAL_GPIO_DeInit+0x1e0>)
 8004226:	4013      	ands	r3, r2
 8004228:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f003 0303 	and.w	r3, r3, #3
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800423a:	4a2f      	ldr	r2, [pc, #188]	; (80042f8 <HAL_GPIO_DeInit+0x1c0>)
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43da      	mvns	r2, r3
 800424a:	482b      	ldr	r0, [pc, #172]	; (80042f8 <HAL_GPIO_DeInit+0x1c0>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	089b      	lsrs	r3, r3, #2
 8004250:	400a      	ands	r2, r1
 8004252:	3302      	adds	r3, #2
 8004254:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2103      	movs	r1, #3
 8004262:	fa01 f303 	lsl.w	r3, r1, r3
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	08d2      	lsrs	r2, r2, #3
 800428c:	4019      	ands	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	2103      	movs	r1, #3
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	2101      	movs	r1, #1
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2103      	movs	r1, #3
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	43db      	mvns	r3, r3
 80042d0:	401a      	ands	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f af2f 	bne.w	8004148 <HAL_GPIO_DeInit+0x10>
  }
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	48000400 	.word	0x48000400
 8004300:	48000800 	.word	0x48000800
 8004304:	48000c00 	.word	0x48000c00
 8004308:	48001000 	.word	0x48001000
 800430c:	48001400 	.word	0x48001400
 8004310:	48001800 	.word	0x48001800
 8004314:	48001c00 	.word	0x48001c00
 8004318:	40010400 	.word	0x40010400

0800431c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e001      	b.n	800433e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	807b      	strh	r3, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800435c:	787b      	ldrb	r3, [r7, #1]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004368:	e002      	b.n	8004370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800436a:	887a      	ldrh	r2, [r7, #2]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800438e:	887a      	ldrh	r2, [r7, #2]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4013      	ands	r3, r2
 8004394:	041a      	lsls	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	43d9      	mvns	r1, r3
 800439a:	887b      	ldrh	r3, [r7, #2]
 800439c:	400b      	ands	r3, r1
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	619a      	str	r2, [r3, #24]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043ba:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d006      	beq.n	80043d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f806 	bl	80043e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40010400 	.word	0x40010400

080043e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	4603      	mov	r3, r0
 80043e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e081      	b.n	800450c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fd fccd 	bl	8001dbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2224      	movs	r2, #36	; 0x24
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0201 	bic.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004446:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004456:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d107      	bne.n	8004470 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	e006      	b.n	800447e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800447c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d104      	bne.n	8004490 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800448e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800449e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	ea42 0103 	orr.w	r1, r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	021a      	lsls	r2, r3, #8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69d9      	ldr	r1, [r3, #28]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b20      	cmp	r3, #32
 8004528:	d138      	bne.n	800459c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004534:	2302      	movs	r3, #2
 8004536:	e032      	b.n	800459e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0201 	bic.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	e000      	b.n	800459e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800459c:	2302      	movs	r3, #2
  }
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d139      	bne.n	8004634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e033      	b.n	8004636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2224      	movs	r2, #36	; 0x24
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
	...

08004644 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af02      	add	r7, sp, #8
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004650:	f7fe fa4e 	bl	8002af0 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e092      	b.n	8004788 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466c:	2b00      	cmp	r3, #0
 800466e:	f040 808b 	bne.w	8004788 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fc18 	bl	8001ea8 <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004678:	f241 3188 	movw	r1, #5000	; 0x1388
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f88b 	bl	8004798 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_OSPI_Init+0x150>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68d1      	ldr	r1, [r2, #12]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6912      	ldr	r2, [r2, #16]
 8004694:	3a01      	subs	r2, #1
 8004696:	0412      	lsls	r2, r2, #16
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6952      	ldr	r2, [r2, #20]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0212      	lsls	r2, r2, #8
 80046a2:	4311      	orrs	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046a8:	4311      	orrs	r1, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	69d2      	ldr	r2, [r2, #28]
 80046ae:	4311      	orrs	r1, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	0412      	lsls	r2, r2, #16
 80046c2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2120      	movs	r1, #32
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fbb8 	bl	8004e60 <OSPI_WaitFlagStateUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d146      	bne.n	8004788 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	1e5a      	subs	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004730:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d107      	bne.n	8004770 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0202 	orr.w	r2, r2, #2
 800476e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004778:	d103      	bne.n	8004782 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
 8004780:	e002      	b.n	8004788 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	f8e0f8f4 	.word	0xf8e0f8f4

08004798 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b092      	sub	sp, #72	; 0x48
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a08      	ldr	r2, [pc, #32]	; (80047f8 <HAL_OSPIM_Config+0x40>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d105      	bne.n	80047e6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80047de:	2301      	movs	r3, #1
 80047e0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80047e4:	e004      	b.n	80047f0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80047e6:	2301      	movs	r3, #1
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80047f6:	e01f      	b.n	8004838 <HAL_OSPIM_Config+0x80>
 80047f8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80047fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004800:	3301      	adds	r3, #1
 8004802:	b2d8      	uxtb	r0, r3
 8004804:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004808:	f107 0114 	add.w	r1, r7, #20
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	4619      	mov	r1, r3
 8004818:	f000 fb5a 	bl	8004ed0 <OSPIM_GetConfig>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2208      	movs	r2, #8
 800482c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800482e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004832:	3301      	adds	r3, #1
 8004834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004838:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800483c:	2b01      	cmp	r3, #1
 800483e:	d9dd      	bls.n	80047fc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004840:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004844:	2b00      	cmp	r3, #0
 8004846:	f040 82fe 	bne.w	8004e46 <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800484a:	4bcd      	ldr	r3, [pc, #820]	; (8004b80 <HAL_OSPIM_Config+0x3c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004856:	4bca      	ldr	r3, [pc, #808]	; (8004b80 <HAL_OSPIM_Config+0x3c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4ac9      	ldr	r2, [pc, #804]	; (8004b80 <HAL_OSPIM_Config+0x3c8>)
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8004862:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800486e:	4bc5      	ldr	r3, [pc, #788]	; (8004b84 <HAL_OSPIM_Config+0x3cc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800487a:	4bc2      	ldr	r3, [pc, #776]	; (8004b84 <HAL_OSPIM_Config+0x3cc>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4ac1      	ldr	r2, [pc, #772]	; (8004b84 <HAL_OSPIM_Config+0x3cc>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8004886:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004892:	49bd      	ldr	r1, [pc, #756]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048a2:	4413      	add	r3, r2
 80048a4:	3b2c      	subs	r3, #44	; 0x2c
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	48b5      	ldr	r0, [pc, #724]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 80048b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048c0:	4413      	add	r3, r2
 80048c2:	3b2c      	subs	r3, #44	; 0x2c
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4403      	add	r3, r0
 80048d0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80048d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048e0:	4413      	add	r3, r2
 80048e2:	3b34      	subs	r3, #52	; 0x34
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 80ac 	beq.w	8004a44 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80048ec:	49a6      	ldr	r1, [pc, #664]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 80048ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048fc:	4413      	add	r3, r2
 80048fe:	3b34      	subs	r3, #52	; 0x34
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3b01      	subs	r3, #1
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	489f      	ldr	r0, [pc, #636]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 800490c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800490e:	4613      	mov	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800491a:	4413      	add	r3, r2
 800491c:	3b34      	subs	r3, #52	; 0x34
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	f021 0201 	bic.w	r2, r1, #1
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4403      	add	r3, r0
 800492a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800492c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800493a:	4413      	add	r3, r2
 800493c:	3b30      	subs	r3, #48	; 0x30
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01f      	beq.n	8004984 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004944:	4990      	ldr	r1, [pc, #576]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004946:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004954:	4413      	add	r3, r2
 8004956:	3b30      	subs	r3, #48	; 0x30
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3b01      	subs	r3, #1
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	4889      	ldr	r0, [pc, #548]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004972:	4413      	add	r3, r2
 8004974:	3b30      	subs	r3, #48	; 0x30
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3b01      	subs	r3, #1
 800497a:	f021 0210 	bic.w	r2, r1, #16
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4403      	add	r3, r0
 8004982:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004992:	4413      	add	r3, r2
 8004994:	3b28      	subs	r3, #40	; 0x28
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d023      	beq.n	80049e4 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800499c:	497a      	ldr	r1, [pc, #488]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 800499e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ac:	4413      	add	r3, r2
 80049ae:	3b28      	subs	r3, #40	; 0x28
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	6859      	ldr	r1, [r3, #4]
 80049be:	4872      	ldr	r0, [pc, #456]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 80049c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ce:	4413      	add	r3, r2
 80049d0:	3b28      	subs	r3, #40	; 0x28
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4403      	add	r3, r0
 80049e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80049e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049f2:	4413      	add	r3, r2
 80049f4:	3b24      	subs	r3, #36	; 0x24
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d023      	beq.n	8004a44 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80049fc:	4962      	ldr	r1, [pc, #392]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 80049fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3b24      	subs	r3, #36	; 0x24
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	6859      	ldr	r1, [r3, #4]
 8004a1e:	485a      	ldr	r0, [pc, #360]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004a20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b24      	subs	r3, #36	; 0x24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4403      	add	r3, r0
 8004a42:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	6819      	ldr	r1, [r3, #0]
 8004a48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a58:	4413      	add	r3, r2
 8004a5a:	3b34      	subs	r3, #52	; 0x34
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4299      	cmp	r1, r3
 8004a60:	d03c      	beq.n	8004adc <HAL_OSPIM_Config+0x324>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6859      	ldr	r1, [r3, #4]
 8004a66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a76:	4413      	add	r3, r2
 8004a78:	3b30      	subs	r3, #48	; 0x30
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4299      	cmp	r1, r3
 8004a7e:	d02d      	beq.n	8004adc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	6899      	ldr	r1, [r3, #8]
 8004a84:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a94:	4413      	add	r3, r2
 8004a96:	3b2c      	subs	r3, #44	; 0x2c
 8004a98:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004a9a:	4299      	cmp	r1, r3
 8004a9c:	d01e      	beq.n	8004adc <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68d9      	ldr	r1, [r3, #12]
 8004aa2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3b28      	subs	r3, #40	; 0x28
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d00f      	beq.n	8004adc <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6919      	ldr	r1, [r3, #16]
 8004ac0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b24      	subs	r3, #36	; 0x24
 8004ad4:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004ad6:	4299      	cmp	r1, r3
 8004ad8:	f040 80e0 	bne.w	8004c9c <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004adc:	492a      	ldr	r1, [pc, #168]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004ade:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004aee:	4413      	add	r3, r2
 8004af0:	3b34      	subs	r3, #52	; 0x34
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	4822      	ldr	r0, [pc, #136]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004afe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b0e:	4413      	add	r3, r2
 8004b10:	3b34      	subs	r3, #52	; 0x34
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	f021 0201 	bic.w	r2, r1, #1
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4403      	add	r3, r0
 8004b1e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004b20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b30:	4413      	add	r3, r2
 8004b32:	3b30      	subs	r3, #48	; 0x30
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d028      	beq.n	8004b8c <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004b3a:	4913      	ldr	r1, [pc, #76]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004b3c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3b30      	subs	r3, #48	; 0x30
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	440b      	add	r3, r1
 8004b58:	6859      	ldr	r1, [r3, #4]
 8004b5a:	480b      	ldr	r0, [pc, #44]	; (8004b88 <HAL_OSPIM_Config+0x3d0>)
 8004b5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3b30      	subs	r3, #48	; 0x30
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f021 0210 	bic.w	r2, r1, #16
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4403      	add	r3, r0
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	e005      	b.n	8004b8c <HAL_OSPIM_Config+0x3d4>
 8004b80:	a0001000 	.word	0xa0001000
 8004b84:	a0001400 	.word	0xa0001400
 8004b88:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004b8c:	49b1      	ldr	r1, [pc, #708]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004b8e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3b2c      	subs	r3, #44	; 0x2c
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	48a9      	ldr	r0, [pc, #676]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004bae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3b2c      	subs	r3, #44	; 0x2c
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	4403      	add	r3, r0
 8004bce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004bd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004be0:	4413      	add	r3, r2
 8004be2:	3b28      	subs	r3, #40	; 0x28
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d025      	beq.n	8004c36 <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004bea:	499a      	ldr	r1, [pc, #616]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004bec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3b28      	subs	r3, #40	; 0x28
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	6859      	ldr	r1, [r3, #4]
 8004c0e:	4891      	ldr	r0, [pc, #580]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004c10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c20:	4413      	add	r3, r2
 8004c22:	3b28      	subs	r3, #40	; 0x28
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4403      	add	r3, r0
 8004c34:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c36:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c46:	4413      	add	r3, r2
 8004c48:	3b24      	subs	r3, #36	; 0x24
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d025      	beq.n	8004c9c <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004c50:	4980      	ldr	r1, [pc, #512]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004c52:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c62:	4413      	add	r3, r2
 8004c64:	3b24      	subs	r3, #36	; 0x24
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	4877      	ldr	r0, [pc, #476]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004c76:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c86:	4413      	add	r3, r2
 8004c88:	3b24      	subs	r3, #36	; 0x24
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4403      	add	r3, r0
 8004c9a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8004c9c:	4a6d      	ldr	r2, [pc, #436]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	025b      	lsls	r3, r3, #9
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	4967      	ldr	r1, [pc, #412]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8004cc6:	4a63      	ldr	r2, [pc, #396]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f023 0203 	bic.w	r2, r3, #3
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	495d      	ldr	r1, [pc, #372]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d014      	beq.n	8004d22 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8004cf8:	4a56      	ldr	r2, [pc, #344]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	015b      	lsls	r3, r3, #5
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	4950      	ldr	r1, [pc, #320]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	f042 0210 	orr.w	r2, r2, #16
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d019      	beq.n	8004d62 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004d2e:	4a49      	ldr	r2, [pc, #292]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4413      	add	r3, r2
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d46:	049b      	lsls	r3, r3, #18
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	4942      	ldr	r1, [pc, #264]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	e01c      	b.n	8004d9c <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004d6a:	4a3a      	ldr	r2, [pc, #232]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4413      	add	r3, r2
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	069b      	lsls	r3, r3, #26
 8004d84:	431a      	orrs	r2, r3
 8004d86:	4933      	ldr	r1, [pc, #204]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d019      	beq.n	8004ddc <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004da8:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc0:	049b      	lsls	r3, r3, #18
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	4923      	ldr	r1, [pc, #140]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e01c      	b.n	8004e16 <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d018      	beq.n	8004e16 <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	3b01      	subs	r3, #1
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4413      	add	r3, r2
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfc:	069b      	lsls	r3, r3, #26
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	4914      	ldr	r1, [pc, #80]	; (8004e54 <HAL_OSPIM_Config+0x69c>)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004e16:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d005      	beq.n	8004e2e <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_OSPIM_Config+0x6a0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <HAL_OSPIM_Config+0x6a0>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004e2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_OSPIM_Config+0x6a4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a07      	ldr	r2, [pc, #28]	; (8004e5c <HAL_OSPIM_Config+0x6a4>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3748      	adds	r7, #72	; 0x48
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	50061c00 	.word	0x50061c00
 8004e58:	a0001000 	.word	0xa0001000
 8004e5c:	a0001400 	.word	0xa0001400

08004e60 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004e70:	e01a      	b.n	8004ea8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e78:	d016      	beq.n	8004ea8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fd fe39 	bl	8002af0 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	f043 0201 	orr.w	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e00e      	b.n	8004ec6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6a1a      	ldr	r2, [r3, #32]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1d6      	bne.n	8004e72 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	6039      	str	r1, [r7, #0]
 8004eda:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <OSPIM_GetConfig+0x26>
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d802      	bhi.n	8004ef6 <OSPIM_GetConfig+0x26>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
 8004efa:	e08e      	b.n	800501a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2200      	movs	r2, #0
 8004f06:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2200      	movs	r2, #0
 8004f18:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d101      	bne.n	8004f24 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8004f20:	4b41      	ldr	r3, [pc, #260]	; (8005028 <OSPIM_GetConfig+0x158>)
 8004f22:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	e074      	b.n	8005014 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <OSPIM_GetConfig+0x15c>)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4053      	eors	r3, r2
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0310 	and.w	r3, r3, #16
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	4053      	eors	r3, r2
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4053      	eors	r3, r2
 8004f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d018      	beq.n	8004fd2 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4053      	eors	r3, r2
 8004fa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d111      	bne.n	8004fd2 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	e005      	b.n	8004fd2 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d018      	beq.n	800500e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4053      	eors	r3, r2
 8004fe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d111      	bne.n	800500e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	611a      	str	r2, [r3, #16]
 8005000:	e005      	b.n	800500e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d987      	bls.n	8004f2a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	04040222 	.word	0x04040222
 800502c:	50061c00 	.word	0x50061c00

08005030 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a04      	ldr	r2, [pc, #16]	; (800504c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800503a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40007000 	.word	0x40007000

08005050 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d102      	bne.n	8005068 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005066:	e00b      	b.n	8005080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <HAL_PWREx_GetVoltageRange+0x3c>)
 800506a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005076:	d102      	bne.n	800507e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507c:	e000      	b.n	8005080 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800507e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40007000 	.word	0x40007000

08005090 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d141      	bne.n	8005122 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800509e:	4b4b      	ldr	r3, [pc, #300]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050aa:	d131      	bne.n	8005110 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ac:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b2:	4a46      	ldr	r2, [pc, #280]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050bc:	4b43      	ldr	r3, [pc, #268]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c4:	4a41      	ldr	r2, [pc, #260]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050cc:	4b40      	ldr	r3, [pc, #256]	; (80051d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2232      	movs	r2, #50	; 0x32
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
 80050d6:	4a3f      	ldr	r2, [pc, #252]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050d8:	fba2 2303 	umull	r2, r3, r2, r3
 80050dc:	0c9b      	lsrs	r3, r3, #18
 80050de:	3301      	adds	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050e2:	e002      	b.n	80050ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ea:	4b38      	ldr	r3, [pc, #224]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d102      	bne.n	80050fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f2      	bne.n	80050e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050fe:	4b33      	ldr	r3, [pc, #204]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510a:	d158      	bne.n	80051be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e057      	b.n	80051c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005120:	e04d      	b.n	80051be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005128:	d141      	bne.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800512a:	4b28      	ldr	r3, [pc, #160]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005136:	d131      	bne.n	800519c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800513e:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2232      	movs	r2, #50	; 0x32
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	4a1c      	ldr	r2, [pc, #112]	; (80051d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	0c9b      	lsrs	r3, r3, #18
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516e:	e002      	b.n	8005176 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	3b01      	subs	r3, #1
 8005174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005176:	4b15      	ldr	r3, [pc, #84]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d102      	bne.n	800518a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f2      	bne.n	8005170 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800518a:	4b10      	ldr	r3, [pc, #64]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005196:	d112      	bne.n	80051be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e011      	b.n	80051c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80051ac:	e007      	b.n	80051be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80051ae:	4b07      	ldr	r3, [pc, #28]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051b6:	4a05      	ldr	r2, [pc, #20]	; (80051cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40007000 	.word	0x40007000
 80051d0:	20000004 	.word	0x20000004
 80051d4:	431bde83 	.word	0x431bde83

080051d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d102      	bne.n	80051ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	f000 bc16 	b.w	8005a18 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ec:	4ba0      	ldr	r3, [pc, #640]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f6:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80e4 	beq.w	80053d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d007      	beq.n	8005224 <HAL_RCC_OscConfig+0x4c>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b0c      	cmp	r3, #12
 8005218:	f040 808b 	bne.w	8005332 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b01      	cmp	r3, #1
 8005220:	f040 8087 	bne.w	8005332 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005224:	4b92      	ldr	r3, [pc, #584]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0302 	and.w	r3, r3, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x64>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e3ed      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	4b8b      	ldr	r3, [pc, #556]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0308 	and.w	r3, r3, #8
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <HAL_RCC_OscConfig+0x7e>
 800524c:	4b88      	ldr	r3, [pc, #544]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005254:	e005      	b.n	8005262 <HAL_RCC_OscConfig+0x8a>
 8005256:	4b86      	ldr	r3, [pc, #536]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800525c:	091b      	lsrs	r3, r3, #4
 800525e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005262:	4293      	cmp	r3, r2
 8005264:	d223      	bcs.n	80052ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fdc8 	bl	8005e00 <RCC_SetFlashLatencyFromMSIRange>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e3ce      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800527a:	4b7d      	ldr	r3, [pc, #500]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a7c      	ldr	r2, [pc, #496]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005280:	f043 0308 	orr.w	r3, r3, #8
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4b7a      	ldr	r3, [pc, #488]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4977      	ldr	r1, [pc, #476]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	4972      	ldr	r1, [pc, #456]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
 80052ac:	e025      	b.n	80052fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ae:	4b70      	ldr	r3, [pc, #448]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a6f      	ldr	r2, [pc, #444]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	496a      	ldr	r1, [pc, #424]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052cc:	4b68      	ldr	r3, [pc, #416]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	4965      	ldr	r1, [pc, #404]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fd88 	bl	8005e00 <RCC_SetFlashLatencyFromMSIRange>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e38e      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052fa:	f000 fcbf 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 80052fe:	4601      	mov	r1, r0
 8005300:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	091b      	lsrs	r3, r3, #4
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	4a5a      	ldr	r2, [pc, #360]	; (8005474 <HAL_RCC_OscConfig+0x29c>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	fa21 f303 	lsr.w	r3, r1, r3
 8005316:	4a58      	ldr	r2, [pc, #352]	; (8005478 <HAL_RCC_OscConfig+0x2a0>)
 8005318:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800531a:	4b58      	ldr	r3, [pc, #352]	; (800547c <HAL_RCC_OscConfig+0x2a4>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	f7fd fb96 	bl	8002a50 <HAL_InitTick>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d052      	beq.n	80053d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	e372      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d032      	beq.n	80053a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800533a:	4b4d      	ldr	r3, [pc, #308]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a4c      	ldr	r2, [pc, #304]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005340:	f043 0301 	orr.w	r3, r3, #1
 8005344:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005346:	f7fd fbd3 	bl	8002af0 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800534e:	f7fd fbcf 	bl	8002af0 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e35b      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005360:	4b43      	ldr	r3, [pc, #268]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f0      	beq.n	800534e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800536c:	4b40      	ldr	r3, [pc, #256]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3f      	ldr	r2, [pc, #252]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005372:	f043 0308 	orr.w	r3, r3, #8
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b3d      	ldr	r3, [pc, #244]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	493a      	ldr	r1, [pc, #232]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	4935      	ldr	r1, [pc, #212]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
 800539e:	e01a      	b.n	80053d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a32      	ldr	r2, [pc, #200]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ac:	f7fd fba0 	bl	8002af0 <HAL_GetTick>
 80053b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b4:	f7fd fb9c 	bl	8002af0 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e328      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80053c6:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f0      	bne.n	80053b4 <HAL_RCC_OscConfig+0x1dc>
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d073      	beq.n	80054ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_OscConfig+0x21c>
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b0c      	cmp	r3, #12
 80053ec:	d10e      	bne.n	800540c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d10b      	bne.n	800540c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d063      	beq.n	80054c8 <HAL_RCC_OscConfig+0x2f0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d15f      	bne.n	80054c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e305      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005414:	d106      	bne.n	8005424 <HAL_RCC_OscConfig+0x24c>
 8005416:	4b16      	ldr	r3, [pc, #88]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a15      	ldr	r2, [pc, #84]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e01d      	b.n	8005460 <HAL_RCC_OscConfig+0x288>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x270>
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a0f      	ldr	r2, [pc, #60]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a0c      	ldr	r2, [pc, #48]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0x288>
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a08      	ldr	r2, [pc, #32]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800544e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a05      	ldr	r2, [pc, #20]	; (8005470 <HAL_RCC_OscConfig+0x298>)
 800545a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01b      	beq.n	80054a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fd fb42 	bl	8002af0 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800546e:	e010      	b.n	8005492 <HAL_RCC_OscConfig+0x2ba>
 8005470:	40021000 	.word	0x40021000
 8005474:	0800a590 	.word	0x0800a590
 8005478:	20000004 	.word	0x20000004
 800547c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005480:	f7fd fb36 	bl	8002af0 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	; 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e2c2      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005492:	4baf      	ldr	r3, [pc, #700]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0x2a8>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a0:	f7fd fb26 	bl	8002af0 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fd fb22 	bl	8002af0 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e2ae      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054ba:	4ba5      	ldr	r3, [pc, #660]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0x2d0>
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d060      	beq.n	8005598 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b04      	cmp	r3, #4
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_OscConfig+0x310>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d119      	bne.n	8005516 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d116      	bne.n	8005516 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e8:	4b99      	ldr	r3, [pc, #612]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <HAL_RCC_OscConfig+0x328>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e28b      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b93      	ldr	r3, [pc, #588]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	061b      	lsls	r3, r3, #24
 800550e:	4990      	ldr	r1, [pc, #576]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005514:	e040      	b.n	8005598 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d023      	beq.n	8005566 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800551e:	4b8c      	ldr	r3, [pc, #560]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a8b      	ldr	r2, [pc, #556]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552a:	f7fd fae1 	bl	8002af0 <HAL_GetTick>
 800552e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005532:	f7fd fadd 	bl	8002af0 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e269      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005544:	4b82      	ldr	r3, [pc, #520]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005550:	4b7f      	ldr	r3, [pc, #508]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	061b      	lsls	r3, r3, #24
 800555e:	497c      	ldr	r1, [pc, #496]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005560:	4313      	orrs	r3, r2
 8005562:	604b      	str	r3, [r1, #4]
 8005564:	e018      	b.n	8005598 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005566:	4b7a      	ldr	r3, [pc, #488]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a79      	ldr	r2, [pc, #484]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 800556c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005572:	f7fd fabd 	bl	8002af0 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005578:	e008      	b.n	800558c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800557a:	f7fd fab9 	bl	8002af0 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	2b02      	cmp	r3, #2
 8005586:	d901      	bls.n	800558c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e245      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800558c:	4b70      	ldr	r3, [pc, #448]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f0      	bne.n	800557a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d03c      	beq.n	800561e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01c      	beq.n	80055e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ac:	4b68      	ldr	r3, [pc, #416]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b2:	4a67      	ldr	r2, [pc, #412]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80055b4:	f043 0301 	orr.w	r3, r3, #1
 80055b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055bc:	f7fd fa98 	bl	8002af0 <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fd fa94 	bl	8002af0 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e220      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d6:	4b5e      	ldr	r3, [pc, #376]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80055d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d0ef      	beq.n	80055c4 <HAL_RCC_OscConfig+0x3ec>
 80055e4:	e01b      	b.n	800561e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e6:	4b5a      	ldr	r3, [pc, #360]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80055e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ec:	4a58      	ldr	r2, [pc, #352]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f6:	f7fd fa7b 	bl	8002af0 <HAL_GetTick>
 80055fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fe:	f7fd fa77 	bl	8002af0 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e203      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005610:	4b4f      	ldr	r3, [pc, #316]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1ef      	bne.n	80055fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	f000 80a6 	beq.w	8005778 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800562c:	2300      	movs	r3, #0
 800562e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005630:	4b47      	ldr	r3, [pc, #284]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10d      	bne.n	8005658 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800563c:	4b44      	ldr	r3, [pc, #272]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	4a43      	ldr	r2, [pc, #268]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005646:	6593      	str	r3, [r2, #88]	; 0x58
 8005648:	4b41      	ldr	r3, [pc, #260]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 800564a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005650:	60bb      	str	r3, [r7, #8]
 8005652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005658:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <HAL_RCC_OscConfig+0x57c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005660:	2b00      	cmp	r3, #0
 8005662:	d118      	bne.n	8005696 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005664:	4b3b      	ldr	r3, [pc, #236]	; (8005754 <HAL_RCC_OscConfig+0x57c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a3a      	ldr	r2, [pc, #232]	; (8005754 <HAL_RCC_OscConfig+0x57c>)
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005670:	f7fd fa3e 	bl	8002af0 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fd fa3a 	bl	8002af0 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e1c6      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800568a:	4b32      	ldr	r3, [pc, #200]	; (8005754 <HAL_RCC_OscConfig+0x57c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_RCC_OscConfig+0x4d8>
 800569e:	4b2c      	ldr	r3, [pc, #176]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ae:	e024      	b.n	80056fa <HAL_RCC_OscConfig+0x522>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b05      	cmp	r3, #5
 80056b6:	d110      	bne.n	80056da <HAL_RCC_OscConfig+0x502>
 80056b8:	4b25      	ldr	r3, [pc, #148]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056be:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056c0:	f043 0304 	orr.w	r3, r3, #4
 80056c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056c8:	4b21      	ldr	r3, [pc, #132]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	4a20      	ldr	r2, [pc, #128]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056d0:	f043 0301 	orr.w	r3, r3, #1
 80056d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d8:	e00f      	b.n	80056fa <HAL_RCC_OscConfig+0x522>
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056e2:	f023 0301 	bic.w	r3, r3, #1
 80056e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ea:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 80056f2:	f023 0304 	bic.w	r3, r3, #4
 80056f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005702:	f7fd f9f5 	bl	8002af0 <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005708:	e00a      	b.n	8005720 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fd f9f1 	bl	8002af0 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	f241 3288 	movw	r2, #5000	; 0x1388
 8005718:	4293      	cmp	r3, r2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e17b      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_OscConfig+0x578>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0ed      	beq.n	800570a <HAL_RCC_OscConfig+0x532>
 800572e:	e01a      	b.n	8005766 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd f9de 	bl	8002af0 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005736:	e00f      	b.n	8005758 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005738:	f7fd f9da 	bl	8002af0 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d906      	bls.n	8005758 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e164      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
 800574e:	bf00      	nop
 8005750:	40021000 	.word	0x40021000
 8005754:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005758:	4ba8      	ldr	r3, [pc, #672]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1e8      	bne.n	8005738 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005766:	7ffb      	ldrb	r3, [r7, #31]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576c:	4ba3      	ldr	r3, [pc, #652]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005770:	4aa2      	ldr	r2, [pc, #648]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005776:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	2b00      	cmp	r3, #0
 8005782:	d03c      	beq.n	80057fe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01c      	beq.n	80057c6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800578c:	4b9b      	ldr	r3, [pc, #620]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800578e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005792:	4a9a      	ldr	r2, [pc, #616]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579c:	f7fd f9a8 	bl	8002af0 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057a4:	f7fd f9a4 	bl	8002af0 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e130      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057b6:	4b91      	ldr	r3, [pc, #580]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80057b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0ef      	beq.n	80057a4 <HAL_RCC_OscConfig+0x5cc>
 80057c4:	e01b      	b.n	80057fe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057c6:	4b8d      	ldr	r3, [pc, #564]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80057c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057cc:	4a8b      	ldr	r2, [pc, #556]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d6:	f7fd f98b 	bl	8002af0 <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057dc:	e008      	b.n	80057f0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057de:	f7fd f987 	bl	8002af0 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d901      	bls.n	80057f0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e113      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f0:	4b82      	ldr	r3, [pc, #520]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80057f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1ef      	bne.n	80057de <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8107 	beq.w	8005a16 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580c:	2b02      	cmp	r3, #2
 800580e:	f040 80cb 	bne.w	80059a8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005812:	4b7a      	ldr	r3, [pc, #488]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f003 0203 	and.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	429a      	cmp	r2, r3
 8005824:	d12c      	bne.n	8005880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	3b01      	subs	r3, #1
 8005832:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d123      	bne.n	8005880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d11b      	bne.n	8005880 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d113      	bne.n	8005880 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	085b      	lsrs	r3, r3, #1
 8005864:	3b01      	subs	r3, #1
 8005866:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d109      	bne.n	8005880 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	3b01      	subs	r3, #1
 800587a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d06d      	beq.n	800595c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d068      	beq.n	8005958 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005886:	4b5d      	ldr	r3, [pc, #372]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d105      	bne.n	800589e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005892:	4b5a      	ldr	r3, [pc, #360]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0ba      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058a2:	4b56      	ldr	r3, [pc, #344]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a55      	ldr	r2, [pc, #340]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80058a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058ae:	f7fd f91f 	bl	8002af0 <HAL_GetTick>
 80058b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b6:	f7fd f91b 	bl	8002af0 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e0a7      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c8:	4b4c      	ldr	r3, [pc, #304]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1f0      	bne.n	80058b6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d4:	4b49      	ldr	r3, [pc, #292]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80058d6:	68da      	ldr	r2, [r3, #12]
 80058d8:	4b49      	ldr	r3, [pc, #292]	; (8005a00 <HAL_RCC_OscConfig+0x828>)
 80058da:	4013      	ands	r3, r2
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058e4:	3a01      	subs	r2, #1
 80058e6:	0112      	lsls	r2, r2, #4
 80058e8:	4311      	orrs	r1, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ee:	0212      	lsls	r2, r2, #8
 80058f0:	4311      	orrs	r1, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058f6:	0852      	lsrs	r2, r2, #1
 80058f8:	3a01      	subs	r2, #1
 80058fa:	0552      	lsls	r2, r2, #21
 80058fc:	4311      	orrs	r1, r2
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005902:	0852      	lsrs	r2, r2, #1
 8005904:	3a01      	subs	r2, #1
 8005906:	0652      	lsls	r2, r2, #25
 8005908:	4311      	orrs	r1, r2
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800590e:	06d2      	lsls	r2, r2, #27
 8005910:	430a      	orrs	r2, r1
 8005912:	493a      	ldr	r1, [pc, #232]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005914:	4313      	orrs	r3, r2
 8005916:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005918:	4b38      	ldr	r3, [pc, #224]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a37      	ldr	r2, [pc, #220]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800591e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005924:	4b35      	ldr	r3, [pc, #212]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	4a34      	ldr	r2, [pc, #208]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800592a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800592e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005930:	f7fd f8de 	bl	8002af0 <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005938:	f7fd f8da 	bl	8002af0 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e066      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594a:	4b2c      	ldr	r3, [pc, #176]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0f0      	beq.n	8005938 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005956:	e05e      	b.n	8005a16 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e05d      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800595c:	4b27      	ldr	r3, [pc, #156]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d156      	bne.n	8005a16 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005968:	4b24      	ldr	r3, [pc, #144]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a23      	ldr	r2, [pc, #140]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800596e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005974:	4b21      	ldr	r3, [pc, #132]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a20      	ldr	r2, [pc, #128]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800597a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800597e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005980:	f7fd f8b6 	bl	8002af0 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005988:	f7fd f8b2 	bl	8002af0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b02      	cmp	r3, #2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e03e      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599a:	4b18      	ldr	r3, [pc, #96]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f0      	beq.n	8005988 <HAL_RCC_OscConfig+0x7b0>
 80059a6:	e036      	b.n	8005a16 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	2b0c      	cmp	r3, #12
 80059ac:	d031      	beq.n	8005a12 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80059ba:	4b10      	ldr	r3, [pc, #64]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d105      	bne.n	80059d2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	4a0c      	ldr	r2, [pc, #48]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059cc:	f023 0303 	bic.w	r3, r3, #3
 80059d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80059d2:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	4a09      	ldr	r2, [pc, #36]	; (80059fc <HAL_RCC_OscConfig+0x824>)
 80059d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80059dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fd f885 	bl	8002af0 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e8:	e00c      	b.n	8005a04 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fd f881 	bl	8002af0 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d905      	bls.n	8005a04 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e00d      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
 80059fc:	40021000 	.word	0x40021000
 8005a00:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_OscConfig+0x848>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1ec      	bne.n	80059ea <HAL_RCC_OscConfig+0x812>
 8005a10:	e001      	b.n	8005a16 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	40021000 	.word	0x40021000

08005a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e10f      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b89      	ldr	r3, [pc, #548]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d910      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b86      	ldr	r3, [pc, #536]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 020f 	bic.w	r2, r3, #15
 8005a52:	4984      	ldr	r1, [pc, #528]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b82      	ldr	r3, [pc, #520]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e0f7      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8089 	beq.w	8005b8c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d133      	bne.n	8005aea <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a82:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0e4      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005a92:	f000 fa0f 	bl	8005eb4 <RCC_GetSysClockFreqFromPLLSource>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b74      	ldr	r3, [pc, #464]	; (8005c6c <HAL_RCC_ClockConfig+0x248>)
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d955      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a9e:	4b72      	ldr	r3, [pc, #456]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aaa:	4b6f      	ldr	r3, [pc, #444]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab2:	4a6d      	ldr	r2, [pc, #436]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	e044      	b.n	8005b4a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d03e      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x126>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d13a      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad4:	4b64      	ldr	r3, [pc, #400]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005adc:	4a62      	ldr	r2, [pc, #392]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ae2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	e02f      	b.n	8005b4a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af2:	4b5d      	ldr	r3, [pc, #372]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d115      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e0ac      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b0a:	4b57      	ldr	r3, [pc, #348]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e0a0      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1a:	4b53      	ldr	r3, [pc, #332]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e098      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005b2a:	f000 f8a7 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	4b4e      	ldr	r3, [pc, #312]	; (8005c6c <HAL_RCC_ClockConfig+0x248>)
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d909      	bls.n	8005b4a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3e:	4a4a      	ldr	r2, [pc, #296]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f023 0203 	bic.w	r2, r3, #3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4944      	ldr	r1, [pc, #272]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5c:	f7fc ffc8 	bl	8002af0 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	e00a      	b.n	8005b7a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b64:	f7fc ffc4 	bl	8002af0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e070      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 020c 	and.w	r2, r3, #12
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d1eb      	bne.n	8005b64 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4930      	ldr	r1, [pc, #192]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bb2:	4b2d      	ldr	r3, [pc, #180]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4a2c      	ldr	r2, [pc, #176]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bbc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d210      	bcs.n	8005bee <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f023 020f 	bic.w	r2, r3, #15
 8005bd4:	4923      	ldr	r1, [pc, #140]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bdc:	4b21      	ldr	r3, [pc, #132]	; (8005c64 <HAL_RCC_ClockConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d001      	beq.n	8005bee <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e036      	b.n	8005c5c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4918      	ldr	r1, [pc, #96]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	4910      	ldr	r1, [pc, #64]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c2c:	f000 f826 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 8005c30:	4601      	mov	r1, r0
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <HAL_RCC_ClockConfig+0x24c>)
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	fa21 f303 	lsr.w	r3, r1, r3
 8005c48:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <HAL_RCC_ClockConfig+0x250>)
 8005c4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RCC_ClockConfig+0x254>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fc fefd 	bl	8002a50 <HAL_InitTick>
 8005c56:	4603      	mov	r3, r0
 8005c58:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40022000 	.word	0x40022000
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	04c4b400 	.word	0x04c4b400
 8005c70:	0800a590 	.word	0x0800a590
 8005c74:	20000004 	.word	0x20000004
 8005c78:	2000001c 	.word	0x2000001c

08005c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	61fb      	str	r3, [r7, #28]
 8005c86:	2300      	movs	r3, #0
 8005c88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c8a:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c94:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d121      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d11e      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cb0:	4b33      	ldr	r3, [pc, #204]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d107      	bne.n	8005ccc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cbc:	4b30      	ldr	r3, [pc, #192]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc2:	0a1b      	lsrs	r3, r3, #8
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	e005      	b.n	8005cd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ccc:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	091b      	lsrs	r3, r3, #4
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cd8:	4a2a      	ldr	r2, [pc, #168]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10d      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cec:	e00a      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d102      	bne.n	8005cfa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cf4:	4b24      	ldr	r3, [pc, #144]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cf6:	61bb      	str	r3, [r7, #24]
 8005cf8:	e004      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005d02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b0c      	cmp	r3, #12
 8005d08:	d133      	bne.n	8005d72 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d002      	beq.n	8005d20 <HAL_RCC_GetSysClockFreq+0xa4>
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d003      	beq.n	8005d26 <HAL_RCC_GetSysClockFreq+0xaa>
 8005d1e:	e005      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d20:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005d22:	617b      	str	r3, [r7, #20]
      break;
 8005d24:	e005      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x110>)
 8005d28:	617b      	str	r3, [r7, #20]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	617b      	str	r3, [r7, #20]
      break;
 8005d30:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 030f 	and.w	r3, r3, #15
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	fb02 f203 	mul.w	r2, r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x104>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0e5b      	lsrs	r3, r3, #25
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	3301      	adds	r3, #1
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d72:	69bb      	ldr	r3, [r7, #24]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3724      	adds	r7, #36	; 0x24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800a5a8 	.word	0x0800a5a8
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	007a1200 	.word	0x007a1200

08005d90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d94:	4b03      	ldr	r3, [pc, #12]	; (8005da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d96:	681b      	ldr	r3, [r3, #0]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000004 	.word	0x20000004

08005da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005dac:	f7ff fff0 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005db0:	4601      	mov	r1, r0
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	4a04      	ldr	r2, [pc, #16]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dbe:	5cd3      	ldrb	r3, [r2, r3]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	0800a5a0 	.word	0x0800a5a0

08005dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dd8:	f7ff ffda 	bl	8005d90 <HAL_RCC_GetHCLKFreq>
 8005ddc:	4601      	mov	r1, r0
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	0adb      	lsrs	r3, r3, #11
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	4a04      	ldr	r2, [pc, #16]	; (8005dfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	0800a5a0 	.word	0x0800a5a0

08005e00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e0c:	4b27      	ldr	r3, [pc, #156]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e18:	f7ff f91a 	bl	8005050 <HAL_PWREx_GetVoltageRange>
 8005e1c:	6178      	str	r0, [r7, #20]
 8005e1e:	e014      	b.n	8005e4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e20:	4b22      	ldr	r3, [pc, #136]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e38:	f7ff f90a 	bl	8005050 <HAL_PWREx_GetVoltageRange>
 8005e3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e50:	d10b      	bne.n	8005e6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d913      	bls.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2ba0      	cmp	r3, #160	; 0xa0
 8005e5c:	d902      	bls.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e5e:	2302      	movs	r3, #2
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e00d      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e64:	2301      	movs	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	e00a      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6e:	d902      	bls.n	8005e76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005e70:	2302      	movs	r3, #2
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	e004      	b.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b70      	cmp	r3, #112	; 0x70
 8005e7a:	d101      	bne.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f023 020f 	bic.w	r2, r3, #15
 8005e88:	4909      	ldr	r1, [pc, #36]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 030f 	and.w	r3, r3, #15
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	40022000 	.word	0x40022000

08005eb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005ebe:	4b2d      	ldr	r3, [pc, #180]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d118      	bne.n	8005efc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eca:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d107      	bne.n	8005ee6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e005      	b.n	8005ef2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ee6:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	091b      	lsrs	r3, r3, #4
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ef2:	4a21      	ldr	r2, [pc, #132]	; (8005f78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005efa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005efc:	4b1d      	ldr	r3, [pc, #116]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d002      	beq.n	8005f12 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d003      	beq.n	8005f18 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8005f10:	e005      	b.n	8005f1e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005f14:	613b      	str	r3, [r7, #16]
    break;
 8005f16:	e005      	b.n	8005f24 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005f18:	4b19      	ldr	r3, [pc, #100]	; (8005f80 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005f1a:	613b      	str	r3, [r7, #16]
    break;
 8005f1c:	e002      	b.n	8005f24 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	613b      	str	r3, [r7, #16]
    break;
 8005f22:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f32:	4b10      	ldr	r3, [pc, #64]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	fb02 f203 	mul.w	r2, r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f48:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f4a:	4b0a      	ldr	r3, [pc, #40]	; (8005f74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	0e5b      	lsrs	r3, r3, #25
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	3301      	adds	r3, #1
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f62:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005f64:	683b      	ldr	r3, [r7, #0]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	0800a5a8 	.word	0x0800a5a8
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	007a1200 	.word	0x007a1200

08005f84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f90:	2300      	movs	r3, #0
 8005f92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d03d      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fa4:	2b40      	cmp	r3, #64	; 0x40
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005fa8:	2b40      	cmp	r3, #64	; 0x40
 8005faa:	d804      	bhi.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005fb4:	e01d      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005fb6:	2b60      	cmp	r3, #96	; 0x60
 8005fb8:	d01e      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d01c      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005fbe:	e018      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fc0:	4b86      	ldr	r3, [pc, #536]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	4a85      	ldr	r2, [pc, #532]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fcc:	e015      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fb0d 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005fde:	e00c      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3320      	adds	r3, #32
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fbf4 	bl	80067d4 <RCCEx_PLLSAI2_Config>
 8005fec:	4603      	mov	r3, r0
 8005fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8005ff6:	e000      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8005ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006000:	4b76      	ldr	r3, [pc, #472]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006006:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600e:	4973      	ldr	r1, [pc, #460]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006016:	e001      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d042      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006030:	d00f      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006036:	d805      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d011      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800603c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006040:	d017      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006042:	e01f      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006048:	d01f      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604e:	d01c      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006050:	e018      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006052:	4b62      	ldr	r3, [pc, #392]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	4a61      	ldr	r2, [pc, #388]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800605e:	e015      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	2100      	movs	r1, #0
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fac4 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006070:	e00c      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3320      	adds	r3, #32
 8006076:	2100      	movs	r1, #0
 8006078:	4618      	mov	r0, r3
 800607a:	f000 fbab 	bl	80067d4 <RCCEx_PLLSAI2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006082:	e003      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	74fb      	strb	r3, [r7, #19]
      break;
 8006088:	e000      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800608a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800608c:	7cfb      	ldrb	r3, [r7, #19]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10b      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006092:	4b52      	ldr	r3, [pc, #328]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	494e      	ldr	r1, [pc, #312]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80060a8:	e001      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060aa:	7cfb      	ldrb	r3, [r7, #19]
 80060ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 809f 	beq.w	80061fa <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060bc:	2300      	movs	r3, #0
 80060be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060c0:	4b46      	ldr	r3, [pc, #280]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00d      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d6:	4b41      	ldr	r3, [pc, #260]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	4a40      	ldr	r2, [pc, #256]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6593      	str	r3, [r2, #88]	; 0x58
 80060e2:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ee:	2301      	movs	r3, #1
 80060f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f2:	4b3b      	ldr	r3, [pc, #236]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3a      	ldr	r2, [pc, #232]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060fe:	f7fc fcf7 	bl	8002af0 <HAL_GetTick>
 8006102:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006104:	e009      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006106:	f7fc fcf3 	bl	8002af0 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d902      	bls.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	74fb      	strb	r3, [r7, #19]
        break;
 8006118:	e005      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ef      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006126:	7cfb      	ldrb	r3, [r7, #19]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d15b      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800612c:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006136:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d01f      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	429a      	cmp	r2, r3
 8006148:	d019      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800614a:	4b24      	ldr	r3, [pc, #144]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006154:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006156:	4b21      	ldr	r3, [pc, #132]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615c:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800615e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006166:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616c:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800616e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006176:	4a19      	ldr	r2, [pc, #100]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d016      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fc fcb2 	bl	8002af0 <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800618e:	e00b      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fc fcae 	bl	8002af0 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	; 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d902      	bls.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	74fb      	strb	r3, [r7, #19]
            break;
 80061a6:	e006      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0ec      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 80061b6:	7cfb      	ldrb	r3, [r7, #19]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10c      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061bc:	4b07      	ldr	r3, [pc, #28]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	4903      	ldr	r1, [pc, #12]	; (80061dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80061d4:	e008      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	74bb      	strb	r3, [r7, #18]
 80061da:	e005      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80061dc:	40021000 	.word	0x40021000
 80061e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	7cfb      	ldrb	r3, [r7, #19]
 80061e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e8:	7c7b      	ldrb	r3, [r7, #17]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d105      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ee:	4ba0      	ldr	r3, [pc, #640]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f2:	4a9f      	ldr	r2, [pc, #636]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006206:	4b9a      	ldr	r3, [pc, #616]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620c:	f023 0203 	bic.w	r2, r3, #3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	4996      	ldr	r1, [pc, #600]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006228:	4b91      	ldr	r3, [pc, #580]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f023 020c 	bic.w	r2, r3, #12
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	498e      	ldr	r1, [pc, #568]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800624a:	4b89      	ldr	r3, [pc, #548]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006258:	4985      	ldr	r1, [pc, #532]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800626c:	4b80      	ldr	r3, [pc, #512]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800627a:	497d      	ldr	r1, [pc, #500]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800628e:	4b78      	ldr	r3, [pc, #480]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800629c:	4974      	ldr	r1, [pc, #464]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062b0:	4b6f      	ldr	r3, [pc, #444]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062be:	496c      	ldr	r1, [pc, #432]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062d2:	4b67      	ldr	r3, [pc, #412]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e0:	4963      	ldr	r1, [pc, #396]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006302:	495b      	ldr	r1, [pc, #364]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006316:	4b56      	ldr	r3, [pc, #344]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	4952      	ldr	r1, [pc, #328]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006338:	4b4d      	ldr	r3, [pc, #308]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006346:	494a      	ldr	r1, [pc, #296]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800635a:	4b45      	ldr	r3, [pc, #276]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	4941      	ldr	r1, [pc, #260]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800637c:	4b3c      	ldr	r3, [pc, #240]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006382:	f023 0203 	bic.w	r2, r3, #3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	4939      	ldr	r1, [pc, #228]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d028      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800639e:	4b34      	ldr	r3, [pc, #208]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	4930      	ldr	r1, [pc, #192]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063bc:	d106      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063be:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	4a2b      	ldr	r2, [pc, #172]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c8:	60d3      	str	r3, [r2, #12]
 80063ca:	e011      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063d4:	d10c      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	2101      	movs	r1, #1
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f909 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d04d      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006404:	d108      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006406:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800640c:	4a18      	ldr	r2, [pc, #96]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006412:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006416:	e012      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800641a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006424:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006428:	4b11      	ldr	r3, [pc, #68]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006436:	490e      	ldr	r1, [pc, #56]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006446:	d106      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800644e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006452:	60d3      	str	r3, [r2, #12]
 8006454:	e020      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645e:	d109      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4a02      	ldr	r2, [pc, #8]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646a:	60d3      	str	r3, [r2, #12]
 800646c:	e014      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800646e:	bf00      	nop
 8006470:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800647c:	d10c      	bne.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3304      	adds	r3, #4
 8006482:	2101      	movs	r1, #1
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f8b5 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800648e:	7cfb      	ldrb	r3, [r7, #19]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006494:	7cfb      	ldrb	r3, [r7, #19]
 8006496:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d028      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a4:	4b4a      	ldr	r3, [pc, #296]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80064a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b2:	4947      	ldr	r1, [pc, #284]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064c2:	d106      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064c4:	4b42      	ldr	r3, [pc, #264]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4a41      	ldr	r2, [pc, #260]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80064ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064ce:	60d3      	str	r3, [r2, #12]
 80064d0:	e011      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064da:	d10c      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	2101      	movs	r1, #1
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 f886 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 80064e8:	4603      	mov	r3, r0
 80064ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80064f2:	7cfb      	ldrb	r3, [r7, #19]
 80064f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d01e      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006502:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006508:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006512:	492f      	ldr	r1, [pc, #188]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006514:	4313      	orrs	r3, r2
 8006516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006520:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006524:	d10c      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3304      	adds	r3, #4
 800652a:	2102      	movs	r1, #2
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f861 	bl	80065f4 <RCCEx_PLLSAI1_Config>
 8006532:	4603      	mov	r3, r0
 8006534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800653c:	7cfb      	ldrb	r3, [r7, #19]
 800653e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800654e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006552:	f023 0204 	bic.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800655c:	491c      	ldr	r1, [pc, #112]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006572:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006576:	f023 0218 	bic.w	r2, r3, #24
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006580:	4913      	ldr	r1, [pc, #76]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d017      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a4:	490a      	ldr	r1, [pc, #40]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065b6:	d105      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	4a04      	ldr	r2, [pc, #16]	; (80065d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80065be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80065c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40021000 	.word	0x40021000

080065d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80065d8:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a04      	ldr	r2, [pc, #16]	; (80065f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	6013      	str	r3, [r2, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40021000 	.word	0x40021000

080065f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006602:	4b70      	ldr	r3, [pc, #448]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00e      	beq.n	800662c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800660e:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0203 	and.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d103      	bne.n	8006626 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
       ||
 8006622:	2b00      	cmp	r3, #0
 8006624:	d13f      	bne.n	80066a6 <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	e03c      	b.n	80066a6 <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d00c      	beq.n	800664e <RCCEx_PLLSAI1_Config+0x5a>
 8006634:	2b03      	cmp	r3, #3
 8006636:	d013      	beq.n	8006660 <RCCEx_PLLSAI1_Config+0x6c>
 8006638:	2b01      	cmp	r3, #1
 800663a:	d120      	bne.n	800667e <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800663c:	4b61      	ldr	r3, [pc, #388]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11d      	bne.n	8006684 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800664c:	e01a      	b.n	8006684 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800664e:	4b5d      	ldr	r3, [pc, #372]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006656:	2b00      	cmp	r3, #0
 8006658:	d116      	bne.n	8006688 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800665e:	e013      	b.n	8006688 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006660:	4b58      	ldr	r3, [pc, #352]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10f      	bne.n	800668c <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800666c:	4b55      	ldr	r3, [pc, #340]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d109      	bne.n	800668c <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800667c:	e006      	b.n	800668c <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e004      	b.n	800668e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006684:	bf00      	nop
 8006686:	e002      	b.n	800668e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8006688:	bf00      	nop
 800668a:	e000      	b.n	800668e <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800668c:	bf00      	nop
    }

    if(status == HAL_OK)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006694:	4b4b      	ldr	r3, [pc, #300]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f023 0203 	bic.w	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4948      	ldr	r1, [pc, #288]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 8086 	bne.w	80067ba <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80066ae:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a44      	ldr	r2, [pc, #272]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80066b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066ba:	f7fc fa19 	bl	8002af0 <HAL_GetTick>
 80066be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066c0:	e009      	b.n	80066d6 <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066c2:	f7fc fa15 	bl	8002af0 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d902      	bls.n	80066d6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	73fb      	strb	r3, [r7, #15]
        break;
 80066d4:	e005      	b.n	80066e2 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80066d6:	4b3b      	ldr	r3, [pc, #236]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1ef      	bne.n	80066c2 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d168      	bne.n	80067ba <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d113      	bne.n	8006716 <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066ee:	4b35      	ldr	r3, [pc, #212]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	4b35      	ldr	r3, [pc, #212]	; (80067c8 <RCCEx_PLLSAI1_Config+0x1d4>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	6892      	ldr	r2, [r2, #8]
 80066fa:	0211      	lsls	r1, r2, #8
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68d2      	ldr	r2, [r2, #12]
 8006700:	06d2      	lsls	r2, r2, #27
 8006702:	4311      	orrs	r1, r2
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6852      	ldr	r2, [r2, #4]
 8006708:	3a01      	subs	r2, #1
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	430a      	orrs	r2, r1
 800670e:	492d      	ldr	r1, [pc, #180]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
 8006714:	e02d      	b.n	8006772 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d115      	bne.n	8006748 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800671c:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	4b2a      	ldr	r3, [pc, #168]	; (80067cc <RCCEx_PLLSAI1_Config+0x1d8>)
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6892      	ldr	r2, [r2, #8]
 8006728:	0211      	lsls	r1, r2, #8
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6912      	ldr	r2, [r2, #16]
 800672e:	0852      	lsrs	r2, r2, #1
 8006730:	3a01      	subs	r2, #1
 8006732:	0552      	lsls	r2, r2, #21
 8006734:	4311      	orrs	r1, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6852      	ldr	r2, [r2, #4]
 800673a:	3a01      	subs	r2, #1
 800673c:	0112      	lsls	r2, r2, #4
 800673e:	430a      	orrs	r2, r1
 8006740:	4920      	ldr	r1, [pc, #128]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
 8006746:	e014      	b.n	8006772 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006748:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800674a:	691a      	ldr	r2, [r3, #16]
 800674c:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800674e:	4013      	ands	r3, r2
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6892      	ldr	r2, [r2, #8]
 8006754:	0211      	lsls	r1, r2, #8
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6952      	ldr	r2, [r2, #20]
 800675a:	0852      	lsrs	r2, r2, #1
 800675c:	3a01      	subs	r2, #1
 800675e:	0652      	lsls	r2, r2, #25
 8006760:	4311      	orrs	r1, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6852      	ldr	r2, [r2, #4]
 8006766:	3a01      	subs	r2, #1
 8006768:	0112      	lsls	r2, r2, #4
 800676a:	430a      	orrs	r2, r1
 800676c:	4915      	ldr	r1, [pc, #84]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800676e:	4313      	orrs	r3, r2
 8006770:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006772:	4b14      	ldr	r3, [pc, #80]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 8006778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800677c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677e:	f7fc f9b7 	bl	8002af0 <HAL_GetTick>
 8006782:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006784:	e009      	b.n	800679a <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006786:	f7fc f9b3 	bl	8002af0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d902      	bls.n	800679a <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	73fb      	strb	r3, [r7, #15]
          break;
 8006798:	e005      	b.n	80067a6 <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800679a:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0ef      	beq.n	8006786 <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80067ae:	691a      	ldr	r2, [r3, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	4903      	ldr	r1, [pc, #12]	; (80067c4 <RCCEx_PLLSAI1_Config+0x1d0>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3710      	adds	r7, #16
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000
 80067c8:	07ff800f 	.word	0x07ff800f
 80067cc:	ff9f800f 	.word	0xff9f800f
 80067d0:	f9ff800f 	.word	0xf9ff800f

080067d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067e2:	4b70      	ldr	r3, [pc, #448]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80067ee:	4b6d      	ldr	r3, [pc, #436]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	f003 0203 	and.w	r2, r3, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d103      	bne.n	8006806 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
       ||
 8006802:	2b00      	cmp	r3, #0
 8006804:	d13f      	bne.n	8006886 <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	73fb      	strb	r3, [r7, #15]
 800680a:	e03c      	b.n	8006886 <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d00c      	beq.n	800682e <RCCEx_PLLSAI2_Config+0x5a>
 8006814:	2b03      	cmp	r3, #3
 8006816:	d013      	beq.n	8006840 <RCCEx_PLLSAI2_Config+0x6c>
 8006818:	2b01      	cmp	r3, #1
 800681a:	d120      	bne.n	800685e <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800681c:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11d      	bne.n	8006864 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800682c:	e01a      	b.n	8006864 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800682e:	4b5d      	ldr	r3, [pc, #372]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006836:	2b00      	cmp	r3, #0
 8006838:	d116      	bne.n	8006868 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800683e:	e013      	b.n	8006868 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006840:	4b58      	ldr	r3, [pc, #352]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10f      	bne.n	800686c <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800684c:	4b55      	ldr	r3, [pc, #340]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800685c:	e006      	b.n	800686c <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
      break;
 8006862:	e004      	b.n	800686e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006864:	bf00      	nop
 8006866:	e002      	b.n	800686e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8006868:	bf00      	nop
 800686a:	e000      	b.n	800686e <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800686c:	bf00      	nop
    }

    if(status == HAL_OK)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d108      	bne.n	8006886 <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006874:	4b4b      	ldr	r3, [pc, #300]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f023 0203 	bic.w	r2, r3, #3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4948      	ldr	r1, [pc, #288]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006882:	4313      	orrs	r3, r2
 8006884:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 8086 	bne.w	800699a <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800688e:	4b45      	ldr	r3, [pc, #276]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a44      	ldr	r2, [pc, #272]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006898:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689a:	f7fc f929 	bl	8002af0 <HAL_GetTick>
 800689e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068a0:	e009      	b.n	80068b6 <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068a2:	f7fc f925 	bl	8002af0 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d902      	bls.n	80068b6 <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	73fb      	strb	r3, [r7, #15]
        break;
 80068b4:	e005      	b.n	80068c2 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80068b6:	4b3b      	ldr	r3, [pc, #236]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1ef      	bne.n	80068a2 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d168      	bne.n	800699a <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d113      	bne.n	80068f6 <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068ce:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <RCCEx_PLLSAI2_Config+0x1d4>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6892      	ldr	r2, [r2, #8]
 80068da:	0211      	lsls	r1, r2, #8
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68d2      	ldr	r2, [r2, #12]
 80068e0:	06d2      	lsls	r2, r2, #27
 80068e2:	4311      	orrs	r1, r2
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	6852      	ldr	r2, [r2, #4]
 80068e8:	3a01      	subs	r2, #1
 80068ea:	0112      	lsls	r2, r2, #4
 80068ec:	430a      	orrs	r2, r1
 80068ee:	492d      	ldr	r1, [pc, #180]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	614b      	str	r3, [r1, #20]
 80068f4:	e02d      	b.n	8006952 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d115      	bne.n	8006928 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80068fc:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	4b2a      	ldr	r3, [pc, #168]	; (80069ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8006902:	4013      	ands	r3, r2
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6892      	ldr	r2, [r2, #8]
 8006908:	0211      	lsls	r1, r2, #8
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6912      	ldr	r2, [r2, #16]
 800690e:	0852      	lsrs	r2, r2, #1
 8006910:	3a01      	subs	r2, #1
 8006912:	0552      	lsls	r2, r2, #21
 8006914:	4311      	orrs	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6852      	ldr	r2, [r2, #4]
 800691a:	3a01      	subs	r2, #1
 800691c:	0112      	lsls	r2, r2, #4
 800691e:	430a      	orrs	r2, r1
 8006920:	4920      	ldr	r1, [pc, #128]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006922:	4313      	orrs	r3, r2
 8006924:	614b      	str	r3, [r1, #20]
 8006926:	e014      	b.n	8006952 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006928:	4b1e      	ldr	r3, [pc, #120]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	4b20      	ldr	r3, [pc, #128]	; (80069b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 800692e:	4013      	ands	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	0211      	lsls	r1, r2, #8
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6952      	ldr	r2, [r2, #20]
 800693a:	0852      	lsrs	r2, r2, #1
 800693c:	3a01      	subs	r2, #1
 800693e:	0652      	lsls	r2, r2, #25
 8006940:	4311      	orrs	r1, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6852      	ldr	r2, [r2, #4]
 8006946:	3a01      	subs	r2, #1
 8006948:	0112      	lsls	r2, r2, #4
 800694a:	430a      	orrs	r2, r1
 800694c:	4915      	ldr	r1, [pc, #84]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800694e:	4313      	orrs	r3, r2
 8006950:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006952:	4b14      	ldr	r3, [pc, #80]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800695c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695e:	f7fc f8c7 	bl	8002af0 <HAL_GetTick>
 8006962:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006964:	e009      	b.n	800697a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006966:	f7fc f8c3 	bl	8002af0 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d902      	bls.n	800697a <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	73fb      	strb	r3, [r7, #15]
          break;
 8006978:	e005      	b.n	8006986 <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800697a:	4b0a      	ldr	r3, [pc, #40]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ef      	beq.n	8006966 <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d106      	bne.n	800699a <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	4903      	ldr	r1, [pc, #12]	; (80069a4 <RCCEx_PLLSAI2_Config+0x1d0>)
 8006996:	4313      	orrs	r3, r2
 8006998:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40021000 	.word	0x40021000
 80069a8:	07ff800f 	.word	0x07ff800f
 80069ac:	ff9f800f 	.word	0xff9f800f
 80069b0:	f9ff800f 	.word	0xf9ff800f

080069b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e095      	b.n	8006af2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d108      	bne.n	80069e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d6:	d009      	beq.n	80069ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	61da      	str	r2, [r3, #28]
 80069de:	e005      	b.n	80069ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7fb fa9e 	bl	8001f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2202      	movs	r2, #2
 8006a10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a2c:	d902      	bls.n	8006a34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	e002      	b.n	8006a3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a42:	d007      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a96:	ea42 0103 	orr.w	r1, r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 0204 	and.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f003 0308 	and.w	r3, r3, #8
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006ad0:	ea42 0103 	orr.w	r1, r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b08a      	sub	sp, #40	; 0x28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	60f8      	str	r0, [r7, #12]
 8006b02:	60b9      	str	r1, [r7, #8]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_SPI_TransmitReceive+0x26>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e1fb      	b.n	8006f18 <HAL_SPI_TransmitReceive+0x41e>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b28:	f7fb ffe2 	bl	8002af0 <HAL_GetTick>
 8006b2c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b34:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006b3c:	887b      	ldrh	r3, [r7, #2]
 8006b3e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b44:	7efb      	ldrb	r3, [r7, #27]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d00e      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x6e>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b50:	d106      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d102      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x66>
 8006b5a:	7efb      	ldrb	r3, [r7, #27]
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d003      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b66:	e1cd      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d005      	beq.n	8006b7a <HAL_SPI_TransmitReceive+0x80>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <HAL_SPI_TransmitReceive+0x80>
 8006b74:	887b      	ldrh	r3, [r7, #2]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b80:	e1c0      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d003      	beq.n	8006b96 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2205      	movs	r2, #5
 8006b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	887a      	ldrh	r2, [r7, #2]
 8006ba6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	887a      	ldrh	r2, [r7, #2]
 8006bae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	887a      	ldrh	r2, [r7, #2]
 8006bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	887a      	ldrh	r2, [r7, #2]
 8006bc2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bd8:	d802      	bhi.n	8006be0 <HAL_SPI_TransmitReceive+0xe6>
 8006bda:	8a3b      	ldrh	r3, [r7, #16]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d908      	bls.n	8006bf2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bee:	605a      	str	r2, [r3, #4]
 8006bf0:	e007      	b.n	8006c02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d007      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c28:	d97c      	bls.n	8006d24 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_TransmitReceive+0x13e>
 8006c32:	8a7b      	ldrh	r3, [r7, #18]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d169      	bne.n	8006d0c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c5c:	e056      	b.n	8006d0c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d11b      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x1aa>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d016      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x1aa>
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d113      	bne.n	8006ca4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	881a      	ldrh	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	1c9a      	adds	r2, r3, #2
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d11c      	bne.n	8006cec <HAL_SPI_TransmitReceive+0x1f2>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d016      	beq.n	8006cec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	b292      	uxth	r2, r2
 8006cca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cec:	f7fb ff00 	bl	8002af0 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d807      	bhi.n	8006d0c <HAL_SPI_TransmitReceive+0x212>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d02:	d003      	beq.n	8006d0c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d0a:	e0fb      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1a3      	bne.n	8006c5e <HAL_SPI_TransmitReceive+0x164>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d19d      	bne.n	8006c5e <HAL_SPI_TransmitReceive+0x164>
 8006d22:	e0df      	b.n	8006ee4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_SPI_TransmitReceive+0x23a>
 8006d2c:	8a7b      	ldrh	r3, [r7, #18]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	f040 80cb 	bne.w	8006eca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d912      	bls.n	8006d64 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b02      	subs	r3, #2
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d62:	e0b2      	b.n	8006eca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8a:	e09e      	b.n	8006eca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d134      	bne.n	8006e04 <HAL_SPI_TransmitReceive+0x30a>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x30a>
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d12c      	bne.n	8006e04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d912      	bls.n	8006dda <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	1c9a      	adds	r2, r3, #2
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	3b02      	subs	r3, #2
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dd8:	e012      	b.n	8006e00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	7812      	ldrb	r2, [r2, #0]
 8006de6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d148      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x3aa>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d042      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d923      	bls.n	8006e72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	b292      	uxth	r2, r2
 8006e36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b02      	subs	r3, #2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d81f      	bhi.n	8006ea0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	e016      	b.n	8006ea0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f103 020c 	add.w	r2, r3, #12
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	7812      	ldrb	r2, [r2, #0]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ea4:	f7fb fe24 	bl	8002af0 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d803      	bhi.n	8006ebc <HAL_SPI_TransmitReceive+0x3c2>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eba:	d102      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x3c8>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d103      	bne.n	8006eca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ec8:	e01c      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f47f af5b 	bne.w	8006d8c <HAL_SPI_TransmitReceive+0x292>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f47f af54 	bne.w	8006d8c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f941 	bl	8007170 <SPI_EndRxTxTransaction>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2220      	movs	r2, #32
 8006efe:	661a      	str	r2, [r3, #96]	; 0x60
 8006f00:	e000      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006f02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3728      	adds	r7, #40	; 0x28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f2e:	b2db      	uxtb	r3, r3
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f4c:	f7fb fdd0 	bl	8002af0 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	1a9b      	subs	r3, r3, r2
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4413      	add	r3, r2
 8006f5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f5c:	f7fb fdc8 	bl	8002af0 <HAL_GetTick>
 8006f60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f62:	4b39      	ldr	r3, [pc, #228]	; (8007048 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	015b      	lsls	r3, r3, #5
 8006f68:	0d1b      	lsrs	r3, r3, #20
 8006f6a:	69fa      	ldr	r2, [r7, #28]
 8006f6c:	fb02 f303 	mul.w	r3, r2, r3
 8006f70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f72:	e054      	b.n	800701e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f7a:	d050      	beq.n	800701e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f7c:	f7fb fdb8 	bl	8002af0 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d902      	bls.n	8006f92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d13d      	bne.n	800700e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006faa:	d111      	bne.n	8006fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	d004      	beq.n	8006fc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbe:	d107      	bne.n	8006fd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd8:	d10f      	bne.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ff8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e017      	b.n	800703e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	3b01      	subs	r3, #1
 800701c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	bf0c      	ite	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	2300      	movne	r3, #0
 8007032:	b2db      	uxtb	r3, r3
 8007034:	461a      	mov	r2, r3
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	429a      	cmp	r2, r3
 800703a:	d19b      	bne.n	8006f74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000004 	.word	0x20000004

0800704c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800705a:	f7fb fd49 	bl	8002af0 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	4413      	add	r3, r2
 8007068:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800706a:	f7fb fd41 	bl	8002af0 <HAL_GetTick>
 800706e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007070:	4b3e      	ldr	r3, [pc, #248]	; (800716c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	4613      	mov	r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	4413      	add	r3, r2
 800707a:	00da      	lsls	r2, r3, #3
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	0d1b      	lsrs	r3, r3, #20
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
 8007086:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007088:	e062      	b.n	8007150 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007090:	d109      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	330c      	adds	r3, #12
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80070a4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ac:	d050      	beq.n	8007150 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ae:	f7fb fd1f 	bl	8002af0 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d902      	bls.n	80070c4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d13d      	bne.n	8007140 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070dc:	d111      	bne.n	8007102 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e6:	d004      	beq.n	80070f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f0:	d107      	bne.n	8007102 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007100:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800710a:	d10f      	bne.n	800712c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800712a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e010      	b.n	8007162 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3b01      	subs	r3, #1
 800714e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	4013      	ands	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d194      	bne.n	800708a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3720      	adds	r7, #32
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	20000004 	.word	0x20000004

08007170 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff ff5f 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e027      	b.n	80071f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2200      	movs	r2, #0
 80071ac:	2180      	movs	r1, #128	; 0x80
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fec4 	bl	8006f3c <SPI_WaitFlagStateUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071be:	f043 0220 	orr.w	r2, r3, #32
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e014      	b.n	80071f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f7ff ff38 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d007      	beq.n	80071f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071e6:	f043 0220 	orr.w	r2, r3, #32
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e000      	b.n	80071f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e042      	b.n	8007294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fa fed3 	bl	8001fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2224      	movs	r2, #36	; 0x24
 800722a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8c4 	bl	80073cc <UART_SetConfig>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e022      	b.n	8007294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fb86 	bl	8007968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800726a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800727a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
 800728a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc0d 	bl	8007aac <UART_CheckIdleState>
 8007292:	4603      	mov	r3, r0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4613      	mov	r3, r2
 80072aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b2:	2b20      	cmp	r3, #32
 80072b4:	f040 8084 	bne.w	80073c0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <HAL_UART_Transmit+0x28>
 80072be:	88fb      	ldrh	r3, [r7, #6]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e07c      	b.n	80073c2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_UART_Transmit+0x3a>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e075      	b.n	80073c2 <HAL_UART_Transmit+0x126>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2221      	movs	r2, #33	; 0x21
 80072ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ee:	f7fb fbff 	bl	8002af0 <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730c:	d108      	bne.n	8007320 <HAL_UART_Transmit+0x84>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	61bb      	str	r3, [r7, #24]
 800731e:	e003      	b.n	8007328 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007324:	2300      	movs	r3, #0
 8007326:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007330:	e02d      	b.n	800738e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2200      	movs	r2, #0
 800733a:	2180      	movs	r1, #128	; 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fc00 	bl	8007b42 <UART_WaitOnFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e03a      	b.n	80073c2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	881a      	ldrh	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800735e:	b292      	uxth	r2, r2
 8007360:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	3302      	adds	r3, #2
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e008      	b.n	800737c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b292      	uxth	r2, r2
 8007374:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	3301      	adds	r3, #1
 800737a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1cb      	bne.n	8007332 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2140      	movs	r1, #64	; 0x40
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fbcc 	bl	8007b42 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e006      	b.n	80073c2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	e000      	b.n	80073c2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073cc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80073d0:	b088      	sub	sp, #32
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4bb1      	ldr	r3, [pc, #708]	; (80076c0 <UART_SetConfig+0x2f4>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	430b      	orrs	r3, r1
 8007404:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4aa7      	ldr	r2, [pc, #668]	; (80076c4 <UART_SetConfig+0x2f8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d004      	beq.n	8007436 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	69fa      	ldr	r2, [r7, #28]
 8007432:	4313      	orrs	r3, r2
 8007434:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007440:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	69f9      	ldr	r1, [r7, #28]
 800744a:	430b      	orrs	r3, r1
 800744c:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	f023 010f 	bic.w	r1, r3, #15
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a97      	ldr	r2, [pc, #604]	; (80076c8 <UART_SetConfig+0x2fc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d122      	bne.n	80074b4 <UART_SetConfig+0xe8>
 800746e:	4b97      	ldr	r3, [pc, #604]	; (80076cc <UART_SetConfig+0x300>)
 8007470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	2b03      	cmp	r3, #3
 800747a:	d817      	bhi.n	80074ac <UART_SetConfig+0xe0>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0xb8>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	08007495 	.word	0x08007495
 8007488:	080074a1 	.word	0x080074a1
 800748c:	0800749b 	.word	0x0800749b
 8007490:	080074a7 	.word	0x080074a7
 8007494:	2301      	movs	r3, #1
 8007496:	76fb      	strb	r3, [r7, #27]
 8007498:	e0e8      	b.n	800766c <UART_SetConfig+0x2a0>
 800749a:	2302      	movs	r3, #2
 800749c:	76fb      	strb	r3, [r7, #27]
 800749e:	e0e5      	b.n	800766c <UART_SetConfig+0x2a0>
 80074a0:	2304      	movs	r3, #4
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e0e2      	b.n	800766c <UART_SetConfig+0x2a0>
 80074a6:	2308      	movs	r3, #8
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e0df      	b.n	800766c <UART_SetConfig+0x2a0>
 80074ac:	2310      	movs	r3, #16
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	bf00      	nop
 80074b2:	e0db      	b.n	800766c <UART_SetConfig+0x2a0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a85      	ldr	r2, [pc, #532]	; (80076d0 <UART_SetConfig+0x304>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d134      	bne.n	8007528 <UART_SetConfig+0x15c>
 80074be:	4b83      	ldr	r3, [pc, #524]	; (80076cc <UART_SetConfig+0x300>)
 80074c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c4:	f003 030c 	and.w	r3, r3, #12
 80074c8:	2b0c      	cmp	r3, #12
 80074ca:	d829      	bhi.n	8007520 <UART_SetConfig+0x154>
 80074cc:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <UART_SetConfig+0x108>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007509 	.word	0x08007509
 80074d8:	08007521 	.word	0x08007521
 80074dc:	08007521 	.word	0x08007521
 80074e0:	08007521 	.word	0x08007521
 80074e4:	08007515 	.word	0x08007515
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007521 	.word	0x08007521
 80074f4:	0800750f 	.word	0x0800750f
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007521 	.word	0x08007521
 8007504:	0800751b 	.word	0x0800751b
 8007508:	2300      	movs	r3, #0
 800750a:	76fb      	strb	r3, [r7, #27]
 800750c:	e0ae      	b.n	800766c <UART_SetConfig+0x2a0>
 800750e:	2302      	movs	r3, #2
 8007510:	76fb      	strb	r3, [r7, #27]
 8007512:	e0ab      	b.n	800766c <UART_SetConfig+0x2a0>
 8007514:	2304      	movs	r3, #4
 8007516:	76fb      	strb	r3, [r7, #27]
 8007518:	e0a8      	b.n	800766c <UART_SetConfig+0x2a0>
 800751a:	2308      	movs	r3, #8
 800751c:	76fb      	strb	r3, [r7, #27]
 800751e:	e0a5      	b.n	800766c <UART_SetConfig+0x2a0>
 8007520:	2310      	movs	r3, #16
 8007522:	76fb      	strb	r3, [r7, #27]
 8007524:	bf00      	nop
 8007526:	e0a1      	b.n	800766c <UART_SetConfig+0x2a0>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a69      	ldr	r2, [pc, #420]	; (80076d4 <UART_SetConfig+0x308>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d120      	bne.n	8007574 <UART_SetConfig+0x1a8>
 8007532:	4b66      	ldr	r3, [pc, #408]	; (80076cc <UART_SetConfig+0x300>)
 8007534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007538:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800753c:	2b10      	cmp	r3, #16
 800753e:	d00f      	beq.n	8007560 <UART_SetConfig+0x194>
 8007540:	2b10      	cmp	r3, #16
 8007542:	d802      	bhi.n	800754a <UART_SetConfig+0x17e>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d005      	beq.n	8007554 <UART_SetConfig+0x188>
 8007548:	e010      	b.n	800756c <UART_SetConfig+0x1a0>
 800754a:	2b20      	cmp	r3, #32
 800754c:	d005      	beq.n	800755a <UART_SetConfig+0x18e>
 800754e:	2b30      	cmp	r3, #48	; 0x30
 8007550:	d009      	beq.n	8007566 <UART_SetConfig+0x19a>
 8007552:	e00b      	b.n	800756c <UART_SetConfig+0x1a0>
 8007554:	2300      	movs	r3, #0
 8007556:	76fb      	strb	r3, [r7, #27]
 8007558:	e088      	b.n	800766c <UART_SetConfig+0x2a0>
 800755a:	2302      	movs	r3, #2
 800755c:	76fb      	strb	r3, [r7, #27]
 800755e:	e085      	b.n	800766c <UART_SetConfig+0x2a0>
 8007560:	2304      	movs	r3, #4
 8007562:	76fb      	strb	r3, [r7, #27]
 8007564:	e082      	b.n	800766c <UART_SetConfig+0x2a0>
 8007566:	2308      	movs	r3, #8
 8007568:	76fb      	strb	r3, [r7, #27]
 800756a:	e07f      	b.n	800766c <UART_SetConfig+0x2a0>
 800756c:	2310      	movs	r3, #16
 800756e:	76fb      	strb	r3, [r7, #27]
 8007570:	bf00      	nop
 8007572:	e07b      	b.n	800766c <UART_SetConfig+0x2a0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a57      	ldr	r2, [pc, #348]	; (80076d8 <UART_SetConfig+0x30c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d120      	bne.n	80075c0 <UART_SetConfig+0x1f4>
 800757e:	4b53      	ldr	r3, [pc, #332]	; (80076cc <UART_SetConfig+0x300>)
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007584:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	d00f      	beq.n	80075ac <UART_SetConfig+0x1e0>
 800758c:	2b40      	cmp	r3, #64	; 0x40
 800758e:	d802      	bhi.n	8007596 <UART_SetConfig+0x1ca>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <UART_SetConfig+0x1d4>
 8007594:	e010      	b.n	80075b8 <UART_SetConfig+0x1ec>
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d005      	beq.n	80075a6 <UART_SetConfig+0x1da>
 800759a:	2bc0      	cmp	r3, #192	; 0xc0
 800759c:	d009      	beq.n	80075b2 <UART_SetConfig+0x1e6>
 800759e:	e00b      	b.n	80075b8 <UART_SetConfig+0x1ec>
 80075a0:	2300      	movs	r3, #0
 80075a2:	76fb      	strb	r3, [r7, #27]
 80075a4:	e062      	b.n	800766c <UART_SetConfig+0x2a0>
 80075a6:	2302      	movs	r3, #2
 80075a8:	76fb      	strb	r3, [r7, #27]
 80075aa:	e05f      	b.n	800766c <UART_SetConfig+0x2a0>
 80075ac:	2304      	movs	r3, #4
 80075ae:	76fb      	strb	r3, [r7, #27]
 80075b0:	e05c      	b.n	800766c <UART_SetConfig+0x2a0>
 80075b2:	2308      	movs	r3, #8
 80075b4:	76fb      	strb	r3, [r7, #27]
 80075b6:	e059      	b.n	800766c <UART_SetConfig+0x2a0>
 80075b8:	2310      	movs	r3, #16
 80075ba:	76fb      	strb	r3, [r7, #27]
 80075bc:	bf00      	nop
 80075be:	e055      	b.n	800766c <UART_SetConfig+0x2a0>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a45      	ldr	r2, [pc, #276]	; (80076dc <UART_SetConfig+0x310>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d124      	bne.n	8007614 <UART_SetConfig+0x248>
 80075ca:	4b40      	ldr	r3, [pc, #256]	; (80076cc <UART_SetConfig+0x300>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d8:	d012      	beq.n	8007600 <UART_SetConfig+0x234>
 80075da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075de:	d802      	bhi.n	80075e6 <UART_SetConfig+0x21a>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d007      	beq.n	80075f4 <UART_SetConfig+0x228>
 80075e4:	e012      	b.n	800760c <UART_SetConfig+0x240>
 80075e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ea:	d006      	beq.n	80075fa <UART_SetConfig+0x22e>
 80075ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075f0:	d009      	beq.n	8007606 <UART_SetConfig+0x23a>
 80075f2:	e00b      	b.n	800760c <UART_SetConfig+0x240>
 80075f4:	2300      	movs	r3, #0
 80075f6:	76fb      	strb	r3, [r7, #27]
 80075f8:	e038      	b.n	800766c <UART_SetConfig+0x2a0>
 80075fa:	2302      	movs	r3, #2
 80075fc:	76fb      	strb	r3, [r7, #27]
 80075fe:	e035      	b.n	800766c <UART_SetConfig+0x2a0>
 8007600:	2304      	movs	r3, #4
 8007602:	76fb      	strb	r3, [r7, #27]
 8007604:	e032      	b.n	800766c <UART_SetConfig+0x2a0>
 8007606:	2308      	movs	r3, #8
 8007608:	76fb      	strb	r3, [r7, #27]
 800760a:	e02f      	b.n	800766c <UART_SetConfig+0x2a0>
 800760c:	2310      	movs	r3, #16
 800760e:	76fb      	strb	r3, [r7, #27]
 8007610:	bf00      	nop
 8007612:	e02b      	b.n	800766c <UART_SetConfig+0x2a0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <UART_SetConfig+0x2f8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d124      	bne.n	8007668 <UART_SetConfig+0x29c>
 800761e:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <UART_SetConfig+0x300>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762c:	d012      	beq.n	8007654 <UART_SetConfig+0x288>
 800762e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007632:	d802      	bhi.n	800763a <UART_SetConfig+0x26e>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d007      	beq.n	8007648 <UART_SetConfig+0x27c>
 8007638:	e012      	b.n	8007660 <UART_SetConfig+0x294>
 800763a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763e:	d006      	beq.n	800764e <UART_SetConfig+0x282>
 8007640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007644:	d009      	beq.n	800765a <UART_SetConfig+0x28e>
 8007646:	e00b      	b.n	8007660 <UART_SetConfig+0x294>
 8007648:	2300      	movs	r3, #0
 800764a:	76fb      	strb	r3, [r7, #27]
 800764c:	e00e      	b.n	800766c <UART_SetConfig+0x2a0>
 800764e:	2302      	movs	r3, #2
 8007650:	76fb      	strb	r3, [r7, #27]
 8007652:	e00b      	b.n	800766c <UART_SetConfig+0x2a0>
 8007654:	2304      	movs	r3, #4
 8007656:	76fb      	strb	r3, [r7, #27]
 8007658:	e008      	b.n	800766c <UART_SetConfig+0x2a0>
 800765a:	2308      	movs	r3, #8
 800765c:	76fb      	strb	r3, [r7, #27]
 800765e:	e005      	b.n	800766c <UART_SetConfig+0x2a0>
 8007660:	2310      	movs	r3, #16
 8007662:	76fb      	strb	r3, [r7, #27]
 8007664:	bf00      	nop
 8007666:	e001      	b.n	800766c <UART_SetConfig+0x2a0>
 8007668:	2310      	movs	r3, #16
 800766a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <UART_SetConfig+0x2f8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	f040 80a1 	bne.w	80077ba <UART_SetConfig+0x3ee>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007678:	7efb      	ldrb	r3, [r7, #27]
 800767a:	2b08      	cmp	r3, #8
 800767c:	d836      	bhi.n	80076ec <UART_SetConfig+0x320>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <UART_SetConfig+0x2b8>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076ed 	.word	0x080076ed
 800768c:	080076b1 	.word	0x080076b1
 8007690:	080076ed 	.word	0x080076ed
 8007694:	080076b7 	.word	0x080076b7
 8007698:	080076ed 	.word	0x080076ed
 800769c:	080076ed 	.word	0x080076ed
 80076a0:	080076ed 	.word	0x080076ed
 80076a4:	080076e5 	.word	0x080076e5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a8:	f7fe fb7e 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 80076ac:	6178      	str	r0, [r7, #20]
        break;
 80076ae:	e022      	b.n	80076f6 <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b0:	4b0b      	ldr	r3, [pc, #44]	; (80076e0 <UART_SetConfig+0x314>)
 80076b2:	617b      	str	r3, [r7, #20]
        break;
 80076b4:	e01f      	b.n	80076f6 <UART_SetConfig+0x32a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b6:	f7fe fae1 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 80076ba:	6178      	str	r0, [r7, #20]
        break;
 80076bc:	e01b      	b.n	80076f6 <UART_SetConfig+0x32a>
 80076be:	bf00      	nop
 80076c0:	cfff69f3 	.word	0xcfff69f3
 80076c4:	40008000 	.word	0x40008000
 80076c8:	40013800 	.word	0x40013800
 80076cc:	40021000 	.word	0x40021000
 80076d0:	40004400 	.word	0x40004400
 80076d4:	40004800 	.word	0x40004800
 80076d8:	40004c00 	.word	0x40004c00
 80076dc:	40005000 	.word	0x40005000
 80076e0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e8:	617b      	str	r3, [r7, #20]
        break;
 80076ea:	e004      	b.n	80076f6 <UART_SetConfig+0x32a>
      default:
        pclk = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	76bb      	strb	r3, [r7, #26]
        break;
 80076f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 811d 	beq.w	8007938 <UART_SetConfig+0x56c>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	4a97      	ldr	r2, [pc, #604]	; (8007960 <UART_SetConfig+0x594>)
 8007704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007708:	461a      	mov	r2, r3
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007710:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	4613      	mov	r3, r2
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	4413      	add	r3, r2
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	429a      	cmp	r2, r3
 8007720:	d305      	bcc.n	800772e <UART_SetConfig+0x362>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d902      	bls.n	8007734 <UART_SetConfig+0x368>
      {
        ret = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	76bb      	strb	r3, [r7, #26]
 8007732:	e101      	b.n	8007938 <UART_SetConfig+0x56c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4618      	mov	r0, r3
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	4a87      	ldr	r2, [pc, #540]	; (8007960 <UART_SetConfig+0x594>)
 8007742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007746:	b29b      	uxth	r3, r3
 8007748:	f04f 0400 	mov.w	r4, #0
 800774c:	461a      	mov	r2, r3
 800774e:	4623      	mov	r3, r4
 8007750:	f7f8 fda6 	bl	80002a0 <__aeabi_uldivmod>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4619      	mov	r1, r3
 800775a:	4622      	mov	r2, r4
 800775c:	f04f 0300 	mov.w	r3, #0
 8007760:	f04f 0400 	mov.w	r4, #0
 8007764:	0214      	lsls	r4, r2, #8
 8007766:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800776a:	020b      	lsls	r3, r1, #8
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	6852      	ldr	r2, [r2, #4]
 8007770:	0852      	lsrs	r2, r2, #1
 8007772:	4611      	mov	r1, r2
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	eb13 0b01 	adds.w	fp, r3, r1
 800777c:	eb44 0c02 	adc.w	ip, r4, r2
 8007780:	4658      	mov	r0, fp
 8007782:	4661      	mov	r1, ip
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f04f 0400 	mov.w	r4, #0
 800778c:	461a      	mov	r2, r3
 800778e:	4623      	mov	r3, r4
 8007790:	f7f8 fd86 	bl	80002a0 <__aeabi_uldivmod>
 8007794:	4603      	mov	r3, r0
 8007796:	460c      	mov	r4, r1
 8007798:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077a0:	d308      	bcc.n	80077b4 <UART_SetConfig+0x3e8>
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a8:	d204      	bcs.n	80077b4 <UART_SetConfig+0x3e8>
        {
          huart->Instance->BRR = usartdiv;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	60da      	str	r2, [r3, #12]
 80077b2:	e0c1      	b.n	8007938 <UART_SetConfig+0x56c>
        }
        else
        {
          ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	76bb      	strb	r3, [r7, #26]
 80077b8:	e0be      	b.n	8007938 <UART_SetConfig+0x56c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c2:	d164      	bne.n	800788e <UART_SetConfig+0x4c2>
  {
    switch (clocksource)
 80077c4:	7efb      	ldrb	r3, [r7, #27]
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d827      	bhi.n	800781a <UART_SetConfig+0x44e>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <UART_SetConfig+0x404>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fe fad8 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 80077f8:	6178      	str	r0, [r7, #20]
        break;
 80077fa:	e013      	b.n	8007824 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fe faea 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 8007800:	6178      	str	r0, [r7, #20]
        break;
 8007802:	e00f      	b.n	8007824 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b57      	ldr	r3, [pc, #348]	; (8007964 <UART_SetConfig+0x598>)
 8007806:	617b      	str	r3, [r7, #20]
        break;
 8007808:	e00c      	b.n	8007824 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fe fa37 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 800780e:	6178      	str	r0, [r7, #20]
        break;
 8007810:	e008      	b.n	8007824 <UART_SetConfig+0x458>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	617b      	str	r3, [r7, #20]
        break;
 8007818:	e004      	b.n	8007824 <UART_SetConfig+0x458>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	76bb      	strb	r3, [r7, #26]
        break;
 8007822:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 8086 	beq.w	8007938 <UART_SetConfig+0x56c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	4a4b      	ldr	r2, [pc, #300]	; (8007960 <UART_SetConfig+0x594>)
 8007832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007836:	461a      	mov	r2, r3
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	fbb3 f3f2 	udiv	r3, r3, r2
 800783e:	005a      	lsls	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	441a      	add	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007850:	b29b      	uxth	r3, r3
 8007852:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	2b0f      	cmp	r3, #15
 8007858:	d916      	bls.n	8007888 <UART_SetConfig+0x4bc>
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007860:	d212      	bcs.n	8007888 <UART_SetConfig+0x4bc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f023 030f 	bic.w	r3, r3, #15
 800786a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	085b      	lsrs	r3, r3, #1
 8007870:	b29b      	uxth	r3, r3
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	b29a      	uxth	r2, r3
 8007878:	89fb      	ldrh	r3, [r7, #14]
 800787a:	4313      	orrs	r3, r2
 800787c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	89fa      	ldrh	r2, [r7, #14]
 8007884:	60da      	str	r2, [r3, #12]
 8007886:	e057      	b.n	8007938 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	76bb      	strb	r3, [r7, #26]
 800788c:	e054      	b.n	8007938 <UART_SetConfig+0x56c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800788e:	7efb      	ldrb	r3, [r7, #27]
 8007890:	2b08      	cmp	r3, #8
 8007892:	d828      	bhi.n	80078e6 <UART_SetConfig+0x51a>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0x4d0>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078c9 	.word	0x080078c9
 80078a4:	080078d1 	.word	0x080078d1
 80078a8:	080078e7 	.word	0x080078e7
 80078ac:	080078d7 	.word	0x080078d7
 80078b0:	080078e7 	.word	0x080078e7
 80078b4:	080078e7 	.word	0x080078e7
 80078b8:	080078e7 	.word	0x080078e7
 80078bc:	080078df 	.word	0x080078df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fe fa72 	bl	8005da8 <HAL_RCC_GetPCLK1Freq>
 80078c4:	6178      	str	r0, [r7, #20]
        break;
 80078c6:	e013      	b.n	80078f0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078c8:	f7fe fa84 	bl	8005dd4 <HAL_RCC_GetPCLK2Freq>
 80078cc:	6178      	str	r0, [r7, #20]
        break;
 80078ce:	e00f      	b.n	80078f0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078d0:	4b24      	ldr	r3, [pc, #144]	; (8007964 <UART_SetConfig+0x598>)
 80078d2:	617b      	str	r3, [r7, #20]
        break;
 80078d4:	e00c      	b.n	80078f0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078d6:	f7fe f9d1 	bl	8005c7c <HAL_RCC_GetSysClockFreq>
 80078da:	6178      	str	r0, [r7, #20]
        break;
 80078dc:	e008      	b.n	80078f0 <UART_SetConfig+0x524>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	617b      	str	r3, [r7, #20]
        break;
 80078e4:	e004      	b.n	80078f0 <UART_SetConfig+0x524>
      default:
        pclk = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	76bb      	strb	r3, [r7, #26]
        break;
 80078ee:	bf00      	nop
    }

    if (pclk != 0U)
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d020      	beq.n	8007938 <UART_SetConfig+0x56c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	4a19      	ldr	r2, [pc, #100]	; (8007960 <UART_SetConfig+0x594>)
 80078fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007900:	461a      	mov	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	fbb3 f2f2 	udiv	r2, r3, r2
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	085b      	lsrs	r3, r3, #1
 800790e:	441a      	add	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	b29b      	uxth	r3, r3
 800791a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	d908      	bls.n	8007934 <UART_SetConfig+0x568>
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007928:	d204      	bcs.n	8007934 <UART_SetConfig+0x568>
      {
        huart->Instance->BRR = usartdiv;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	60da      	str	r2, [r3, #12]
 8007932:	e001      	b.n	8007938 <UART_SetConfig+0x56c>
      }
      else
      {
        ret = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007954:	7ebb      	ldrb	r3, [r7, #26]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007960:	0800a5ec 	.word	0x0800a5ec
 8007964:	00f42400 	.word	0x00f42400

08007968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a66:	d10a      	bne.n	8007a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	605a      	str	r2, [r3, #4]
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007abc:	f7fb f818 	bl	8002af0 <HAL_GetTick>
 8007ac0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d10e      	bne.n	8007aee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f82f 	bl	8007b42 <UART_WaitOnFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e025      	b.n	8007b3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d10e      	bne.n	8007b1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f819 	bl	8007b42 <UART_WaitOnFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e00f      	b.n	8007b3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	60f8      	str	r0, [r7, #12]
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	603b      	str	r3, [r7, #0]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b52:	e062      	b.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b5a:	d05e      	beq.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5c:	f7fa ffc8 	bl	8002af0 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d302      	bcc.n	8007b72 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d11d      	bne.n	8007bae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b80:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0201 	bic.w	r2, r2, #1
 8007b90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e045      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02e      	beq.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bca:	d126      	bne.n	8007c1a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007be4:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e00f      	b.n	8007c3a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69da      	ldr	r2, [r3, #28]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4013      	ands	r3, r2
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d08d      	beq.n	8007b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e027      	b.n	8007ca8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0201 	bic.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e02d      	b.n	8007d28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2224      	movs	r2, #36	; 0x24
 8007cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0201 	bic.w	r2, r2, #1
 8007cf2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	683a      	ldr	r2, [r7, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f84f 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e02d      	b.n	8007da4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2224      	movs	r2, #36	; 0x24
 8007d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0201 	bic.w	r2, r2, #1
 8007d6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f811 	bl	8007dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2220      	movs	r2, #32
 8007d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d108      	bne.n	8007dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007dcc:	e031      	b.n	8007e32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007dce:	2308      	movs	r3, #8
 8007dd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	0e5b      	lsrs	r3, r3, #25
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	0f5b      	lsrs	r3, r3, #29
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
 8007df8:	7b3a      	ldrb	r2, [r7, #12]
 8007dfa:	4911      	ldr	r1, [pc, #68]	; (8007e40 <UARTEx_SetNbDataToProcess+0x94>)
 8007dfc:	5c8a      	ldrb	r2, [r1, r2]
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e02:	7b3a      	ldrb	r2, [r7, #12]
 8007e04:	490f      	ldr	r1, [pc, #60]	; (8007e44 <UARTEx_SetNbDataToProcess+0x98>)
 8007e06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e08:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	7b7a      	ldrb	r2, [r7, #13]
 8007e18:	4909      	ldr	r1, [pc, #36]	; (8007e40 <UARTEx_SetNbDataToProcess+0x94>)
 8007e1a:	5c8a      	ldrb	r2, [r1, r2]
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e20:	7b7a      	ldrb	r2, [r7, #13]
 8007e22:	4908      	ldr	r1, [pc, #32]	; (8007e44 <UARTEx_SetNbDataToProcess+0x98>)
 8007e24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	0800a604 	.word	0x0800a604
 8007e44:	0800a60c 	.word	0x0800a60c

08007e48 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08c      	sub	sp, #48	; 0x30
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4603      	mov	r3, r0
 8007e52:	71fb      	strb	r3, [r7, #7]
 8007e54:	460b      	mov	r3, r1
 8007e56:	71bb      	strb	r3, [r7, #6]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007e60:	79bb      	ldrb	r3, [r7, #6]
 8007e62:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007e64:	797b      	ldrb	r3, [r7, #5]
 8007e66:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fc60 	bl	8009736 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007e76:	f107 0318 	add.w	r3, r7, #24
 8007e7a:	2218      	movs	r2, #24
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f001 fc59 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007e84:	233f      	movs	r3, #63	; 0x3f
 8007e86:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007e88:	238a      	movs	r3, #138	; 0x8a
 8007e8a:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007e8c:	f107 0314 	add.w	r3, r7, #20
 8007e90:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007e92:	2303      	movs	r3, #3
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007e96:	f107 030c 	add.w	r3, r7, #12
 8007e9a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007e9c:	2307      	movs	r3, #7
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007ea0:	f107 0318 	add.w	r3, r7, #24
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 ffec 	bl	8008e84 <hci_send_req>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da01      	bge.n	8007eb6 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	e014      	b.n	8007ee0 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007eb6:	7b3b      	ldrb	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007ebc:	7b3b      	ldrb	r3, [r7, #12]
 8007ebe:	e00f      	b.n	8007ee0 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007ec0:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007eca:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed2:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007ed4:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	; 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08e      	sub	sp, #56	; 0x38
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	607a      	str	r2, [r7, #4]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007efc:	f107 0314 	add.w	r3, r7, #20
 8007f00:	2207      	movs	r2, #7
 8007f02:	2100      	movs	r1, #0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 fc16 	bl	8009736 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007f0a:	f107 0320 	add.w	r3, r7, #32
 8007f0e:	2218      	movs	r2, #24
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fc0f 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007f18:	233f      	movs	r3, #63	; 0x3f
 8007f1a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8007f1c:	238a      	movs	r3, #138	; 0x8a
 8007f1e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8007f20:	f107 031c 	add.w	r3, r7, #28
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8007f26:	2301      	movs	r3, #1
 8007f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8007f30:	2307      	movs	r3, #7
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007f34:	f107 0320 	add.w	r3, r7, #32
 8007f38:	2100      	movs	r1, #0
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f000 ffa2 	bl	8008e84 <hci_send_req>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	da01      	bge.n	8007f4a <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8007f46:	23ff      	movs	r3, #255	; 0xff
 8007f48:	e014      	b.n	8007f74 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8007f4a:	7d3b      	ldrb	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8007f50:	7d3b      	ldrb	r3, [r7, #20]
 8007f52:	e00f      	b.n	8007f74 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007f54:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007f5e:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007f68:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3738      	adds	r7, #56	; 0x38
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b095      	sub	sp, #84	; 0x54
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4604      	mov	r4, r0
 8007f84:	4608      	mov	r0, r1
 8007f86:	4611      	mov	r1, r2
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4623      	mov	r3, r4
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	4603      	mov	r3, r0
 8007f90:	80bb      	strh	r3, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	807b      	strh	r3, [r7, #2]
 8007f96:	4613      	mov	r3, r2
 8007f98:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8007fa0:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007fa4:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8007fa8:	4413      	add	r3, r2
 8007faa:	330e      	adds	r3, #14
 8007fac:	2b28      	cmp	r3, #40	; 0x28
 8007fae:	d901      	bls.n	8007fb4 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8007fb0:	2342      	movs	r3, #66	; 0x42
 8007fb2:	e0ce      	b.n	8008152 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8007fb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fb8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fbc:	4413      	add	r3, r2
 8007fbe:	79fa      	ldrb	r2, [r7, #7]
 8007fc0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007fc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fc8:	3301      	adds	r3, #1
 8007fca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8007fce:	88bb      	ldrh	r3, [r7, #4]
 8007fd0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8007fd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fd6:	f107 0208 	add.w	r2, r7, #8
 8007fda:	4413      	add	r3, r2
 8007fdc:	88ba      	ldrh	r2, [r7, #4]
 8007fde:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007fe0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8007fea:	887b      	ldrh	r3, [r7, #2]
 8007fec:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8007fee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007ff2:	f107 0208 	add.w	r2, r7, #8
 8007ff6:	4413      	add	r3, r2
 8007ff8:	887a      	ldrh	r2, [r7, #2]
 8007ffa:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007ffc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008000:	3302      	adds	r3, #2
 8008002:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8008006:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800800a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800800e:	4413      	add	r3, r2
 8008010:	79ba      	ldrb	r2, [r7, #6]
 8008012:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008016:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800801a:	3301      	adds	r3, #1
 800801c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8008020:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008024:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008028:	4413      	add	r3, r2
 800802a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800802e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008032:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008036:	3301      	adds	r3, #1
 8008038:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800803c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008040:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008044:	4413      	add	r3, r2
 8008046:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 800804a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800804e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008052:	3301      	adds	r3, #1
 8008054:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8008058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800805c:	f107 0208 	add.w	r2, r7, #8
 8008060:	4413      	add	r3, r2
 8008062:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8008066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008068:	4618      	mov	r0, r3
 800806a:	f001 fb59 	bl	8009720 <memcpy>
  indx +=  LocalNameLen;
 800806e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008072:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008076:	4413      	add	r3, r2
 8008078:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 800807c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008080:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8008084:	4413      	add	r3, r2
 8008086:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800808a:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800808e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008092:	3301      	adds	r3, #1
 8008094:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008098:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800809c:	f107 0208 	add.w	r2, r7, #8
 80080a0:	4413      	add	r3, r2
 80080a2:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80080a6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80080a8:	4618      	mov	r0, r3
 80080aa:	f001 fb39 	bl	8009720 <memcpy>
  indx +=  ServiceUUIDLen;  
 80080ae:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80080b2:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80080b6:	4413      	add	r3, r2
 80080b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80080bc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80080c0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80080c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080c8:	f107 0208 	add.w	r2, r7, #8
 80080cc:	4413      	add	r3, r2
 80080ce:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80080d2:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80080d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080d8:	3302      	adds	r3, #2
 80080da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 80080de:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80080e2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80080e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080ea:	f107 0208 	add.w	r2, r7, #8
 80080ee:	4413      	add	r3, r2
 80080f0:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80080f4:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 80080f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080fa:	3302      	adds	r3, #2
 80080fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008100:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008104:	2218      	movs	r2, #24
 8008106:	2100      	movs	r1, #0
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fb14 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800810e:	233f      	movs	r3, #63	; 0x3f
 8008110:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008112:	2383      	movs	r3, #131	; 0x83
 8008114:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800811c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008120:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8008122:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8008126:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8008128:	2301      	movs	r3, #1
 800812a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800812c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fea6 	bl	8008e84 <hci_send_req>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	da01      	bge.n	8008142 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 800813e:	23ff      	movs	r3, #255	; 0xff
 8008140:	e007      	b.n	8008152 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 8008142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <aci_gap_set_discoverable+0x1d4>
    return status;
 800814a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800814e:	e000      	b.n	8008152 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3754      	adds	r7, #84	; 0x54
 8008156:	46bd      	mov	sp, r7
 8008158:	bd90      	pop	{r4, r7, pc}

0800815a <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 800815a:	b590      	push	{r4, r7, lr}
 800815c:	b091      	sub	sp, #68	; 0x44
 800815e:	af00      	add	r7, sp, #0
 8008160:	603a      	str	r2, [r7, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	4603      	mov	r3, r0
 8008166:	71fb      	strb	r3, [r7, #7]
 8008168:	460b      	mov	r3, r1
 800816a:	71bb      	strb	r3, [r7, #6]
 800816c:	4613      	mov	r3, r2
 800816e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 8008174:	79bb      	ldrb	r3, [r7, #6]
 8008176:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 8008178:	79bb      	ldrb	r3, [r7, #6]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	f107 030e 	add.w	r3, r7, #14
 8008184:	6814      	ldr	r4, [r2, #0]
 8008186:	6850      	ldr	r0, [r2, #4]
 8008188:	6891      	ldr	r1, [r2, #8]
 800818a:	68d2      	ldr	r2, [r2, #12]
 800818c:	601c      	str	r4, [r3, #0]
 800818e:	6058      	str	r0, [r3, #4]
 8008190:	6099      	str	r1, [r3, #8]
 8008192:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008194:	797b      	ldrb	r3, [r7, #5]
 8008196:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008198:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800819c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800819e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80081a2:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80081a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80081a8:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80081ac:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80081b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80081b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081b8:	2218      	movs	r2, #24
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 faba 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80081c2:	233f      	movs	r3, #63	; 0x3f
 80081c4:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80081c6:	2386      	movs	r3, #134	; 0x86
 80081c8:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80081ca:	f107 030c 	add.w	r3, r7, #12
 80081ce:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80081d0:	231a      	movs	r3, #26
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80081d4:	f107 030b 	add.w	r3, r7, #11
 80081d8:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 80081de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fe4d 	bl	8008e84 <hci_send_req>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da01      	bge.n	80081f4 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 80081f0:	23ff      	movs	r3, #255	; 0xff
 80081f2:	e005      	b.n	8008200 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 80081f4:	7afb      	ldrb	r3, [r7, #11]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <aci_gap_set_auth_requirement+0xa4>
    return status;
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	e000      	b.n	8008200 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3744      	adds	r7, #68	; 0x44
 8008204:	46bd      	mov	sp, r7
 8008206:	bd90      	pop	{r4, r7, pc}

08008208 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b092      	sub	sp, #72	; 0x48
 800820c:	af00      	add	r7, sp, #0
 800820e:	607b      	str	r3, [r7, #4]
 8008210:	4603      	mov	r3, r0
 8008212:	81fb      	strh	r3, [r7, #14]
 8008214:	460b      	mov	r3, r1
 8008216:	81bb      	strh	r3, [r7, #12]
 8008218:	4613      	mov	r3, r2
 800821a:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8008220:	89bb      	ldrh	r3, [r7, #12]
 8008222:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8008224:	7afb      	ldrb	r3, [r7, #11]
 8008226:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	f107 031d 	add.w	r3, r7, #29
 800822e:	6811      	ldr	r1, [r2, #0]
 8008230:	6019      	str	r1, [r3, #0]
 8008232:	8892      	ldrh	r2, [r2, #4]
 8008234:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 8008236:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800823a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 800823e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008242:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 8008244:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8008248:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 800824a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800824e:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 8008250:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8008254:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 8008256:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800825a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 800825c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8008260:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008266:	2218      	movs	r2, #24
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fa63 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008270:	233f      	movs	r3, #63	; 0x3f
 8008272:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8008274:	239c      	movs	r3, #156	; 0x9c
 8008276:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8008278:	f107 0318 	add.w	r3, r7, #24
 800827c:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 800827e:	2318      	movs	r3, #24
 8008280:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 8008282:	230f      	movs	r3, #15
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8008286:	f107 0317 	add.w	r3, r7, #23
 800828a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 800828c:	2301      	movs	r3, #1
 800828e:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008290:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fdf4 	bl	8008e84 <hci_send_req>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	da01      	bge.n	80082a6 <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 80082a2:	23ff      	movs	r3, #255	; 0xff
 80082a4:	e000      	b.n	80082a8 <aci_gap_create_connection+0xa0>

  return status;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3748      	adds	r7, #72	; 0x48
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	2218      	movs	r2, #24
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fa39 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082c4:	233f      	movs	r3, #63	; 0x3f
 80082c6:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80082c8:	f240 1301 	movw	r3, #257	; 0x101
 80082cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80082ce:	1dfb      	adds	r3, r7, #7
 80082d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	2100      	movs	r1, #0
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fdd1 	bl	8008e84 <hci_send_req>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	da01      	bge.n	80082ec <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80082e8:	23ff      	movs	r3, #255	; 0xff
 80082ea:	e000      	b.n	80082ee <aci_gatt_init+0x3e>

  return status;
 80082ec:	79fb      	ldrb	r3, [r7, #7]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3720      	adds	r7, #32
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b090      	sub	sp, #64	; 0x40
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6039      	str	r1, [r7, #0]
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	71fb      	strb	r3, [r7, #7]
 8008306:	460b      	mov	r3, r1
 8008308:	71bb      	strb	r3, [r7, #6]
 800830a:	4613      	mov	r3, r2
 800830c:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8008314:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008318:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800831c:	4413      	add	r3, r2
 800831e:	79fa      	ldrb	r2, [r7, #7]
 8008320:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008324:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008328:	3301      	adds	r3, #1
 800832a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d103      	bne.n	800833c <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8008334:	2302      	movs	r3, #2
 8008336:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800833a:	e002      	b.n	8008342 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800833c:	2310      	movs	r3, #16
 800833e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008342:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008346:	f107 020c 	add.w	r2, r7, #12
 800834a:	4413      	add	r3, r2
 800834c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f001 f9e4 	bl	8009720 <memcpy>
  indx +=  uuid_len;
 8008358:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800835c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008360:	4413      	add	r3, r2
 8008362:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8008366:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800836a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800836e:	4413      	add	r3, r2
 8008370:	79ba      	ldrb	r2, [r7, #6]
 8008372:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008376:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800837a:	3301      	adds	r3, #1
 800837c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8008380:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008384:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008388:	4413      	add	r3, r2
 800838a:	797a      	ldrb	r2, [r7, #5]
 800838c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008390:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008394:	3301      	adds	r3, #1
 8008396:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800839a:	f107 0320 	add.w	r3, r7, #32
 800839e:	2203      	movs	r2, #3
 80083a0:	2100      	movs	r1, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 f9c7 	bl	8009736 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80083a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ac:	2218      	movs	r2, #24
 80083ae:	2100      	movs	r1, #0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 f9c0 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80083b6:	233f      	movs	r3, #63	; 0x3f
 80083b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80083ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 80083be:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80083c0:	f107 030c 	add.w	r3, r7, #12
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80083c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80083cc:	f107 0320 	add.w	r3, r7, #32
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80083d2:	2303      	movs	r3, #3
 80083d4:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80083d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f000 fd51 	bl	8008e84 <hci_send_req>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	da01      	bge.n	80083ec <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80083e8:	23ff      	movs	r3, #255	; 0xff
 80083ea:	e00c      	b.n	8008406 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80083ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <aci_gatt_add_serv+0x104>
    return resp.status;
 80083f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083f8:	e005      	b.n	8008406 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80083fa:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80083fe:	b29a      	uxth	r2, r3
 8008400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008402:	801a      	strh	r2, [r3, #0]

  return 0;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3740      	adds	r7, #64	; 0x40
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b092      	sub	sp, #72	; 0x48
 8008412:	af00      	add	r7, sp, #0
 8008414:	603a      	str	r2, [r7, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	4603      	mov	r3, r0
 800841a:	80fb      	strh	r3, [r7, #6]
 800841c:	460b      	mov	r3, r1
 800841e:	717b      	strb	r3, [r7, #5]
 8008420:	4613      	mov	r3, r2
 8008422:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800842e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008432:	f107 020c 	add.w	r2, r7, #12
 8008436:	4413      	add	r3, r2
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800843c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008440:	3302      	adds	r3, #2
 8008442:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8008446:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800844a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800844e:	4413      	add	r3, r2
 8008450:	797a      	ldrb	r2, [r7, #5]
 8008452:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008456:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800845a:	3301      	adds	r3, #1
 800845c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008460:	797b      	ldrb	r3, [r7, #5]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d103      	bne.n	800846e <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8008466:	2302      	movs	r3, #2
 8008468:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800846c:	e002      	b.n	8008474 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 800846e:	2310      	movs	r3, #16
 8008470:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008474:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008478:	f107 020c 	add.w	r2, r7, #12
 800847c:	4413      	add	r3, r2
 800847e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f001 f94b 	bl	8009720 <memcpy>
  indx +=  uuid_len;
 800848a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800848e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008492:	4413      	add	r3, r2
 8008494:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8008498:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800849c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084a0:	4413      	add	r3, r2
 80084a2:	793a      	ldrb	r2, [r7, #4]
 80084a4:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084ac:	3301      	adds	r3, #1
 80084ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80084b2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084ba:	4413      	add	r3, r2
 80084bc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80084c0:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084c8:	3301      	adds	r3, #1
 80084ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80084ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084d6:	4413      	add	r3, r2
 80084d8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80084dc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084e4:	3301      	adds	r3, #1
 80084e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80084ea:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084f2:	4413      	add	r3, r2
 80084f4:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80084f8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008500:	3301      	adds	r3, #1
 8008502:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8008506:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800850a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800850e:	4413      	add	r3, r2
 8008510:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8008514:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008518:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800851c:	3301      	adds	r3, #1
 800851e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8008522:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008526:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800852a:	4413      	add	r3, r2
 800852c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008530:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008534:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008538:	3301      	adds	r3, #1
 800853a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800853e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008542:	2203      	movs	r2, #3
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f001 f8f5 	bl	8009736 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800854c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008550:	2218      	movs	r2, #24
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f001 f8ee 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800855a:	233f      	movs	r3, #63	; 0x3f
 800855c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 800855e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008562:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800856a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800856e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8008570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008574:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008576:	2303      	movs	r3, #3
 8008578:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800857a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800857e:	2100      	movs	r1, #0
 8008580:	4618      	mov	r0, r3
 8008582:	f000 fc7f 	bl	8008e84 <hci_send_req>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	da01      	bge.n	8008590 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800858c:	23ff      	movs	r3, #255	; 0xff
 800858e:	e00c      	b.n	80085aa <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8008590:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <aci_gatt_add_char+0x190>
    return resp.status;
 8008598:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800859c:	e005      	b.n	80085aa <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 800859e:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085a6:	801a      	strh	r2, [r3, #0]

  return 0;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3748      	adds	r7, #72	; 0x48
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80085b2:	b590      	push	{r4, r7, lr}
 80085b4:	b0ab      	sub	sp, #172	; 0xac
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	4604      	mov	r4, r0
 80085ba:	4608      	mov	r0, r1
 80085bc:	4611      	mov	r1, r2
 80085be:	461a      	mov	r2, r3
 80085c0:	4623      	mov	r3, r4
 80085c2:	80fb      	strh	r3, [r7, #6]
 80085c4:	4603      	mov	r3, r0
 80085c6:	80bb      	strh	r3, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
 80085cc:	4613      	mov	r3, r2
 80085ce:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80085d6:	78bb      	ldrb	r3, [r7, #2]
 80085d8:	3306      	adds	r3, #6
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	dd01      	ble.n	80085e2 <aci_gatt_update_char_value+0x30>
    return BLE_STATUS_INVALID_PARAMS;
 80085de:	2342      	movs	r3, #66	; 0x42
 80085e0:	e076      	b.n	80086d0 <aci_gatt_update_char_value+0x11e>

  servHandle = htobs(servHandle);
 80085e2:	88fb      	ldrh	r3, [r7, #6]
 80085e4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80085e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80085ea:	f107 0208 	add.w	r2, r7, #8
 80085ee:	4413      	add	r3, r2
 80085f0:	88fa      	ldrh	r2, [r7, #6]
 80085f2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80085f4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80085f8:	3302      	adds	r3, #2
 80085fa:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80085fe:	88bb      	ldrh	r3, [r7, #4]
 8008600:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008602:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008606:	f107 0208 	add.w	r2, r7, #8
 800860a:	4413      	add	r3, r2
 800860c:	88ba      	ldrh	r2, [r7, #4]
 800860e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008610:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008614:	3302      	adds	r3, #2
 8008616:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800861a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800861e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008622:	4413      	add	r3, r2
 8008624:	78fa      	ldrb	r2, [r7, #3]
 8008626:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800862a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800862e:	3301      	adds	r3, #1
 8008630:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8008634:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008638:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800863c:	4413      	add	r3, r2
 800863e:	78ba      	ldrb	r2, [r7, #2]
 8008640:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008644:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008648:	3301      	adds	r3, #1
 800864a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800864e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008652:	f107 0208 	add.w	r2, r7, #8
 8008656:	4413      	add	r3, r2
 8008658:	78ba      	ldrb	r2, [r7, #2]
 800865a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800865e:	4618      	mov	r0, r3
 8008660:	f001 f85e 	bl	8009720 <memcpy>
  indx +=  charValueLen;
 8008664:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8008668:	78bb      	ldrb	r3, [r7, #2]
 800866a:	4413      	add	r3, r2
 800866c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008670:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008674:	2218      	movs	r2, #24
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f001 f85c 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800867e:	233f      	movs	r3, #63	; 0x3f
 8008680:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008684:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008688:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800868c:	f107 0308 	add.w	r3, r7, #8
 8008690:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8008694:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800869c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80086a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 80086a4:	2301      	movs	r3, #1
 80086a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 80086aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f000 fbe7 	bl	8008e84 <hci_send_req>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	da01      	bge.n	80086c0 <aci_gatt_update_char_value+0x10e>
    return BLE_STATUS_TIMEOUT;
 80086bc:	23ff      	movs	r3, #255	; 0xff
 80086be:	e007      	b.n	80086d0 <aci_gatt_update_char_value+0x11e>

  if (status) {
 80086c0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d002      	beq.n	80086ce <aci_gatt_update_char_value+0x11c>
    return status;
 80086c8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80086cc:	e000      	b.n	80086d0 <aci_gatt_update_char_value+0x11e>
  }

  return 0;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	37ac      	adds	r7, #172	; 0xac
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}

080086d8 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80086d8:	b590      	push	{r4, r7, lr}
 80086da:	b091      	sub	sp, #68	; 0x44
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	461a      	mov	r2, r3
 80086e6:	4623      	mov	r3, r4
 80086e8:	80fb      	strh	r3, [r7, #6]
 80086ea:	4603      	mov	r3, r0
 80086ec:	80bb      	strh	r3, [r7, #4]
 80086ee:	460b      	mov	r3, r1
 80086f0:	807b      	strh	r3, [r7, #2]
 80086f2:	4613      	mov	r3, r2
 80086f4:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8008700:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008704:	f107 020c 	add.w	r2, r7, #12
 8008708:	4413      	add	r3, r2
 800870a:	88fa      	ldrh	r2, [r7, #6]
 800870c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800870e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008712:	3302      	adds	r3, #2
 8008714:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8008718:	88bb      	ldrh	r3, [r7, #4]
 800871a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800871c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008720:	f107 020c 	add.w	r2, r7, #12
 8008724:	4413      	add	r3, r2
 8008726:	88ba      	ldrh	r2, [r7, #4]
 8008728:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800872a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800872e:	3302      	adds	r3, #2
 8008730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8008738:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800873c:	f107 020c 	add.w	r2, r7, #12
 8008740:	4413      	add	r3, r2
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008746:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800874a:	3302      	adds	r3, #2
 800874c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8008750:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008754:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008758:	4413      	add	r3, r2
 800875a:	787a      	ldrb	r2, [r7, #1]
 800875c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008760:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008764:	3301      	adds	r3, #1
 8008766:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800876a:	787b      	ldrb	r3, [r7, #1]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d103      	bne.n	8008778 <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 8008770:	2302      	movs	r3, #2
 8008772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008776:	e002      	b.n	800877e <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 8008778:	2310      	movs	r3, #16
 800877a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800877e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008782:	f107 020c 	add.w	r2, r7, #12
 8008786:	4413      	add	r3, r2
 8008788:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800878c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800878e:	4618      	mov	r0, r3
 8008790:	f000 ffc6 	bl	8009720 <memcpy>
  indx +=  uuid_len;
 8008794:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800879c:	4413      	add	r3, r2
 800879e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80087a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087a6:	2218      	movs	r2, #24
 80087a8:	2100      	movs	r1, #0
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 ffc3 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087b0:	233f      	movs	r3, #63	; 0x3f
 80087b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80087b4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80087b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80087ba:	f107 030c 	add.w	r3, r7, #12
 80087be:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80087c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087c4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 80087c6:	230f      	movs	r3, #15
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 80087ca:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80087ce:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80087d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d8:	2100      	movs	r1, #0
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fb52 	bl	8008e84 <hci_send_req>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	da01      	bge.n	80087ea <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 80087e6:	23ff      	movs	r3, #255	; 0xff
 80087e8:	e001      	b.n	80087ee <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 80087ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3744      	adds	r7, #68	; 0x44
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd90      	pop	{r4, r7, pc}

080087f6 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b0ac      	sub	sp, #176	; 0xb0
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	4603      	mov	r3, r0
 8008800:	81fb      	strh	r3, [r7, #14]
 8008802:	460b      	mov	r3, r1
 8008804:	81bb      	strh	r3, [r7, #12]
 8008806:	4613      	mov	r3, r2
 8008808:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	3305      	adds	r3, #5
 8008814:	2b80      	cmp	r3, #128	; 0x80
 8008816:	dd01      	ble.n	800881c <aci_gatt_write_charac_descriptor+0x26>
    return BLE_STATUS_INVALID_PARAMS;
 8008818:	2342      	movs	r3, #66	; 0x42
 800881a:	e065      	b.n	80088e8 <aci_gatt_write_charac_descriptor+0xf2>

  conn_handle = htobs(conn_handle);
 800881c:	89fb      	ldrh	r3, [r7, #14]
 800881e:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8008820:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008824:	f107 0210 	add.w	r2, r7, #16
 8008828:	4413      	add	r3, r2
 800882a:	89fa      	ldrh	r2, [r7, #14]
 800882c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800882e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008832:	3302      	adds	r3, #2
 8008834:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8008838:	89bb      	ldrh	r3, [r7, #12]
 800883a:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800883c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008840:	f107 0210 	add.w	r2, r7, #16
 8008844:	4413      	add	r3, r2
 8008846:	89ba      	ldrh	r2, [r7, #12]
 8008848:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800884a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800884e:	3302      	adds	r3, #2
 8008850:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8008854:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008858:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800885c:	4413      	add	r3, r2
 800885e:	7afa      	ldrb	r2, [r7, #11]
 8008860:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008864:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008868:	3301      	adds	r3, #1
 800886a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800886e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008872:	f107 0210 	add.w	r2, r7, #16
 8008876:	4413      	add	r3, r2
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 ff4f 	bl	8009720 <memcpy>
  indx +=  value_len;
 8008882:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	4413      	add	r3, r2
 800888a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800888e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008892:	2218      	movs	r2, #24
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f000 ff4d 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800889c:	233f      	movs	r3, #63	; 0x3f
 800889e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 80088a2:	f240 1321 	movw	r3, #289	; 0x121
 80088a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 80088aa:	f107 0310 	add.w	r3, r7, #16
 80088ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 80088b2:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80088b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 80088ba:	230f      	movs	r3, #15
 80088bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80088c0:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80088c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 80088ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80088d2:	2100      	movs	r1, #0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fad5 	bl	8008e84 <hci_send_req>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da01      	bge.n	80088e4 <aci_gatt_write_charac_descriptor+0xee>
    return BLE_STATUS_TIMEOUT;
 80088e0:	23ff      	movs	r3, #255	; 0xff
 80088e2:	e001      	b.n	80088e8 <aci_gatt_write_charac_descriptor+0xf2>

  return status;
 80088e4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	37b0      	adds	r7, #176	; 0xb0
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b092      	sub	sp, #72	; 0x48
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	607b      	str	r3, [r7, #4]
 80088f8:	4603      	mov	r3, r0
 80088fa:	81fb      	strh	r3, [r7, #14]
 80088fc:	460b      	mov	r3, r1
 80088fe:	81bb      	strh	r3, [r7, #12]
 8008900:	4613      	mov	r3, r2
 8008902:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	2b14      	cmp	r3, #20
 8008908:	d901      	bls.n	800890e <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800890a:	2342      	movs	r3, #66	; 0x42
 800890c:	e031      	b.n	8008972 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 800890e:	89fb      	ldrh	r3, [r7, #14]
 8008910:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8008912:	89bb      	ldrh	r3, [r7, #12]
 8008914:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 8008916:	7afb      	ldrb	r3, [r7, #11]
 8008918:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800891a:	7afa      	ldrb	r2, [r7, #11]
 800891c:	f107 0314 	add.w	r3, r7, #20
 8008920:	3305      	adds	r3, #5
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fefb 	bl	8009720 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800892a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800892e:	2218      	movs	r2, #24
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f000 feff 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008938:	233f      	movs	r3, #63	; 0x3f
 800893a:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800893c:	f240 1323 	movw	r3, #291	; 0x123
 8008940:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8008948:	7afb      	ldrb	r3, [r7, #11]
 800894a:	3305      	adds	r3, #5
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800894e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008952:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008954:	2301      	movs	r3, #1
 8008956:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8008958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800895c:	2100      	movs	r1, #0
 800895e:	4618      	mov	r0, r3
 8008960:	f000 fa90 	bl	8008e84 <hci_send_req>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	da01      	bge.n	800896e <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 800896a:	23ff      	movs	r3, #255	; 0xff
 800896c:	e001      	b.n	8008972 <aci_gatt_write_without_response+0x82>

  return status;
 800896e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008972:	4618      	mov	r0, r3
 8008974:	3748      	adds	r7, #72	; 0x48
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b0aa      	sub	sp, #168	; 0xa8
 800897e:	af00      	add	r7, sp, #0
 8008980:	4603      	mov	r3, r0
 8008982:	603a      	str	r2, [r7, #0]
 8008984:	71fb      	strb	r3, [r7, #7]
 8008986:	460b      	mov	r3, r1
 8008988:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8008990:	79bb      	ldrb	r3, [r7, #6]
 8008992:	3302      	adds	r3, #2
 8008994:	2b80      	cmp	r3, #128	; 0x80
 8008996:	dd01      	ble.n	800899c <aci_hal_write_config_data+0x22>
    return BLE_STATUS_INVALID_PARAMS;
 8008998:	2342      	movs	r3, #66	; 0x42
 800899a:	e052      	b.n	8008a42 <aci_hal_write_config_data+0xc8>

  buffer[indx] = offset;
 800899c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089a0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80089a4:	4413      	add	r3, r2
 80089a6:	79fa      	ldrb	r2, [r7, #7]
 80089a8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089b0:	3301      	adds	r3, #1
 80089b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 80089b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089ba:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80089be:	4413      	add	r3, r2
 80089c0:	79ba      	ldrb	r2, [r7, #6]
 80089c2:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089ca:	3301      	adds	r3, #1
 80089cc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80089d0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089d4:	f107 0208 	add.w	r2, r7, #8
 80089d8:	4413      	add	r3, r2
 80089da:	79ba      	ldrb	r2, [r7, #6]
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fe9e 	bl	8009720 <memcpy>
  indx +=  len;
 80089e4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80089e8:	79bb      	ldrb	r3, [r7, #6]
 80089ea:	4413      	add	r3, r2
 80089ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089f4:	2218      	movs	r2, #24
 80089f6:	2100      	movs	r1, #0
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fe9c 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089fe:	233f      	movs	r3, #63	; 0x3f
 8008a00:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8008a04:	230c      	movs	r3, #12
 8008a06:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8008a0a:	f107 0308 	add.w	r3, r7, #8
 8008a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8008a12:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8008a1a:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8008a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8008a22:	2301      	movs	r3, #1
 8008a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008a28:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 fa28 	bl	8008e84 <hci_send_req>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da01      	bge.n	8008a3e <aci_hal_write_config_data+0xc4>
    return BLE_STATUS_TIMEOUT;
 8008a3a:	23ff      	movs	r3, #255	; 0xff
 8008a3c:	e001      	b.n	8008a42 <aci_hal_write_config_data+0xc8>

  return status;
 8008a3e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	37a8      	adds	r7, #168	; 0xa8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b08a      	sub	sp, #40	; 0x28
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	4603      	mov	r3, r0
 8008a52:	460a      	mov	r2, r1
 8008a54:	71fb      	strb	r3, [r7, #7]
 8008a56:	4613      	mov	r3, r2
 8008a58:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008a5e:	79bb      	ldrb	r3, [r7, #6]
 8008a60:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a62:	f107 0310 	add.w	r3, r7, #16
 8008a66:	2218      	movs	r2, #24
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fe63 	bl	8009736 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a70:	233f      	movs	r3, #63	; 0x3f
 8008a72:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008a74:	230f      	movs	r3, #15
 8008a76:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008a78:	f107 030c 	add.w	r3, r7, #12
 8008a7c:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008a82:	f107 030b 	add.w	r3, r7, #11
 8008a86:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008a8c:	f107 0310 	add.w	r3, r7, #16
 8008a90:	2100      	movs	r1, #0
 8008a92:	4618      	mov	r0, r3
 8008a94:	f000 f9f6 	bl	8008e84 <hci_send_req>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	da01      	bge.n	8008aa2 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008a9e:	23ff      	movs	r3, #255	; 0xff
 8008aa0:	e000      	b.n	8008aa4 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3728      	adds	r7, #40	; 0x28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af02      	add	r7, sp, #8
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008ab6:	f107 0410 	add.w	r4, r7, #16
 8008aba:	f107 0215 	add.w	r2, r7, #21
 8008abe:	f107 0112 	add.w	r1, r7, #18
 8008ac2:	f107 0016 	add.w	r0, r7, #22
 8008ac6:	f107 030e 	add.w	r3, r7, #14
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4623      	mov	r3, r4
 8008ace:	f000 f853 	bl	8008b78 <hci_le_read_local_version>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d126      	bne.n	8008b2a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008adc:	8a7b      	ldrh	r3, [r7, #18]
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008ae8:	8a7b      	ldrh	r3, [r7, #18]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	b21a      	sxth	r2, r3
 8008af8:	89fb      	ldrh	r3, [r7, #14]
 8008afa:	091b      	lsrs	r3, r3, #4
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	011b      	lsls	r3, r3, #4
 8008b00:	b21b      	sxth	r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	b21b      	sxth	r3, r3
 8008b06:	4313      	orrs	r3, r2
 8008b08:	b21b      	sxth	r3, r3
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b21a      	sxth	r2, r3
 8008b16:	89fb      	ldrh	r3, [r7, #14]
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	b21b      	sxth	r3, r3
 8008b20:	4313      	orrs	r3, r2
 8008b22:	b21b      	sxth	r3, r3
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b088      	sub	sp, #32
 8008b38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b3a:	f107 0308 	add.w	r3, r7, #8
 8008b3e:	2218      	movs	r2, #24
 8008b40:	2100      	movs	r1, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fdf7 	bl	8009736 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b50:	1dfb      	adds	r3, r7, #7
 8008b52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b54:	2301      	movs	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b58:	f107 0308 	add.w	r3, r7, #8
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 f990 	bl	8008e84 <hci_send_req>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da01      	bge.n	8008b6e <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008b6a:	23ff      	movs	r3, #255	; 0xff
 8008b6c:	e000      	b.n	8008b70 <hci_reset+0x3c>
  
  return status;  
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08e      	sub	sp, #56	; 0x38
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b86:	f107 0314 	add.w	r3, r7, #20
 8008b8a:	2209      	movs	r2, #9
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fdd1 	bl	8009736 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b94:	f107 0320 	add.w	r3, r7, #32
 8008b98:	2218      	movs	r2, #24
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fdca 	bl	8009736 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8008baa:	2300      	movs	r3, #0
 8008bac:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008bb2:	f107 0314 	add.w	r3, r7, #20
 8008bb6:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008bb8:	2309      	movs	r3, #9
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008bbc:	f107 0320 	add.w	r3, r7, #32
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 f95e 	bl	8008e84 <hci_send_req>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da01      	bge.n	8008bd2 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008bce:	23ff      	movs	r3, #255	; 0xff
 8008bd0:	e018      	b.n	8008c04 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008bd2:	7d3b      	ldrb	r3, [r7, #20]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <hci_le_read_local_version+0x64>
    return resp.status;
 8008bd8:	7d3b      	ldrb	r3, [r7, #20]
 8008bda:	e013      	b.n	8008c04 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008bdc:	7d7a      	ldrb	r2, [r7, #21]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008be2:	8afa      	ldrh	r2, [r7, #22]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008be8:	7e3a      	ldrb	r2, [r7, #24]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008bee:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008bf8:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c00:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3738      	adds	r7, #56	; 0x38
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b092      	sub	sp, #72	; 0x48
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	2100      	movs	r1, #0
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 fd88 	bl	8009736 <memset>
  scan_resp_cp.length = length;
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008c2a:	79fb      	ldrb	r3, [r7, #7]
 8008c2c:	2b1f      	cmp	r3, #31
 8008c2e:	bf28      	it	cs
 8008c30:	231f      	movcs	r3, #31
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	f107 0310 	add.w	r3, r7, #16
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f000 fd6e 	bl	8009720 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c48:	2218      	movs	r2, #24
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fd72 	bl	8009736 <memset>
  rq.ogf = OGF_LE_CTL;
 8008c52:	2308      	movs	r3, #8
 8008c54:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008c56:	2309      	movs	r3, #9
 8008c58:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8008c5a:	f107 0310 	add.w	r3, r7, #16
 8008c5e:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008c60:	2320      	movs	r3, #32
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8008c64:	f107 030f 	add.w	r3, r7, #15
 8008c68:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 f905 	bl	8008e84 <hci_send_req>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	da01      	bge.n	8008c84 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008c80:	23ff      	movs	r3, #255	; 0xff
 8008c82:	e000      	b.n	8008c86 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3748      	adds	r7, #72	; 0x48
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3308      	adds	r3, #8
 8008c9a:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d001      	beq.n	8008ca8 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e00c      	b.n	8008cc2 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3302      	adds	r3, #2
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008cb6:	3b03      	subs	r3, #3
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d001      	beq.n	8008cc0 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e000      	b.n	8008cc2 <verify_packet+0x34>
  
  return 0;      
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b0a6      	sub	sp, #152	; 0x98
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	4603      	mov	r3, r0
 8008cda:	81fb      	strh	r3, [r7, #14]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	81bb      	strh	r3, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008ce4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cec:	b21a      	sxth	r2, r3
 8008cee:	89fb      	ldrh	r3, [r7, #14]
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008cfc:	7afb      	ldrb	r3, [r7, #11]
 8008cfe:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008d00:	2301      	movs	r3, #1
 8008d02:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008d04:	f107 0318 	add.w	r3, r7, #24
 8008d08:	3301      	adds	r3, #1
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f107 0314 	add.w	r3, r7, #20
 8008d10:	8819      	ldrh	r1, [r3, #0]
 8008d12:	789b      	ldrb	r3, [r3, #2]
 8008d14:	8011      	strh	r1, [r2, #0]
 8008d16:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008d18:	f107 0318 	add.w	r3, r7, #24
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	7afa      	ldrb	r2, [r7, #11]
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fcfc 	bl	8009720 <memcpy>
  
  if (hciContext.io.Send)
 8008d28:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <send_cmd+0x7c>)
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d009      	beq.n	8008d44 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <send_cmd+0x7c>)
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	7afa      	ldrb	r2, [r7, #11]
 8008d36:	b292      	uxth	r2, r2
 8008d38:	3204      	adds	r2, #4
 8008d3a:	b291      	uxth	r1, r2
 8008d3c:	f107 0218 	add.w	r2, r7, #24
 8008d40:	4610      	mov	r0, r2
 8008d42:	4798      	blx	r3
  }
}
 8008d44:	bf00      	nop
 8008d46:	3798      	adds	r7, #152	; 0x98
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	200004a4 	.word	0x200004a4

08008d50 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008d5a:	e00a      	b.n	8008d72 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008d5c:	f107 030c 	add.w	r3, r7, #12
 8008d60:	4619      	mov	r1, r3
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f000 fada 	bl	800931c <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa49 	bl	8009204 <list_insert_head>
  while (!list_is_empty(src_list))
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	f000 fa26 	bl	80091c4 <list_is_empty>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0ee      	beq.n	8008d5c <move_list+0xc>
  }
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008d8e:	e009      	b.n	8008da4 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008d90:	1d3b      	adds	r3, r7, #4
 8008d92:	4619      	mov	r1, r3
 8008d94:	4808      	ldr	r0, [pc, #32]	; (8008db8 <free_event_list+0x30>)
 8008d96:	f000 fa9c 	bl	80092d2 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4807      	ldr	r0, [pc, #28]	; (8008dbc <free_event_list+0x34>)
 8008da0:	f000 fa54 	bl	800924c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <free_event_list+0x34>)
 8008da6:	f000 fade 	bl	8009366 <list_get_size>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	ddef      	ble.n	8008d90 <free_event_list+0x8>
  }
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	2000097c 	.word	0x2000097c
 8008dbc:	20000974 	.word	0x20000974

08008dc0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008dd0:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <hci_init+0x74>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008dd6:	4818      	ldr	r0, [pc, #96]	; (8008e38 <hci_init+0x78>)
 8008dd8:	f000 f9e4 	bl	80091a4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008ddc:	4817      	ldr	r0, [pc, #92]	; (8008e3c <hci_init+0x7c>)
 8008dde:	f000 f9e1 	bl	80091a4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008de2:	f7f8 fa43 	bl	800126c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
 8008dea:	e00c      	b.n	8008e06 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	228c      	movs	r2, #140	; 0x8c
 8008df0:	fb02 f303 	mul.w	r3, r2, r3
 8008df4:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <hci_init+0x80>)
 8008df6:	4413      	add	r3, r2
 8008df8:	4619      	mov	r1, r3
 8008dfa:	480f      	ldr	r0, [pc, #60]	; (8008e38 <hci_init+0x78>)
 8008dfc:	f000 fa26 	bl	800924c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008e00:	7bfb      	ldrb	r3, [r7, #15]
 8008e02:	3301      	adds	r3, #1
 8008e04:	73fb      	strb	r3, [r7, #15]
 8008e06:	7bfb      	ldrb	r3, [r7, #15]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d9ef      	bls.n	8008dec <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <hci_init+0x74>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <hci_init+0x5c>
 8008e14:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <hci_init+0x74>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008e1c:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <hci_init+0x74>)
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <hci_init+0x6a>
 8008e24:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <hci_init+0x74>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	4798      	blx	r3
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200004a4 	.word	0x200004a4
 8008e38:	20000974 	.word	0x20000974
 8008e3c:	2000097c 	.word	0x2000097c
 8008e40:	200001e8 	.word	0x200001e8

08008e44 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <hci_register_io_bus+0x3c>)
 8008e52:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <hci_register_io_bus+0x3c>)
 8008e5a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <hci_register_io_bus+0x3c>)
 8008e62:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <hci_register_io_bus+0x3c>)
 8008e6a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	4a03      	ldr	r2, [pc, #12]	; (8008e80 <hci_register_io_bus+0x3c>)
 8008e72:	6093      	str	r3, [r2, #8]
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	200004a4 	.word	0x200004a4

08008e84 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b08e      	sub	sp, #56	; 0x38
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	885b      	ldrh	r3, [r3, #2]
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e9a:	b21a      	sxth	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	029b      	lsls	r3, r3, #10
 8008ea2:	b21b      	sxth	r3, r3
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	b21b      	sxth	r3, r3
 8008ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f976 	bl	80091a4 <list_init_head>

  free_event_list();
 8008eb8:	f7ff ff66 	bl	8008d88 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	8818      	ldrh	r0, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	8859      	ldrh	r1, [r3, #2]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f7ff feff 	bl	8008cd0 <send_cmd>
  
  if (async)
 8008ed2:	78fb      	ldrb	r3, [r7, #3]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <hci_send_req+0x58>
  {
    return 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	e0e2      	b.n	80090a2 <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008edc:	f7f9 fe08 	bl	8002af0 <HAL_GetTick>
 8008ee0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008ee2:	f7f9 fe05 	bl	8002af0 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ef0:	f200 80b3 	bhi.w	800905a <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008ef4:	486d      	ldr	r0, [pc, #436]	; (80090ac <hci_send_req+0x228>)
 8008ef6:	f000 f965 	bl	80091c4 <list_is_empty>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d000      	beq.n	8008f02 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008f00:	e7ef      	b.n	8008ee2 <hci_send_req+0x5e>
      {
        break;
 8008f02:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008f04:	f107 0310 	add.w	r3, r7, #16
 8008f08:	4619      	mov	r1, r3
 8008f0a:	4868      	ldr	r0, [pc, #416]	; (80090ac <hci_send_req+0x228>)
 8008f0c:	f000 f9e1 	bl	80092d2 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	3308      	adds	r3, #8
 8008f14:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d17a      	bne.n	8009014 <hci_send_req+0x190>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	3301      	adds	r3, #1
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	3308      	adds	r3, #8
 8008f28:	3303      	adds	r3, #3
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008f32:	3b03      	subs	r3, #3
 8008f34:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	2b0f      	cmp	r3, #15
 8008f3c:	d00a      	beq.n	8008f54 <hci_send_req+0xd0>
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	dc02      	bgt.n	8008f48 <hci_send_req+0xc4>
 8008f42:	2b0e      	cmp	r3, #14
 8008f44:	d028      	beq.n	8008f98 <hci_send_req+0x114>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8008f46:	e06a      	b.n	800901e <hci_send_req+0x19a>
      switch (event_pckt->evt) 
 8008f48:	2b10      	cmp	r3, #16
 8008f4a:	f000 8088 	beq.w	800905e <hci_send_req+0x1da>
 8008f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f50:	d042      	beq.n	8008fd8 <hci_send_req+0x154>
        break;
 8008f52:	e064      	b.n	800901e <hci_send_req+0x19a>
        cs = (void *) ptr;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	61bb      	str	r3, [r7, #24]
        if (cs->opcode != opcode)
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	885b      	ldrh	r3, [r3, #2]
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d17e      	bne.n	8009062 <hci_send_req+0x1de>
        if (r->event != EVT_CMD_STATUS) {
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b0f      	cmp	r3, #15
 8008f6a:	d004      	beq.n	8008f76 <hci_send_req+0xf2>
          if (cs->status) {
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d051      	beq.n	8009018 <hci_send_req+0x194>
            goto failed;
 8008f74:	e078      	b.n	8009068 <hci_send_req+0x1e4>
        r->rlen = MIN(len, r->rlen);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	695a      	ldr	r2, [r3, #20]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	bf28      	it	cs
 8008f80:	461a      	movcs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6918      	ldr	r0, [r3, #16]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f92:	f000 fbc5 	bl	8009720 <memcpy>
        goto done;
 8008f96:	e078      	b.n	800908a <hci_send_req+0x206>
        cc = (void *) ptr;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	617b      	str	r3, [r7, #20]
        if (cc->opcode != opcode)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d15d      	bne.n	8009066 <hci_send_req+0x1e2>
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	3303      	adds	r3, #3
 8008fae:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	3b03      	subs	r3, #3
 8008fb4:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695a      	ldr	r2, [r3, #20]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	bf28      	it	cs
 8008fc0:	461a      	movcs	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6918      	ldr	r0, [r3, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fd2:	f000 fba5 	bl	8009720 <memcpy>
        goto done;
 8008fd6:	e058      	b.n	800908a <hci_send_req+0x206>
        me = (void *) ptr;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	61fb      	str	r3, [r7, #28]
        if (me->subevent != r->event)
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d118      	bne.n	800901c <hci_send_req+0x198>
        len -= 1;
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	695a      	ldr	r2, [r3, #20]
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	bf28      	it	cs
 8008ffa:	461a      	movcs	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6918      	ldr	r0, [r3, #16]
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	1c59      	adds	r1, r3, #1
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	461a      	mov	r2, r3
 800900e:	f000 fb87 	bl	8009720 <memcpy>
        goto done;
 8009012:	e03a      	b.n	800908a <hci_send_req+0x206>
      }
    }
 8009014:	bf00      	nop
 8009016:	e002      	b.n	800901e <hci_send_req+0x19a>
          break;
 8009018:	bf00      	nop
 800901a:	e000      	b.n	800901e <hci_send_req+0x19a>
          break;
 800901c:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800901e:	4824      	ldr	r0, [pc, #144]	; (80090b0 <hci_send_req+0x22c>)
 8009020:	f000 f8d0 	bl	80091c4 <list_is_empty>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00d      	beq.n	8009046 <hci_send_req+0x1c2>
 800902a:	4820      	ldr	r0, [pc, #128]	; (80090ac <hci_send_req+0x228>)
 800902c:	f000 f8ca 	bl	80091c4 <list_is_empty>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	4619      	mov	r1, r3
 800903a:	481d      	ldr	r0, [pc, #116]	; (80090b0 <hci_send_req+0x22c>)
 800903c:	f000 f906 	bl	800924c <list_insert_tail>
      hciReadPacket=NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
 8009044:	e008      	b.n	8009058 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f8fc 	bl	800924c <list_insert_tail>
      hciReadPacket=NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	613b      	str	r3, [r7, #16]
  {
 8009058:	e740      	b.n	8008edc <hci_send_req+0x58>
        goto failed;
 800905a:	bf00      	nop
 800905c:	e004      	b.n	8009068 <hci_send_req+0x1e4>
        goto failed;
 800905e:	bf00      	nop
 8009060:	e002      	b.n	8009068 <hci_send_req+0x1e4>
          goto failed;
 8009062:	bf00      	nop
 8009064:	e000      	b.n	8009068 <hci_send_req+0x1e4>
          goto failed;
 8009066:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d004      	beq.n	8009078 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	4619      	mov	r1, r3
 8009072:	480f      	ldr	r0, [pc, #60]	; (80090b0 <hci_send_req+0x22c>)
 8009074:	f000 f8c6 	bl	8009204 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009078:	f107 0308 	add.w	r3, r7, #8
 800907c:	4619      	mov	r1, r3
 800907e:	480b      	ldr	r0, [pc, #44]	; (80090ac <hci_send_req+0x228>)
 8009080:	f7ff fe66 	bl	8008d50 <move_list>

  return -1;
 8009084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009088:	e00b      	b.n	80090a2 <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	4619      	mov	r1, r3
 800908e:	4808      	ldr	r0, [pc, #32]	; (80090b0 <hci_send_req+0x22c>)
 8009090:	f000 f8b8 	bl	8009204 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4619      	mov	r1, r3
 800909a:	4804      	ldr	r0, [pc, #16]	; (80090ac <hci_send_req+0x228>)
 800909c:	f7ff fe58 	bl	8008d50 <move_list>

  return 0;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3738      	adds	r7, #56	; 0x38
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	2000097c 	.word	0x2000097c
 80090b0:	20000974 	.word	0x20000974

080090b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80090be:	e013      	b.n	80090e8 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80090c0:	1d3b      	adds	r3, r7, #4
 80090c2:	4619      	mov	r1, r3
 80090c4:	480d      	ldr	r0, [pc, #52]	; (80090fc <hci_user_evt_proc+0x48>)
 80090c6:	f000 f904 	bl	80092d2 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80090ca:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <hci_user_evt_proc+0x4c>)
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80090d2:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <hci_user_evt_proc+0x4c>)
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	3208      	adds	r2, #8
 80090da:	4610      	mov	r0, r2
 80090dc:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4619      	mov	r1, r3
 80090e2:	4808      	ldr	r0, [pc, #32]	; (8009104 <hci_user_evt_proc+0x50>)
 80090e4:	f000 f8b2 	bl	800924c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80090e8:	4804      	ldr	r0, [pc, #16]	; (80090fc <hci_user_evt_proc+0x48>)
 80090ea:	f000 f86b 	bl	80091c4 <list_is_empty>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0e5      	beq.n	80090c0 <hci_user_evt_proc+0xc>
  }
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	2000097c 	.word	0x2000097c
 8009100:	200004a4 	.word	0x200004a4
 8009104:	20000974 	.word	0x20000974

08009108 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009118:	481f      	ldr	r0, [pc, #124]	; (8009198 <hci_notify_asynch_evt+0x90>)
 800911a:	f000 f853 	bl	80091c4 <list_is_empty>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d132      	bne.n	800918a <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009124:	f107 030c 	add.w	r3, r7, #12
 8009128:	4619      	mov	r1, r3
 800912a:	481b      	ldr	r0, [pc, #108]	; (8009198 <hci_notify_asynch_evt+0x90>)
 800912c:	f000 f8d1 	bl	80092d2 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009130:	4b1a      	ldr	r3, [pc, #104]	; (800919c <hci_notify_asynch_evt+0x94>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02a      	beq.n	800918e <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009138:	4b18      	ldr	r3, [pc, #96]	; (800919c <hci_notify_asynch_evt+0x94>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	3208      	adds	r2, #8
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	4610      	mov	r0, r2
 8009144:	4798      	blx	r3
 8009146:	4603      	mov	r3, r0
 8009148:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800914a:	7cfb      	ldrb	r3, [r7, #19]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d016      	beq.n	800917e <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	7cfa      	ldrb	r2, [r7, #19]
 8009154:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	4618      	mov	r0, r3
 800915c:	f7ff fd97 	bl	8008c8e <verify_packet>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	4619      	mov	r1, r3
 800916a:	480d      	ldr	r0, [pc, #52]	; (80091a0 <hci_notify_asynch_evt+0x98>)
 800916c:	f000 f86e 	bl	800924c <list_insert_tail>
 8009170:	e00d      	b.n	800918e <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4619      	mov	r1, r3
 8009176:	4808      	ldr	r0, [pc, #32]	; (8009198 <hci_notify_asynch_evt+0x90>)
 8009178:	f000 f844 	bl	8009204 <list_insert_head>
 800917c:	e007      	b.n	800918e <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	4619      	mov	r1, r3
 8009182:	4805      	ldr	r0, [pc, #20]	; (8009198 <hci_notify_asynch_evt+0x90>)
 8009184:	f000 f83e 	bl	8009204 <list_insert_head>
 8009188:	e001      	b.n	800918e <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 800918a:	2301      	movs	r3, #1
 800918c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800918e:	697b      	ldr	r3, [r7, #20]

}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20000974 	.word	0x20000974
 800919c:	200004a4 	.word	0x200004a4
 80091a0:	2000097c 	.word	0x2000097c

080091a4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	605a      	str	r2, [r3, #4]
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091cc:	f3ef 8310 	mrs	r3, PRIMASK
 80091d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80091d2:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80091d6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d102      	bne.n	80091e8 <list_is_empty+0x24>
  {
    return_value = 1;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
 80091e6:	e001      	b.n	80091ec <list_is_empty+0x28>
  }
  else
  {
    return_value = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	75fb      	strb	r3, [r7, #23]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	371c      	adds	r7, #28
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800920e:	f3ef 8310 	mrs	r3, PRIMASK
 8009212:	60fb      	str	r3, [r7, #12]
  return(result);
 8009214:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009218:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	605a      	str	r2, [r3, #4]
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009240:	bf00      	nop
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	60fb      	str	r3, [r7, #12]
  return(result);
 800925c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800925e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009260:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685a      	ldr	r2, [r3, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009288:	bf00      	nop
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800929c:	f3ef 8310 	mrs	r3, PRIMASK
 80092a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092a6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6812      	ldr	r2, [r2, #0]
 80092b0:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6852      	ldr	r2, [r2, #4]
 80092ba:	605a      	str	r2, [r3, #4]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80092c6:	bf00      	nop
 80092c8:	371c      	adds	r7, #28
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b086      	sub	sp, #24
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092dc:	f3ef 8310 	mrs	r3, PRIMASK
 80092e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80092e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092e6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff ffcd 	bl	8009294 <list_remove_node>
  (*node)->next = NULL;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2200      	movs	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009314:	bf00      	nop
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009326:	f3ef 8310 	mrs	r3, PRIMASK
 800932a:	60fb      	str	r3, [r7, #12]
  return(result);
 800932c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800932e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009330:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	685a      	ldr	r2, [r3, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ffa8 	bl	8009294 <list_remove_node>
  (*node)->next = NULL;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2200      	movs	r2, #0
 800934a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2200      	movs	r2, #0
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f383 8810 	msr	PRIMASK, r3
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800935e:	bf00      	nop
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009366:	b480      	push	{r7}
 8009368:	b089      	sub	sp, #36	; 0x24
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009372:	f3ef 8310 	mrs	r3, PRIMASK
 8009376:	613b      	str	r3, [r7, #16]
  return(result);
 8009378:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800937a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800937c:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009384:	e005      	b.n	8009392 <list_get_size+0x2c>
  {
    size++;
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	3301      	adds	r3, #1
 800938a:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d1f5      	bne.n	8009386 <list_get_size+0x20>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f383 8810 	msr	PRIMASK, r3
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80093a4:	69fb      	ldr	r3, [r7, #28]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3724      	adds	r7, #36	; 0x24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
	...

080093b4 <__errno>:
 80093b4:	4b01      	ldr	r3, [pc, #4]	; (80093bc <__errno+0x8>)
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000024 	.word	0x20000024

080093c0 <__sflush_r>:
 80093c0:	898a      	ldrh	r2, [r1, #12]
 80093c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c6:	4605      	mov	r5, r0
 80093c8:	0710      	lsls	r0, r2, #28
 80093ca:	460c      	mov	r4, r1
 80093cc:	d458      	bmi.n	8009480 <__sflush_r+0xc0>
 80093ce:	684b      	ldr	r3, [r1, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc05      	bgt.n	80093e0 <__sflush_r+0x20>
 80093d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dc02      	bgt.n	80093e0 <__sflush_r+0x20>
 80093da:	2000      	movs	r0, #0
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093e2:	2e00      	cmp	r6, #0
 80093e4:	d0f9      	beq.n	80093da <__sflush_r+0x1a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80093ec:	682f      	ldr	r7, [r5, #0]
 80093ee:	6a21      	ldr	r1, [r4, #32]
 80093f0:	602b      	str	r3, [r5, #0]
 80093f2:	d032      	beq.n	800945a <__sflush_r+0x9a>
 80093f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	075a      	lsls	r2, r3, #29
 80093fa:	d505      	bpl.n	8009408 <__sflush_r+0x48>
 80093fc:	6863      	ldr	r3, [r4, #4]
 80093fe:	1ac0      	subs	r0, r0, r3
 8009400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009402:	b10b      	cbz	r3, 8009408 <__sflush_r+0x48>
 8009404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009406:	1ac0      	subs	r0, r0, r3
 8009408:	2300      	movs	r3, #0
 800940a:	4602      	mov	r2, r0
 800940c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800940e:	6a21      	ldr	r1, [r4, #32]
 8009410:	4628      	mov	r0, r5
 8009412:	47b0      	blx	r6
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	89a3      	ldrh	r3, [r4, #12]
 8009418:	d106      	bne.n	8009428 <__sflush_r+0x68>
 800941a:	6829      	ldr	r1, [r5, #0]
 800941c:	291d      	cmp	r1, #29
 800941e:	d848      	bhi.n	80094b2 <__sflush_r+0xf2>
 8009420:	4a29      	ldr	r2, [pc, #164]	; (80094c8 <__sflush_r+0x108>)
 8009422:	40ca      	lsrs	r2, r1
 8009424:	07d6      	lsls	r6, r2, #31
 8009426:	d544      	bpl.n	80094b2 <__sflush_r+0xf2>
 8009428:	2200      	movs	r2, #0
 800942a:	6062      	str	r2, [r4, #4]
 800942c:	04d9      	lsls	r1, r3, #19
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	6022      	str	r2, [r4, #0]
 8009432:	d504      	bpl.n	800943e <__sflush_r+0x7e>
 8009434:	1c42      	adds	r2, r0, #1
 8009436:	d101      	bne.n	800943c <__sflush_r+0x7c>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b903      	cbnz	r3, 800943e <__sflush_r+0x7e>
 800943c:	6560      	str	r0, [r4, #84]	; 0x54
 800943e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009440:	602f      	str	r7, [r5, #0]
 8009442:	2900      	cmp	r1, #0
 8009444:	d0c9      	beq.n	80093da <__sflush_r+0x1a>
 8009446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800944a:	4299      	cmp	r1, r3
 800944c:	d002      	beq.n	8009454 <__sflush_r+0x94>
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f97a 	bl	8009748 <_free_r>
 8009454:	2000      	movs	r0, #0
 8009456:	6360      	str	r0, [r4, #52]	; 0x34
 8009458:	e7c0      	b.n	80093dc <__sflush_r+0x1c>
 800945a:	2301      	movs	r3, #1
 800945c:	4628      	mov	r0, r5
 800945e:	47b0      	blx	r6
 8009460:	1c41      	adds	r1, r0, #1
 8009462:	d1c8      	bne.n	80093f6 <__sflush_r+0x36>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0c5      	beq.n	80093f6 <__sflush_r+0x36>
 800946a:	2b1d      	cmp	r3, #29
 800946c:	d001      	beq.n	8009472 <__sflush_r+0xb2>
 800946e:	2b16      	cmp	r3, #22
 8009470:	d101      	bne.n	8009476 <__sflush_r+0xb6>
 8009472:	602f      	str	r7, [r5, #0]
 8009474:	e7b1      	b.n	80093da <__sflush_r+0x1a>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	e7ad      	b.n	80093dc <__sflush_r+0x1c>
 8009480:	690f      	ldr	r7, [r1, #16]
 8009482:	2f00      	cmp	r7, #0
 8009484:	d0a9      	beq.n	80093da <__sflush_r+0x1a>
 8009486:	0793      	lsls	r3, r2, #30
 8009488:	680e      	ldr	r6, [r1, #0]
 800948a:	bf08      	it	eq
 800948c:	694b      	ldreq	r3, [r1, #20]
 800948e:	600f      	str	r7, [r1, #0]
 8009490:	bf18      	it	ne
 8009492:	2300      	movne	r3, #0
 8009494:	eba6 0807 	sub.w	r8, r6, r7
 8009498:	608b      	str	r3, [r1, #8]
 800949a:	f1b8 0f00 	cmp.w	r8, #0
 800949e:	dd9c      	ble.n	80093da <__sflush_r+0x1a>
 80094a0:	4643      	mov	r3, r8
 80094a2:	463a      	mov	r2, r7
 80094a4:	6a21      	ldr	r1, [r4, #32]
 80094a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094a8:	4628      	mov	r0, r5
 80094aa:	47b0      	blx	r6
 80094ac:	2800      	cmp	r0, #0
 80094ae:	dc06      	bgt.n	80094be <__sflush_r+0xfe>
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094bc:	e78e      	b.n	80093dc <__sflush_r+0x1c>
 80094be:	4407      	add	r7, r0
 80094c0:	eba8 0800 	sub.w	r8, r8, r0
 80094c4:	e7e9      	b.n	800949a <__sflush_r+0xda>
 80094c6:	bf00      	nop
 80094c8:	20400001 	.word	0x20400001

080094cc <_fflush_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	690b      	ldr	r3, [r1, #16]
 80094d0:	4605      	mov	r5, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	b1db      	cbz	r3, 800950e <_fflush_r+0x42>
 80094d6:	b118      	cbz	r0, 80094e0 <_fflush_r+0x14>
 80094d8:	6983      	ldr	r3, [r0, #24]
 80094da:	b90b      	cbnz	r3, 80094e0 <_fflush_r+0x14>
 80094dc:	f000 f872 	bl	80095c4 <__sinit>
 80094e0:	4b0c      	ldr	r3, [pc, #48]	; (8009514 <_fflush_r+0x48>)
 80094e2:	429c      	cmp	r4, r3
 80094e4:	d109      	bne.n	80094fa <_fflush_r+0x2e>
 80094e6:	686c      	ldr	r4, [r5, #4]
 80094e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ec:	b17b      	cbz	r3, 800950e <_fflush_r+0x42>
 80094ee:	4621      	mov	r1, r4
 80094f0:	4628      	mov	r0, r5
 80094f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094f6:	f7ff bf63 	b.w	80093c0 <__sflush_r>
 80094fa:	4b07      	ldr	r3, [pc, #28]	; (8009518 <_fflush_r+0x4c>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d101      	bne.n	8009504 <_fflush_r+0x38>
 8009500:	68ac      	ldr	r4, [r5, #8]
 8009502:	e7f1      	b.n	80094e8 <_fflush_r+0x1c>
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <_fflush_r+0x50>)
 8009506:	429c      	cmp	r4, r3
 8009508:	bf08      	it	eq
 800950a:	68ec      	ldreq	r4, [r5, #12]
 800950c:	e7ec      	b.n	80094e8 <_fflush_r+0x1c>
 800950e:	2000      	movs	r0, #0
 8009510:	bd38      	pop	{r3, r4, r5, pc}
 8009512:	bf00      	nop
 8009514:	0800a634 	.word	0x0800a634
 8009518:	0800a654 	.word	0x0800a654
 800951c:	0800a614 	.word	0x0800a614

08009520 <fflush>:
 8009520:	4601      	mov	r1, r0
 8009522:	b920      	cbnz	r0, 800952e <fflush+0xe>
 8009524:	4b04      	ldr	r3, [pc, #16]	; (8009538 <fflush+0x18>)
 8009526:	4905      	ldr	r1, [pc, #20]	; (800953c <fflush+0x1c>)
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f000 b8b7 	b.w	800969c <_fwalk_reent>
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <fflush+0x20>)
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	f7ff bfcb 	b.w	80094cc <_fflush_r>
 8009536:	bf00      	nop
 8009538:	0800a674 	.word	0x0800a674
 800953c:	080094cd 	.word	0x080094cd
 8009540:	20000024 	.word	0x20000024

08009544 <std>:
 8009544:	2300      	movs	r3, #0
 8009546:	b510      	push	{r4, lr}
 8009548:	4604      	mov	r4, r0
 800954a:	e9c0 3300 	strd	r3, r3, [r0]
 800954e:	6083      	str	r3, [r0, #8]
 8009550:	8181      	strh	r1, [r0, #12]
 8009552:	6643      	str	r3, [r0, #100]	; 0x64
 8009554:	81c2      	strh	r2, [r0, #14]
 8009556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800955a:	6183      	str	r3, [r0, #24]
 800955c:	4619      	mov	r1, r3
 800955e:	2208      	movs	r2, #8
 8009560:	305c      	adds	r0, #92	; 0x5c
 8009562:	f000 f8e8 	bl	8009736 <memset>
 8009566:	4b05      	ldr	r3, [pc, #20]	; (800957c <std+0x38>)
 8009568:	6263      	str	r3, [r4, #36]	; 0x24
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <std+0x3c>)
 800956c:	62a3      	str	r3, [r4, #40]	; 0x28
 800956e:	4b05      	ldr	r3, [pc, #20]	; (8009584 <std+0x40>)
 8009570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009572:	4b05      	ldr	r3, [pc, #20]	; (8009588 <std+0x44>)
 8009574:	6224      	str	r4, [r4, #32]
 8009576:	6323      	str	r3, [r4, #48]	; 0x30
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	080099d9 	.word	0x080099d9
 8009580:	080099fb 	.word	0x080099fb
 8009584:	08009a33 	.word	0x08009a33
 8009588:	08009a57 	.word	0x08009a57

0800958c <_cleanup_r>:
 800958c:	4901      	ldr	r1, [pc, #4]	; (8009594 <_cleanup_r+0x8>)
 800958e:	f000 b885 	b.w	800969c <_fwalk_reent>
 8009592:	bf00      	nop
 8009594:	080094cd 	.word	0x080094cd

08009598 <__sfmoreglue>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	1e4a      	subs	r2, r1, #1
 800959c:	2568      	movs	r5, #104	; 0x68
 800959e:	4355      	muls	r5, r2
 80095a0:	460e      	mov	r6, r1
 80095a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095a6:	f000 f91d 	bl	80097e4 <_malloc_r>
 80095aa:	4604      	mov	r4, r0
 80095ac:	b140      	cbz	r0, 80095c0 <__sfmoreglue+0x28>
 80095ae:	2100      	movs	r1, #0
 80095b0:	e9c0 1600 	strd	r1, r6, [r0]
 80095b4:	300c      	adds	r0, #12
 80095b6:	60a0      	str	r0, [r4, #8]
 80095b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095bc:	f000 f8bb 	bl	8009736 <memset>
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}

080095c4 <__sinit>:
 80095c4:	6983      	ldr	r3, [r0, #24]
 80095c6:	b510      	push	{r4, lr}
 80095c8:	4604      	mov	r4, r0
 80095ca:	bb33      	cbnz	r3, 800961a <__sinit+0x56>
 80095cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80095d0:	6503      	str	r3, [r0, #80]	; 0x50
 80095d2:	4b12      	ldr	r3, [pc, #72]	; (800961c <__sinit+0x58>)
 80095d4:	4a12      	ldr	r2, [pc, #72]	; (8009620 <__sinit+0x5c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6282      	str	r2, [r0, #40]	; 0x28
 80095da:	4298      	cmp	r0, r3
 80095dc:	bf04      	itt	eq
 80095de:	2301      	moveq	r3, #1
 80095e0:	6183      	streq	r3, [r0, #24]
 80095e2:	f000 f81f 	bl	8009624 <__sfp>
 80095e6:	6060      	str	r0, [r4, #4]
 80095e8:	4620      	mov	r0, r4
 80095ea:	f000 f81b 	bl	8009624 <__sfp>
 80095ee:	60a0      	str	r0, [r4, #8]
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 f817 	bl	8009624 <__sfp>
 80095f6:	2200      	movs	r2, #0
 80095f8:	60e0      	str	r0, [r4, #12]
 80095fa:	2104      	movs	r1, #4
 80095fc:	6860      	ldr	r0, [r4, #4]
 80095fe:	f7ff ffa1 	bl	8009544 <std>
 8009602:	2201      	movs	r2, #1
 8009604:	2109      	movs	r1, #9
 8009606:	68a0      	ldr	r0, [r4, #8]
 8009608:	f7ff ff9c 	bl	8009544 <std>
 800960c:	2202      	movs	r2, #2
 800960e:	2112      	movs	r1, #18
 8009610:	68e0      	ldr	r0, [r4, #12]
 8009612:	f7ff ff97 	bl	8009544 <std>
 8009616:	2301      	movs	r3, #1
 8009618:	61a3      	str	r3, [r4, #24]
 800961a:	bd10      	pop	{r4, pc}
 800961c:	0800a674 	.word	0x0800a674
 8009620:	0800958d 	.word	0x0800958d

08009624 <__sfp>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <__sfp+0x70>)
 8009628:	681e      	ldr	r6, [r3, #0]
 800962a:	69b3      	ldr	r3, [r6, #24]
 800962c:	4607      	mov	r7, r0
 800962e:	b913      	cbnz	r3, 8009636 <__sfp+0x12>
 8009630:	4630      	mov	r0, r6
 8009632:	f7ff ffc7 	bl	80095c4 <__sinit>
 8009636:	3648      	adds	r6, #72	; 0x48
 8009638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800963c:	3b01      	subs	r3, #1
 800963e:	d503      	bpl.n	8009648 <__sfp+0x24>
 8009640:	6833      	ldr	r3, [r6, #0]
 8009642:	b133      	cbz	r3, 8009652 <__sfp+0x2e>
 8009644:	6836      	ldr	r6, [r6, #0]
 8009646:	e7f7      	b.n	8009638 <__sfp+0x14>
 8009648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800964c:	b16d      	cbz	r5, 800966a <__sfp+0x46>
 800964e:	3468      	adds	r4, #104	; 0x68
 8009650:	e7f4      	b.n	800963c <__sfp+0x18>
 8009652:	2104      	movs	r1, #4
 8009654:	4638      	mov	r0, r7
 8009656:	f7ff ff9f 	bl	8009598 <__sfmoreglue>
 800965a:	6030      	str	r0, [r6, #0]
 800965c:	2800      	cmp	r0, #0
 800965e:	d1f1      	bne.n	8009644 <__sfp+0x20>
 8009660:	230c      	movs	r3, #12
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4604      	mov	r4, r0
 8009666:	4620      	mov	r0, r4
 8009668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800966a:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <__sfp+0x74>)
 800966c:	6665      	str	r5, [r4, #100]	; 0x64
 800966e:	e9c4 5500 	strd	r5, r5, [r4]
 8009672:	60a5      	str	r5, [r4, #8]
 8009674:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009678:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800967c:	2208      	movs	r2, #8
 800967e:	4629      	mov	r1, r5
 8009680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009684:	f000 f857 	bl	8009736 <memset>
 8009688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800968c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009690:	e7e9      	b.n	8009666 <__sfp+0x42>
 8009692:	bf00      	nop
 8009694:	0800a674 	.word	0x0800a674
 8009698:	ffff0001 	.word	0xffff0001

0800969c <_fwalk_reent>:
 800969c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80096a8:	2600      	movs	r6, #0
 80096aa:	b914      	cbnz	r4, 80096b2 <_fwalk_reent+0x16>
 80096ac:	4630      	mov	r0, r6
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80096b6:	3f01      	subs	r7, #1
 80096b8:	d501      	bpl.n	80096be <_fwalk_reent+0x22>
 80096ba:	6824      	ldr	r4, [r4, #0]
 80096bc:	e7f5      	b.n	80096aa <_fwalk_reent+0xe>
 80096be:	89ab      	ldrh	r3, [r5, #12]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d907      	bls.n	80096d4 <_fwalk_reent+0x38>
 80096c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096c8:	3301      	adds	r3, #1
 80096ca:	d003      	beq.n	80096d4 <_fwalk_reent+0x38>
 80096cc:	4629      	mov	r1, r5
 80096ce:	4640      	mov	r0, r8
 80096d0:	47c8      	blx	r9
 80096d2:	4306      	orrs	r6, r0
 80096d4:	3568      	adds	r5, #104	; 0x68
 80096d6:	e7ee      	b.n	80096b6 <_fwalk_reent+0x1a>

080096d8 <__libc_init_array>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4e0d      	ldr	r6, [pc, #52]	; (8009710 <__libc_init_array+0x38>)
 80096dc:	4c0d      	ldr	r4, [pc, #52]	; (8009714 <__libc_init_array+0x3c>)
 80096de:	1ba4      	subs	r4, r4, r6
 80096e0:	10a4      	asrs	r4, r4, #2
 80096e2:	2500      	movs	r5, #0
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d109      	bne.n	80096fc <__libc_init_array+0x24>
 80096e8:	4e0b      	ldr	r6, [pc, #44]	; (8009718 <__libc_init_array+0x40>)
 80096ea:	4c0c      	ldr	r4, [pc, #48]	; (800971c <__libc_init_array+0x44>)
 80096ec:	f000 fe44 	bl	800a378 <_init>
 80096f0:	1ba4      	subs	r4, r4, r6
 80096f2:	10a4      	asrs	r4, r4, #2
 80096f4:	2500      	movs	r5, #0
 80096f6:	42a5      	cmp	r5, r4
 80096f8:	d105      	bne.n	8009706 <__libc_init_array+0x2e>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009700:	4798      	blx	r3
 8009702:	3501      	adds	r5, #1
 8009704:	e7ee      	b.n	80096e4 <__libc_init_array+0xc>
 8009706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970a:	4798      	blx	r3
 800970c:	3501      	adds	r5, #1
 800970e:	e7f2      	b.n	80096f6 <__libc_init_array+0x1e>
 8009710:	0800a6b4 	.word	0x0800a6b4
 8009714:	0800a6b4 	.word	0x0800a6b4
 8009718:	0800a6b4 	.word	0x0800a6b4
 800971c:	0800a6b8 	.word	0x0800a6b8

08009720 <memcpy>:
 8009720:	b510      	push	{r4, lr}
 8009722:	1e43      	subs	r3, r0, #1
 8009724:	440a      	add	r2, r1
 8009726:	4291      	cmp	r1, r2
 8009728:	d100      	bne.n	800972c <memcpy+0xc>
 800972a:	bd10      	pop	{r4, pc}
 800972c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009734:	e7f7      	b.n	8009726 <memcpy+0x6>

08009736 <memset>:
 8009736:	4402      	add	r2, r0
 8009738:	4603      	mov	r3, r0
 800973a:	4293      	cmp	r3, r2
 800973c:	d100      	bne.n	8009740 <memset+0xa>
 800973e:	4770      	bx	lr
 8009740:	f803 1b01 	strb.w	r1, [r3], #1
 8009744:	e7f9      	b.n	800973a <memset+0x4>
	...

08009748 <_free_r>:
 8009748:	b538      	push	{r3, r4, r5, lr}
 800974a:	4605      	mov	r5, r0
 800974c:	2900      	cmp	r1, #0
 800974e:	d045      	beq.n	80097dc <_free_r+0x94>
 8009750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009754:	1f0c      	subs	r4, r1, #4
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfb8      	it	lt
 800975a:	18e4      	addlt	r4, r4, r3
 800975c:	f000 fad8 	bl	8009d10 <__malloc_lock>
 8009760:	4a1f      	ldr	r2, [pc, #124]	; (80097e0 <_free_r+0x98>)
 8009762:	6813      	ldr	r3, [r2, #0]
 8009764:	4610      	mov	r0, r2
 8009766:	b933      	cbnz	r3, 8009776 <_free_r+0x2e>
 8009768:	6063      	str	r3, [r4, #4]
 800976a:	6014      	str	r4, [r2, #0]
 800976c:	4628      	mov	r0, r5
 800976e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009772:	f000 bace 	b.w	8009d12 <__malloc_unlock>
 8009776:	42a3      	cmp	r3, r4
 8009778:	d90c      	bls.n	8009794 <_free_r+0x4c>
 800977a:	6821      	ldr	r1, [r4, #0]
 800977c:	1862      	adds	r2, r4, r1
 800977e:	4293      	cmp	r3, r2
 8009780:	bf04      	itt	eq
 8009782:	681a      	ldreq	r2, [r3, #0]
 8009784:	685b      	ldreq	r3, [r3, #4]
 8009786:	6063      	str	r3, [r4, #4]
 8009788:	bf04      	itt	eq
 800978a:	1852      	addeq	r2, r2, r1
 800978c:	6022      	streq	r2, [r4, #0]
 800978e:	6004      	str	r4, [r0, #0]
 8009790:	e7ec      	b.n	800976c <_free_r+0x24>
 8009792:	4613      	mov	r3, r2
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	b10a      	cbz	r2, 800979c <_free_r+0x54>
 8009798:	42a2      	cmp	r2, r4
 800979a:	d9fa      	bls.n	8009792 <_free_r+0x4a>
 800979c:	6819      	ldr	r1, [r3, #0]
 800979e:	1858      	adds	r0, r3, r1
 80097a0:	42a0      	cmp	r0, r4
 80097a2:	d10b      	bne.n	80097bc <_free_r+0x74>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	4401      	add	r1, r0
 80097a8:	1858      	adds	r0, r3, r1
 80097aa:	4282      	cmp	r2, r0
 80097ac:	6019      	str	r1, [r3, #0]
 80097ae:	d1dd      	bne.n	800976c <_free_r+0x24>
 80097b0:	6810      	ldr	r0, [r2, #0]
 80097b2:	6852      	ldr	r2, [r2, #4]
 80097b4:	605a      	str	r2, [r3, #4]
 80097b6:	4401      	add	r1, r0
 80097b8:	6019      	str	r1, [r3, #0]
 80097ba:	e7d7      	b.n	800976c <_free_r+0x24>
 80097bc:	d902      	bls.n	80097c4 <_free_r+0x7c>
 80097be:	230c      	movs	r3, #12
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	e7d3      	b.n	800976c <_free_r+0x24>
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	1821      	adds	r1, r4, r0
 80097c8:	428a      	cmp	r2, r1
 80097ca:	bf04      	itt	eq
 80097cc:	6811      	ldreq	r1, [r2, #0]
 80097ce:	6852      	ldreq	r2, [r2, #4]
 80097d0:	6062      	str	r2, [r4, #4]
 80097d2:	bf04      	itt	eq
 80097d4:	1809      	addeq	r1, r1, r0
 80097d6:	6021      	streq	r1, [r4, #0]
 80097d8:	605c      	str	r4, [r3, #4]
 80097da:	e7c7      	b.n	800976c <_free_r+0x24>
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
 80097de:	bf00      	nop
 80097e0:	200004c4 	.word	0x200004c4

080097e4 <_malloc_r>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	1ccd      	adds	r5, r1, #3
 80097e8:	f025 0503 	bic.w	r5, r5, #3
 80097ec:	3508      	adds	r5, #8
 80097ee:	2d0c      	cmp	r5, #12
 80097f0:	bf38      	it	cc
 80097f2:	250c      	movcc	r5, #12
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	4606      	mov	r6, r0
 80097f8:	db01      	blt.n	80097fe <_malloc_r+0x1a>
 80097fa:	42a9      	cmp	r1, r5
 80097fc:	d903      	bls.n	8009806 <_malloc_r+0x22>
 80097fe:	230c      	movs	r3, #12
 8009800:	6033      	str	r3, [r6, #0]
 8009802:	2000      	movs	r0, #0
 8009804:	bd70      	pop	{r4, r5, r6, pc}
 8009806:	f000 fa83 	bl	8009d10 <__malloc_lock>
 800980a:	4a21      	ldr	r2, [pc, #132]	; (8009890 <_malloc_r+0xac>)
 800980c:	6814      	ldr	r4, [r2, #0]
 800980e:	4621      	mov	r1, r4
 8009810:	b991      	cbnz	r1, 8009838 <_malloc_r+0x54>
 8009812:	4c20      	ldr	r4, [pc, #128]	; (8009894 <_malloc_r+0xb0>)
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	b91b      	cbnz	r3, 8009820 <_malloc_r+0x3c>
 8009818:	4630      	mov	r0, r6
 800981a:	f000 f8cd 	bl	80099b8 <_sbrk_r>
 800981e:	6020      	str	r0, [r4, #0]
 8009820:	4629      	mov	r1, r5
 8009822:	4630      	mov	r0, r6
 8009824:	f000 f8c8 	bl	80099b8 <_sbrk_r>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d124      	bne.n	8009876 <_malloc_r+0x92>
 800982c:	230c      	movs	r3, #12
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	4630      	mov	r0, r6
 8009832:	f000 fa6e 	bl	8009d12 <__malloc_unlock>
 8009836:	e7e4      	b.n	8009802 <_malloc_r+0x1e>
 8009838:	680b      	ldr	r3, [r1, #0]
 800983a:	1b5b      	subs	r3, r3, r5
 800983c:	d418      	bmi.n	8009870 <_malloc_r+0x8c>
 800983e:	2b0b      	cmp	r3, #11
 8009840:	d90f      	bls.n	8009862 <_malloc_r+0x7e>
 8009842:	600b      	str	r3, [r1, #0]
 8009844:	50cd      	str	r5, [r1, r3]
 8009846:	18cc      	adds	r4, r1, r3
 8009848:	4630      	mov	r0, r6
 800984a:	f000 fa62 	bl	8009d12 <__malloc_unlock>
 800984e:	f104 000b 	add.w	r0, r4, #11
 8009852:	1d23      	adds	r3, r4, #4
 8009854:	f020 0007 	bic.w	r0, r0, #7
 8009858:	1ac3      	subs	r3, r0, r3
 800985a:	d0d3      	beq.n	8009804 <_malloc_r+0x20>
 800985c:	425a      	negs	r2, r3
 800985e:	50e2      	str	r2, [r4, r3]
 8009860:	e7d0      	b.n	8009804 <_malloc_r+0x20>
 8009862:	428c      	cmp	r4, r1
 8009864:	684b      	ldr	r3, [r1, #4]
 8009866:	bf16      	itet	ne
 8009868:	6063      	strne	r3, [r4, #4]
 800986a:	6013      	streq	r3, [r2, #0]
 800986c:	460c      	movne	r4, r1
 800986e:	e7eb      	b.n	8009848 <_malloc_r+0x64>
 8009870:	460c      	mov	r4, r1
 8009872:	6849      	ldr	r1, [r1, #4]
 8009874:	e7cc      	b.n	8009810 <_malloc_r+0x2c>
 8009876:	1cc4      	adds	r4, r0, #3
 8009878:	f024 0403 	bic.w	r4, r4, #3
 800987c:	42a0      	cmp	r0, r4
 800987e:	d005      	beq.n	800988c <_malloc_r+0xa8>
 8009880:	1a21      	subs	r1, r4, r0
 8009882:	4630      	mov	r0, r6
 8009884:	f000 f898 	bl	80099b8 <_sbrk_r>
 8009888:	3001      	adds	r0, #1
 800988a:	d0cf      	beq.n	800982c <_malloc_r+0x48>
 800988c:	6025      	str	r5, [r4, #0]
 800988e:	e7db      	b.n	8009848 <_malloc_r+0x64>
 8009890:	200004c4 	.word	0x200004c4
 8009894:	200004c8 	.word	0x200004c8

08009898 <iprintf>:
 8009898:	b40f      	push	{r0, r1, r2, r3}
 800989a:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <iprintf+0x2c>)
 800989c:	b513      	push	{r0, r1, r4, lr}
 800989e:	681c      	ldr	r4, [r3, #0]
 80098a0:	b124      	cbz	r4, 80098ac <iprintf+0x14>
 80098a2:	69a3      	ldr	r3, [r4, #24]
 80098a4:	b913      	cbnz	r3, 80098ac <iprintf+0x14>
 80098a6:	4620      	mov	r0, r4
 80098a8:	f7ff fe8c 	bl	80095c4 <__sinit>
 80098ac:	ab05      	add	r3, sp, #20
 80098ae:	9a04      	ldr	r2, [sp, #16]
 80098b0:	68a1      	ldr	r1, [r4, #8]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fa57 	bl	8009d68 <_vfiprintf_r>
 80098ba:	b002      	add	sp, #8
 80098bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098c0:	b004      	add	sp, #16
 80098c2:	4770      	bx	lr
 80098c4:	20000024 	.word	0x20000024

080098c8 <putchar>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4b08      	ldr	r3, [pc, #32]	; (80098ec <putchar+0x24>)
 80098cc:	681c      	ldr	r4, [r3, #0]
 80098ce:	4605      	mov	r5, r0
 80098d0:	b124      	cbz	r4, 80098dc <putchar+0x14>
 80098d2:	69a3      	ldr	r3, [r4, #24]
 80098d4:	b913      	cbnz	r3, 80098dc <putchar+0x14>
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff fe74 	bl	80095c4 <__sinit>
 80098dc:	68a2      	ldr	r2, [r4, #8]
 80098de:	4629      	mov	r1, r5
 80098e0:	4620      	mov	r0, r4
 80098e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098e6:	f000 bcdd 	b.w	800a2a4 <_putc_r>
 80098ea:	bf00      	nop
 80098ec:	20000024 	.word	0x20000024

080098f0 <_puts_r>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	460e      	mov	r6, r1
 80098f4:	4605      	mov	r5, r0
 80098f6:	b118      	cbz	r0, 8009900 <_puts_r+0x10>
 80098f8:	6983      	ldr	r3, [r0, #24]
 80098fa:	b90b      	cbnz	r3, 8009900 <_puts_r+0x10>
 80098fc:	f7ff fe62 	bl	80095c4 <__sinit>
 8009900:	69ab      	ldr	r3, [r5, #24]
 8009902:	68ac      	ldr	r4, [r5, #8]
 8009904:	b913      	cbnz	r3, 800990c <_puts_r+0x1c>
 8009906:	4628      	mov	r0, r5
 8009908:	f7ff fe5c 	bl	80095c4 <__sinit>
 800990c:	4b23      	ldr	r3, [pc, #140]	; (800999c <_puts_r+0xac>)
 800990e:	429c      	cmp	r4, r3
 8009910:	d117      	bne.n	8009942 <_puts_r+0x52>
 8009912:	686c      	ldr	r4, [r5, #4]
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	071b      	lsls	r3, r3, #28
 8009918:	d51d      	bpl.n	8009956 <_puts_r+0x66>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b1db      	cbz	r3, 8009956 <_puts_r+0x66>
 800991e:	3e01      	subs	r6, #1
 8009920:	68a3      	ldr	r3, [r4, #8]
 8009922:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009926:	3b01      	subs	r3, #1
 8009928:	60a3      	str	r3, [r4, #8]
 800992a:	b9e9      	cbnz	r1, 8009968 <_puts_r+0x78>
 800992c:	2b00      	cmp	r3, #0
 800992e:	da2e      	bge.n	800998e <_puts_r+0x9e>
 8009930:	4622      	mov	r2, r4
 8009932:	210a      	movs	r1, #10
 8009934:	4628      	mov	r0, r5
 8009936:	f000 f893 	bl	8009a60 <__swbuf_r>
 800993a:	3001      	adds	r0, #1
 800993c:	d011      	beq.n	8009962 <_puts_r+0x72>
 800993e:	200a      	movs	r0, #10
 8009940:	e011      	b.n	8009966 <_puts_r+0x76>
 8009942:	4b17      	ldr	r3, [pc, #92]	; (80099a0 <_puts_r+0xb0>)
 8009944:	429c      	cmp	r4, r3
 8009946:	d101      	bne.n	800994c <_puts_r+0x5c>
 8009948:	68ac      	ldr	r4, [r5, #8]
 800994a:	e7e3      	b.n	8009914 <_puts_r+0x24>
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <_puts_r+0xb4>)
 800994e:	429c      	cmp	r4, r3
 8009950:	bf08      	it	eq
 8009952:	68ec      	ldreq	r4, [r5, #12]
 8009954:	e7de      	b.n	8009914 <_puts_r+0x24>
 8009956:	4621      	mov	r1, r4
 8009958:	4628      	mov	r0, r5
 800995a:	f000 f8e5 	bl	8009b28 <__swsetup_r>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0dd      	beq.n	800991e <_puts_r+0x2e>
 8009962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009966:	bd70      	pop	{r4, r5, r6, pc}
 8009968:	2b00      	cmp	r3, #0
 800996a:	da04      	bge.n	8009976 <_puts_r+0x86>
 800996c:	69a2      	ldr	r2, [r4, #24]
 800996e:	429a      	cmp	r2, r3
 8009970:	dc06      	bgt.n	8009980 <_puts_r+0x90>
 8009972:	290a      	cmp	r1, #10
 8009974:	d004      	beq.n	8009980 <_puts_r+0x90>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	7019      	strb	r1, [r3, #0]
 800997e:	e7cf      	b.n	8009920 <_puts_r+0x30>
 8009980:	4622      	mov	r2, r4
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f86c 	bl	8009a60 <__swbuf_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d1c9      	bne.n	8009920 <_puts_r+0x30>
 800998c:	e7e9      	b.n	8009962 <_puts_r+0x72>
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	200a      	movs	r0, #10
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	7018      	strb	r0, [r3, #0]
 8009998:	e7e5      	b.n	8009966 <_puts_r+0x76>
 800999a:	bf00      	nop
 800999c:	0800a634 	.word	0x0800a634
 80099a0:	0800a654 	.word	0x0800a654
 80099a4:	0800a614 	.word	0x0800a614

080099a8 <puts>:
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <puts+0xc>)
 80099aa:	4601      	mov	r1, r0
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	f7ff bf9f 	b.w	80098f0 <_puts_r>
 80099b2:	bf00      	nop
 80099b4:	20000024 	.word	0x20000024

080099b8 <_sbrk_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4c06      	ldr	r4, [pc, #24]	; (80099d4 <_sbrk_r+0x1c>)
 80099bc:	2300      	movs	r3, #0
 80099be:	4605      	mov	r5, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	f7f8 fc72 	bl	80022ac <_sbrk>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_sbrk_r+0x1a>
 80099cc:	6823      	ldr	r3, [r4, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_sbrk_r+0x1a>
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	20000984 	.word	0x20000984

080099d8 <__sread>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	f000 fc96 	bl	800a310 <_read_r>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	bfab      	itete	ge
 80099e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099ea:	89a3      	ldrhlt	r3, [r4, #12]
 80099ec:	181b      	addge	r3, r3, r0
 80099ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099f2:	bfac      	ite	ge
 80099f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099f6:	81a3      	strhlt	r3, [r4, #12]
 80099f8:	bd10      	pop	{r4, pc}

080099fa <__swrite>:
 80099fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099fe:	461f      	mov	r7, r3
 8009a00:	898b      	ldrh	r3, [r1, #12]
 8009a02:	05db      	lsls	r3, r3, #23
 8009a04:	4605      	mov	r5, r0
 8009a06:	460c      	mov	r4, r1
 8009a08:	4616      	mov	r6, r2
 8009a0a:	d505      	bpl.n	8009a18 <__swrite+0x1e>
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	f000 f906 	bl	8009c24 <_lseek_r>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a22:	81a3      	strh	r3, [r4, #12]
 8009a24:	4632      	mov	r2, r6
 8009a26:	463b      	mov	r3, r7
 8009a28:	4628      	mov	r0, r5
 8009a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	f000 b869 	b.w	8009b04 <_write_r>

08009a32 <__sseek>:
 8009a32:	b510      	push	{r4, lr}
 8009a34:	460c      	mov	r4, r1
 8009a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3a:	f000 f8f3 	bl	8009c24 <_lseek_r>
 8009a3e:	1c43      	adds	r3, r0, #1
 8009a40:	89a3      	ldrh	r3, [r4, #12]
 8009a42:	bf15      	itete	ne
 8009a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a4e:	81a3      	strheq	r3, [r4, #12]
 8009a50:	bf18      	it	ne
 8009a52:	81a3      	strhne	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__sclose>:
 8009a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5a:	f000 b8d3 	b.w	8009c04 <_close_r>
	...

08009a60 <__swbuf_r>:
 8009a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a62:	460e      	mov	r6, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	4605      	mov	r5, r0
 8009a68:	b118      	cbz	r0, 8009a72 <__swbuf_r+0x12>
 8009a6a:	6983      	ldr	r3, [r0, #24]
 8009a6c:	b90b      	cbnz	r3, 8009a72 <__swbuf_r+0x12>
 8009a6e:	f7ff fda9 	bl	80095c4 <__sinit>
 8009a72:	4b21      	ldr	r3, [pc, #132]	; (8009af8 <__swbuf_r+0x98>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	d12a      	bne.n	8009ace <__swbuf_r+0x6e>
 8009a78:	686c      	ldr	r4, [r5, #4]
 8009a7a:	69a3      	ldr	r3, [r4, #24]
 8009a7c:	60a3      	str	r3, [r4, #8]
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	071a      	lsls	r2, r3, #28
 8009a82:	d52e      	bpl.n	8009ae2 <__swbuf_r+0x82>
 8009a84:	6923      	ldr	r3, [r4, #16]
 8009a86:	b363      	cbz	r3, 8009ae2 <__swbuf_r+0x82>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	6820      	ldr	r0, [r4, #0]
 8009a8c:	1ac0      	subs	r0, r0, r3
 8009a8e:	6963      	ldr	r3, [r4, #20]
 8009a90:	b2f6      	uxtb	r6, r6
 8009a92:	4283      	cmp	r3, r0
 8009a94:	4637      	mov	r7, r6
 8009a96:	dc04      	bgt.n	8009aa2 <__swbuf_r+0x42>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f7ff fd16 	bl	80094cc <_fflush_r>
 8009aa0:	bb28      	cbnz	r0, 8009aee <__swbuf_r+0x8e>
 8009aa2:	68a3      	ldr	r3, [r4, #8]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	6823      	ldr	r3, [r4, #0]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	6022      	str	r2, [r4, #0]
 8009aae:	701e      	strb	r6, [r3, #0]
 8009ab0:	6963      	ldr	r3, [r4, #20]
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	4283      	cmp	r3, r0
 8009ab6:	d004      	beq.n	8009ac2 <__swbuf_r+0x62>
 8009ab8:	89a3      	ldrh	r3, [r4, #12]
 8009aba:	07db      	lsls	r3, r3, #31
 8009abc:	d519      	bpl.n	8009af2 <__swbuf_r+0x92>
 8009abe:	2e0a      	cmp	r6, #10
 8009ac0:	d117      	bne.n	8009af2 <__swbuf_r+0x92>
 8009ac2:	4621      	mov	r1, r4
 8009ac4:	4628      	mov	r0, r5
 8009ac6:	f7ff fd01 	bl	80094cc <_fflush_r>
 8009aca:	b190      	cbz	r0, 8009af2 <__swbuf_r+0x92>
 8009acc:	e00f      	b.n	8009aee <__swbuf_r+0x8e>
 8009ace:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <__swbuf_r+0x9c>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d101      	bne.n	8009ad8 <__swbuf_r+0x78>
 8009ad4:	68ac      	ldr	r4, [r5, #8]
 8009ad6:	e7d0      	b.n	8009a7a <__swbuf_r+0x1a>
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <__swbuf_r+0xa0>)
 8009ada:	429c      	cmp	r4, r3
 8009adc:	bf08      	it	eq
 8009ade:	68ec      	ldreq	r4, [r5, #12]
 8009ae0:	e7cb      	b.n	8009a7a <__swbuf_r+0x1a>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f81f 	bl	8009b28 <__swsetup_r>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0cc      	beq.n	8009a88 <__swbuf_r+0x28>
 8009aee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009af2:	4638      	mov	r0, r7
 8009af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af6:	bf00      	nop
 8009af8:	0800a634 	.word	0x0800a634
 8009afc:	0800a654 	.word	0x0800a654
 8009b00:	0800a614 	.word	0x0800a614

08009b04 <_write_r>:
 8009b04:	b538      	push	{r3, r4, r5, lr}
 8009b06:	4c07      	ldr	r4, [pc, #28]	; (8009b24 <_write_r+0x20>)
 8009b08:	4605      	mov	r5, r0
 8009b0a:	4608      	mov	r0, r1
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6022      	str	r2, [r4, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	f7f8 fb79 	bl	800220a <_write>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_write_r+0x1e>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_write_r+0x1e>
 8009b20:	602b      	str	r3, [r5, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000984 	.word	0x20000984

08009b28 <__swsetup_r>:
 8009b28:	4b32      	ldr	r3, [pc, #200]	; (8009bf4 <__swsetup_r+0xcc>)
 8009b2a:	b570      	push	{r4, r5, r6, lr}
 8009b2c:	681d      	ldr	r5, [r3, #0]
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460c      	mov	r4, r1
 8009b32:	b125      	cbz	r5, 8009b3e <__swsetup_r+0x16>
 8009b34:	69ab      	ldr	r3, [r5, #24]
 8009b36:	b913      	cbnz	r3, 8009b3e <__swsetup_r+0x16>
 8009b38:	4628      	mov	r0, r5
 8009b3a:	f7ff fd43 	bl	80095c4 <__sinit>
 8009b3e:	4b2e      	ldr	r3, [pc, #184]	; (8009bf8 <__swsetup_r+0xd0>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	d10f      	bne.n	8009b64 <__swsetup_r+0x3c>
 8009b44:	686c      	ldr	r4, [r5, #4]
 8009b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	0715      	lsls	r5, r2, #28
 8009b4e:	d42c      	bmi.n	8009baa <__swsetup_r+0x82>
 8009b50:	06d0      	lsls	r0, r2, #27
 8009b52:	d411      	bmi.n	8009b78 <__swsetup_r+0x50>
 8009b54:	2209      	movs	r2, #9
 8009b56:	6032      	str	r2, [r6, #0]
 8009b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b62:	e03e      	b.n	8009be2 <__swsetup_r+0xba>
 8009b64:	4b25      	ldr	r3, [pc, #148]	; (8009bfc <__swsetup_r+0xd4>)
 8009b66:	429c      	cmp	r4, r3
 8009b68:	d101      	bne.n	8009b6e <__swsetup_r+0x46>
 8009b6a:	68ac      	ldr	r4, [r5, #8]
 8009b6c:	e7eb      	b.n	8009b46 <__swsetup_r+0x1e>
 8009b6e:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <__swsetup_r+0xd8>)
 8009b70:	429c      	cmp	r4, r3
 8009b72:	bf08      	it	eq
 8009b74:	68ec      	ldreq	r4, [r5, #12]
 8009b76:	e7e6      	b.n	8009b46 <__swsetup_r+0x1e>
 8009b78:	0751      	lsls	r1, r2, #29
 8009b7a:	d512      	bpl.n	8009ba2 <__swsetup_r+0x7a>
 8009b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7e:	b141      	cbz	r1, 8009b92 <__swsetup_r+0x6a>
 8009b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <__swsetup_r+0x66>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f7ff fddd 	bl	8009748 <_free_r>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6363      	str	r3, [r4, #52]	; 0x34
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f043 0308 	orr.w	r3, r3, #8
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	b94b      	cbnz	r3, 8009bc2 <__swsetup_r+0x9a>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bb8:	d003      	beq.n	8009bc2 <__swsetup_r+0x9a>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f000 f867 	bl	8009c90 <__smakebuf_r>
 8009bc2:	89a2      	ldrh	r2, [r4, #12]
 8009bc4:	f012 0301 	ands.w	r3, r2, #1
 8009bc8:	d00c      	beq.n	8009be4 <__swsetup_r+0xbc>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60a3      	str	r3, [r4, #8]
 8009bce:	6963      	ldr	r3, [r4, #20]
 8009bd0:	425b      	negs	r3, r3
 8009bd2:	61a3      	str	r3, [r4, #24]
 8009bd4:	6923      	ldr	r3, [r4, #16]
 8009bd6:	b953      	cbnz	r3, 8009bee <__swsetup_r+0xc6>
 8009bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bdc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009be0:	d1ba      	bne.n	8009b58 <__swsetup_r+0x30>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	0792      	lsls	r2, r2, #30
 8009be6:	bf58      	it	pl
 8009be8:	6963      	ldrpl	r3, [r4, #20]
 8009bea:	60a3      	str	r3, [r4, #8]
 8009bec:	e7f2      	b.n	8009bd4 <__swsetup_r+0xac>
 8009bee:	2000      	movs	r0, #0
 8009bf0:	e7f7      	b.n	8009be2 <__swsetup_r+0xba>
 8009bf2:	bf00      	nop
 8009bf4:	20000024 	.word	0x20000024
 8009bf8:	0800a634 	.word	0x0800a634
 8009bfc:	0800a654 	.word	0x0800a654
 8009c00:	0800a614 	.word	0x0800a614

08009c04 <_close_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4c06      	ldr	r4, [pc, #24]	; (8009c20 <_close_r+0x1c>)
 8009c08:	2300      	movs	r3, #0
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	f7f8 fb17 	bl	8002242 <_close>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d102      	bne.n	8009c1e <_close_r+0x1a>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	b103      	cbz	r3, 8009c1e <_close_r+0x1a>
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	bd38      	pop	{r3, r4, r5, pc}
 8009c20:	20000984 	.word	0x20000984

08009c24 <_lseek_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4c07      	ldr	r4, [pc, #28]	; (8009c44 <_lseek_r+0x20>)
 8009c28:	4605      	mov	r5, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	6022      	str	r2, [r4, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f8 fb2c 	bl	8002290 <_lseek>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_lseek_r+0x1e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_lseek_r+0x1e>
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20000984 	.word	0x20000984

08009c48 <__swhatbuf_r>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	460e      	mov	r6, r1
 8009c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c50:	2900      	cmp	r1, #0
 8009c52:	b096      	sub	sp, #88	; 0x58
 8009c54:	4614      	mov	r4, r2
 8009c56:	461d      	mov	r5, r3
 8009c58:	da07      	bge.n	8009c6a <__swhatbuf_r+0x22>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	602b      	str	r3, [r5, #0]
 8009c5e:	89b3      	ldrh	r3, [r6, #12]
 8009c60:	061a      	lsls	r2, r3, #24
 8009c62:	d410      	bmi.n	8009c86 <__swhatbuf_r+0x3e>
 8009c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c68:	e00e      	b.n	8009c88 <__swhatbuf_r+0x40>
 8009c6a:	466a      	mov	r2, sp
 8009c6c:	f000 fb62 	bl	800a334 <_fstat_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dbf2      	blt.n	8009c5a <__swhatbuf_r+0x12>
 8009c74:	9a01      	ldr	r2, [sp, #4]
 8009c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009c7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009c7e:	425a      	negs	r2, r3
 8009c80:	415a      	adcs	r2, r3
 8009c82:	602a      	str	r2, [r5, #0]
 8009c84:	e7ee      	b.n	8009c64 <__swhatbuf_r+0x1c>
 8009c86:	2340      	movs	r3, #64	; 0x40
 8009c88:	2000      	movs	r0, #0
 8009c8a:	6023      	str	r3, [r4, #0]
 8009c8c:	b016      	add	sp, #88	; 0x58
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}

08009c90 <__smakebuf_r>:
 8009c90:	898b      	ldrh	r3, [r1, #12]
 8009c92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c94:	079d      	lsls	r5, r3, #30
 8009c96:	4606      	mov	r6, r0
 8009c98:	460c      	mov	r4, r1
 8009c9a:	d507      	bpl.n	8009cac <__smakebuf_r+0x1c>
 8009c9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	6163      	str	r3, [r4, #20]
 8009ca8:	b002      	add	sp, #8
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	ab01      	add	r3, sp, #4
 8009cae:	466a      	mov	r2, sp
 8009cb0:	f7ff ffca 	bl	8009c48 <__swhatbuf_r>
 8009cb4:	9900      	ldr	r1, [sp, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff fd93 	bl	80097e4 <_malloc_r>
 8009cbe:	b948      	cbnz	r0, 8009cd4 <__smakebuf_r+0x44>
 8009cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc4:	059a      	lsls	r2, r3, #22
 8009cc6:	d4ef      	bmi.n	8009ca8 <__smakebuf_r+0x18>
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	f043 0302 	orr.w	r3, r3, #2
 8009cd0:	81a3      	strh	r3, [r4, #12]
 8009cd2:	e7e3      	b.n	8009c9c <__smakebuf_r+0xc>
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <__smakebuf_r+0x7c>)
 8009cd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	6020      	str	r0, [r4, #0]
 8009cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce0:	81a3      	strh	r3, [r4, #12]
 8009ce2:	9b00      	ldr	r3, [sp, #0]
 8009ce4:	6163      	str	r3, [r4, #20]
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	6120      	str	r0, [r4, #16]
 8009cea:	b15b      	cbz	r3, 8009d04 <__smakebuf_r+0x74>
 8009cec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f000 fb31 	bl	800a358 <_isatty_r>
 8009cf6:	b128      	cbz	r0, 8009d04 <__smakebuf_r+0x74>
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	f023 0303 	bic.w	r3, r3, #3
 8009cfe:	f043 0301 	orr.w	r3, r3, #1
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	431d      	orrs	r5, r3
 8009d08:	81a5      	strh	r5, [r4, #12]
 8009d0a:	e7cd      	b.n	8009ca8 <__smakebuf_r+0x18>
 8009d0c:	0800958d 	.word	0x0800958d

08009d10 <__malloc_lock>:
 8009d10:	4770      	bx	lr

08009d12 <__malloc_unlock>:
 8009d12:	4770      	bx	lr

08009d14 <__sfputc_r>:
 8009d14:	6893      	ldr	r3, [r2, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	b410      	push	{r4}
 8009d1c:	6093      	str	r3, [r2, #8]
 8009d1e:	da08      	bge.n	8009d32 <__sfputc_r+0x1e>
 8009d20:	6994      	ldr	r4, [r2, #24]
 8009d22:	42a3      	cmp	r3, r4
 8009d24:	db01      	blt.n	8009d2a <__sfputc_r+0x16>
 8009d26:	290a      	cmp	r1, #10
 8009d28:	d103      	bne.n	8009d32 <__sfputc_r+0x1e>
 8009d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2e:	f7ff be97 	b.w	8009a60 <__swbuf_r>
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	1c58      	adds	r0, r3, #1
 8009d36:	6010      	str	r0, [r2, #0]
 8009d38:	7019      	strb	r1, [r3, #0]
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <__sfputs_r>:
 8009d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	4614      	mov	r4, r2
 8009d4a:	18d5      	adds	r5, r2, r3
 8009d4c:	42ac      	cmp	r4, r5
 8009d4e:	d101      	bne.n	8009d54 <__sfputs_r+0x12>
 8009d50:	2000      	movs	r0, #0
 8009d52:	e007      	b.n	8009d64 <__sfputs_r+0x22>
 8009d54:	463a      	mov	r2, r7
 8009d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ffda 	bl	8009d14 <__sfputc_r>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d1f3      	bne.n	8009d4c <__sfputs_r+0xa>
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d68 <_vfiprintf_r>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	b09d      	sub	sp, #116	; 0x74
 8009d70:	4617      	mov	r7, r2
 8009d72:	461d      	mov	r5, r3
 8009d74:	4606      	mov	r6, r0
 8009d76:	b118      	cbz	r0, 8009d80 <_vfiprintf_r+0x18>
 8009d78:	6983      	ldr	r3, [r0, #24]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <_vfiprintf_r+0x18>
 8009d7c:	f7ff fc22 	bl	80095c4 <__sinit>
 8009d80:	4b7c      	ldr	r3, [pc, #496]	; (8009f74 <_vfiprintf_r+0x20c>)
 8009d82:	429c      	cmp	r4, r3
 8009d84:	d158      	bne.n	8009e38 <_vfiprintf_r+0xd0>
 8009d86:	6874      	ldr	r4, [r6, #4]
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	0718      	lsls	r0, r3, #28
 8009d8c:	d55e      	bpl.n	8009e4c <_vfiprintf_r+0xe4>
 8009d8e:	6923      	ldr	r3, [r4, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d05b      	beq.n	8009e4c <_vfiprintf_r+0xe4>
 8009d94:	2300      	movs	r3, #0
 8009d96:	9309      	str	r3, [sp, #36]	; 0x24
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d9e:	2330      	movs	r3, #48	; 0x30
 8009da0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009da4:	9503      	str	r5, [sp, #12]
 8009da6:	f04f 0b01 	mov.w	fp, #1
 8009daa:	46b8      	mov	r8, r7
 8009dac:	4645      	mov	r5, r8
 8009dae:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009db2:	b10b      	cbz	r3, 8009db8 <_vfiprintf_r+0x50>
 8009db4:	2b25      	cmp	r3, #37	; 0x25
 8009db6:	d154      	bne.n	8009e62 <_vfiprintf_r+0xfa>
 8009db8:	ebb8 0a07 	subs.w	sl, r8, r7
 8009dbc:	d00b      	beq.n	8009dd6 <_vfiprintf_r+0x6e>
 8009dbe:	4653      	mov	r3, sl
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff ffbc 	bl	8009d42 <__sfputs_r>
 8009dca:	3001      	adds	r0, #1
 8009dcc:	f000 80c2 	beq.w	8009f54 <_vfiprintf_r+0x1ec>
 8009dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd2:	4453      	add	r3, sl
 8009dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009dd6:	f898 3000 	ldrb.w	r3, [r8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 80ba 	beq.w	8009f54 <_vfiprintf_r+0x1ec>
 8009de0:	2300      	movs	r3, #0
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009df2:	931a      	str	r3, [sp, #104]	; 0x68
 8009df4:	46a8      	mov	r8, r5
 8009df6:	2205      	movs	r2, #5
 8009df8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009dfc:	485e      	ldr	r0, [pc, #376]	; (8009f78 <_vfiprintf_r+0x210>)
 8009dfe:	f7f6 f9ff 	bl	8000200 <memchr>
 8009e02:	9b04      	ldr	r3, [sp, #16]
 8009e04:	bb78      	cbnz	r0, 8009e66 <_vfiprintf_r+0xfe>
 8009e06:	06d9      	lsls	r1, r3, #27
 8009e08:	bf44      	itt	mi
 8009e0a:	2220      	movmi	r2, #32
 8009e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e10:	071a      	lsls	r2, r3, #28
 8009e12:	bf44      	itt	mi
 8009e14:	222b      	movmi	r2, #43	; 0x2b
 8009e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e1a:	782a      	ldrb	r2, [r5, #0]
 8009e1c:	2a2a      	cmp	r2, #42	; 0x2a
 8009e1e:	d02a      	beq.n	8009e76 <_vfiprintf_r+0x10e>
 8009e20:	9a07      	ldr	r2, [sp, #28]
 8009e22:	46a8      	mov	r8, r5
 8009e24:	2000      	movs	r0, #0
 8009e26:	250a      	movs	r5, #10
 8009e28:	4641      	mov	r1, r8
 8009e2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e2e:	3b30      	subs	r3, #48	; 0x30
 8009e30:	2b09      	cmp	r3, #9
 8009e32:	d969      	bls.n	8009f08 <_vfiprintf_r+0x1a0>
 8009e34:	b360      	cbz	r0, 8009e90 <_vfiprintf_r+0x128>
 8009e36:	e024      	b.n	8009e82 <_vfiprintf_r+0x11a>
 8009e38:	4b50      	ldr	r3, [pc, #320]	; (8009f7c <_vfiprintf_r+0x214>)
 8009e3a:	429c      	cmp	r4, r3
 8009e3c:	d101      	bne.n	8009e42 <_vfiprintf_r+0xda>
 8009e3e:	68b4      	ldr	r4, [r6, #8]
 8009e40:	e7a2      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009e42:	4b4f      	ldr	r3, [pc, #316]	; (8009f80 <_vfiprintf_r+0x218>)
 8009e44:	429c      	cmp	r4, r3
 8009e46:	bf08      	it	eq
 8009e48:	68f4      	ldreq	r4, [r6, #12]
 8009e4a:	e79d      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4630      	mov	r0, r6
 8009e50:	f7ff fe6a 	bl	8009b28 <__swsetup_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d09d      	beq.n	8009d94 <_vfiprintf_r+0x2c>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e5c:	b01d      	add	sp, #116	; 0x74
 8009e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e62:	46a8      	mov	r8, r5
 8009e64:	e7a2      	b.n	8009dac <_vfiprintf_r+0x44>
 8009e66:	4a44      	ldr	r2, [pc, #272]	; (8009f78 <_vfiprintf_r+0x210>)
 8009e68:	1a80      	subs	r0, r0, r2
 8009e6a:	fa0b f000 	lsl.w	r0, fp, r0
 8009e6e:	4318      	orrs	r0, r3
 8009e70:	9004      	str	r0, [sp, #16]
 8009e72:	4645      	mov	r5, r8
 8009e74:	e7be      	b.n	8009df4 <_vfiprintf_r+0x8c>
 8009e76:	9a03      	ldr	r2, [sp, #12]
 8009e78:	1d11      	adds	r1, r2, #4
 8009e7a:	6812      	ldr	r2, [r2, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	db01      	blt.n	8009e86 <_vfiprintf_r+0x11e>
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	e004      	b.n	8009e90 <_vfiprintf_r+0x128>
 8009e86:	4252      	negs	r2, r2
 8009e88:	f043 0302 	orr.w	r3, r3, #2
 8009e8c:	9207      	str	r2, [sp, #28]
 8009e8e:	9304      	str	r3, [sp, #16]
 8009e90:	f898 3000 	ldrb.w	r3, [r8]
 8009e94:	2b2e      	cmp	r3, #46	; 0x2e
 8009e96:	d10e      	bne.n	8009eb6 <_vfiprintf_r+0x14e>
 8009e98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e9e:	d138      	bne.n	8009f12 <_vfiprintf_r+0x1aa>
 8009ea0:	9b03      	ldr	r3, [sp, #12]
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	9203      	str	r2, [sp, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bfb8      	it	lt
 8009eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009eb0:	f108 0802 	add.w	r8, r8, #2
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	4d33      	ldr	r5, [pc, #204]	; (8009f84 <_vfiprintf_r+0x21c>)
 8009eb8:	f898 1000 	ldrb.w	r1, [r8]
 8009ebc:	2203      	movs	r2, #3
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	f7f6 f99e 	bl	8000200 <memchr>
 8009ec4:	b140      	cbz	r0, 8009ed8 <_vfiprintf_r+0x170>
 8009ec6:	2340      	movs	r3, #64	; 0x40
 8009ec8:	1b40      	subs	r0, r0, r5
 8009eca:	fa03 f000 	lsl.w	r0, r3, r0
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	4303      	orrs	r3, r0
 8009ed2:	f108 0801 	add.w	r8, r8, #1
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	f898 1000 	ldrb.w	r1, [r8]
 8009edc:	482a      	ldr	r0, [pc, #168]	; (8009f88 <_vfiprintf_r+0x220>)
 8009ede:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ee2:	2206      	movs	r2, #6
 8009ee4:	f108 0701 	add.w	r7, r8, #1
 8009ee8:	f7f6 f98a 	bl	8000200 <memchr>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d037      	beq.n	8009f60 <_vfiprintf_r+0x1f8>
 8009ef0:	4b26      	ldr	r3, [pc, #152]	; (8009f8c <_vfiprintf_r+0x224>)
 8009ef2:	bb1b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x1d4>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	3307      	adds	r3, #7
 8009ef8:	f023 0307 	bic.w	r3, r3, #7
 8009efc:	3308      	adds	r3, #8
 8009efe:	9303      	str	r3, [sp, #12]
 8009f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f02:	444b      	add	r3, r9
 8009f04:	9309      	str	r3, [sp, #36]	; 0x24
 8009f06:	e750      	b.n	8009daa <_vfiprintf_r+0x42>
 8009f08:	fb05 3202 	mla	r2, r5, r2, r3
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	4688      	mov	r8, r1
 8009f10:	e78a      	b.n	8009e28 <_vfiprintf_r+0xc0>
 8009f12:	2300      	movs	r3, #0
 8009f14:	f108 0801 	add.w	r8, r8, #1
 8009f18:	9305      	str	r3, [sp, #20]
 8009f1a:	4619      	mov	r1, r3
 8009f1c:	250a      	movs	r5, #10
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f24:	3a30      	subs	r2, #48	; 0x30
 8009f26:	2a09      	cmp	r2, #9
 8009f28:	d903      	bls.n	8009f32 <_vfiprintf_r+0x1ca>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0c3      	beq.n	8009eb6 <_vfiprintf_r+0x14e>
 8009f2e:	9105      	str	r1, [sp, #20]
 8009f30:	e7c1      	b.n	8009eb6 <_vfiprintf_r+0x14e>
 8009f32:	fb05 2101 	mla	r1, r5, r1, r2
 8009f36:	2301      	movs	r3, #1
 8009f38:	4680      	mov	r8, r0
 8009f3a:	e7f0      	b.n	8009f1e <_vfiprintf_r+0x1b6>
 8009f3c:	ab03      	add	r3, sp, #12
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4622      	mov	r2, r4
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <_vfiprintf_r+0x228>)
 8009f44:	a904      	add	r1, sp, #16
 8009f46:	4630      	mov	r0, r6
 8009f48:	f3af 8000 	nop.w
 8009f4c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009f50:	4681      	mov	r9, r0
 8009f52:	d1d5      	bne.n	8009f00 <_vfiprintf_r+0x198>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	065b      	lsls	r3, r3, #25
 8009f58:	f53f af7e 	bmi.w	8009e58 <_vfiprintf_r+0xf0>
 8009f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f5e:	e77d      	b.n	8009e5c <_vfiprintf_r+0xf4>
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4622      	mov	r2, r4
 8009f66:	4b0a      	ldr	r3, [pc, #40]	; (8009f90 <_vfiprintf_r+0x228>)
 8009f68:	a904      	add	r1, sp, #16
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 f888 	bl	800a080 <_printf_i>
 8009f70:	e7ec      	b.n	8009f4c <_vfiprintf_r+0x1e4>
 8009f72:	bf00      	nop
 8009f74:	0800a634 	.word	0x0800a634
 8009f78:	0800a678 	.word	0x0800a678
 8009f7c:	0800a654 	.word	0x0800a654
 8009f80:	0800a614 	.word	0x0800a614
 8009f84:	0800a67e 	.word	0x0800a67e
 8009f88:	0800a682 	.word	0x0800a682
 8009f8c:	00000000 	.word	0x00000000
 8009f90:	08009d43 	.word	0x08009d43

08009f94 <_printf_common>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	4691      	mov	r9, r2
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	688a      	ldr	r2, [r1, #8]
 8009f9e:	690b      	ldr	r3, [r1, #16]
 8009fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	bfb8      	it	lt
 8009fa8:	4613      	movlt	r3, r2
 8009faa:	f8c9 3000 	str.w	r3, [r9]
 8009fae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	b112      	cbz	r2, 8009fbe <_printf_common+0x2a>
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f8c9 3000 	str.w	r3, [r9]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	0699      	lsls	r1, r3, #26
 8009fc2:	bf42      	ittt	mi
 8009fc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009fc8:	3302      	addmi	r3, #2
 8009fca:	f8c9 3000 	strmi.w	r3, [r9]
 8009fce:	6825      	ldr	r5, [r4, #0]
 8009fd0:	f015 0506 	ands.w	r5, r5, #6
 8009fd4:	d107      	bne.n	8009fe6 <_printf_common+0x52>
 8009fd6:	f104 0a19 	add.w	sl, r4, #25
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8009fe0:	1a9b      	subs	r3, r3, r2
 8009fe2:	42ab      	cmp	r3, r5
 8009fe4:	dc28      	bgt.n	800a038 <_printf_common+0xa4>
 8009fe6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fea:	6822      	ldr	r2, [r4, #0]
 8009fec:	3300      	adds	r3, #0
 8009fee:	bf18      	it	ne
 8009ff0:	2301      	movne	r3, #1
 8009ff2:	0692      	lsls	r2, r2, #26
 8009ff4:	d42d      	bmi.n	800a052 <_printf_common+0xbe>
 8009ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	4630      	mov	r0, r6
 8009ffe:	47c0      	blx	r8
 800a000:	3001      	adds	r0, #1
 800a002:	d020      	beq.n	800a046 <_printf_common+0xb2>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	68e5      	ldr	r5, [r4, #12]
 800a008:	f8d9 2000 	ldr.w	r2, [r9]
 800a00c:	f003 0306 	and.w	r3, r3, #6
 800a010:	2b04      	cmp	r3, #4
 800a012:	bf08      	it	eq
 800a014:	1aad      	subeq	r5, r5, r2
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	6922      	ldr	r2, [r4, #16]
 800a01a:	bf0c      	ite	eq
 800a01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a020:	2500      	movne	r5, #0
 800a022:	4293      	cmp	r3, r2
 800a024:	bfc4      	itt	gt
 800a026:	1a9b      	subgt	r3, r3, r2
 800a028:	18ed      	addgt	r5, r5, r3
 800a02a:	f04f 0900 	mov.w	r9, #0
 800a02e:	341a      	adds	r4, #26
 800a030:	454d      	cmp	r5, r9
 800a032:	d11a      	bne.n	800a06a <_printf_common+0xd6>
 800a034:	2000      	movs	r0, #0
 800a036:	e008      	b.n	800a04a <_printf_common+0xb6>
 800a038:	2301      	movs	r3, #1
 800a03a:	4652      	mov	r2, sl
 800a03c:	4639      	mov	r1, r7
 800a03e:	4630      	mov	r0, r6
 800a040:	47c0      	blx	r8
 800a042:	3001      	adds	r0, #1
 800a044:	d103      	bne.n	800a04e <_printf_common+0xba>
 800a046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04e:	3501      	adds	r5, #1
 800a050:	e7c3      	b.n	8009fda <_printf_common+0x46>
 800a052:	18e1      	adds	r1, r4, r3
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	2030      	movs	r0, #48	; 0x30
 800a058:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a05c:	4422      	add	r2, r4
 800a05e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a062:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a066:	3302      	adds	r3, #2
 800a068:	e7c5      	b.n	8009ff6 <_printf_common+0x62>
 800a06a:	2301      	movs	r3, #1
 800a06c:	4622      	mov	r2, r4
 800a06e:	4639      	mov	r1, r7
 800a070:	4630      	mov	r0, r6
 800a072:	47c0      	blx	r8
 800a074:	3001      	adds	r0, #1
 800a076:	d0e6      	beq.n	800a046 <_printf_common+0xb2>
 800a078:	f109 0901 	add.w	r9, r9, #1
 800a07c:	e7d8      	b.n	800a030 <_printf_common+0x9c>
	...

0800a080 <_printf_i>:
 800a080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a084:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a088:	460c      	mov	r4, r1
 800a08a:	7e09      	ldrb	r1, [r1, #24]
 800a08c:	b085      	sub	sp, #20
 800a08e:	296e      	cmp	r1, #110	; 0x6e
 800a090:	4617      	mov	r7, r2
 800a092:	4606      	mov	r6, r0
 800a094:	4698      	mov	r8, r3
 800a096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a098:	f000 80b3 	beq.w	800a202 <_printf_i+0x182>
 800a09c:	d822      	bhi.n	800a0e4 <_printf_i+0x64>
 800a09e:	2963      	cmp	r1, #99	; 0x63
 800a0a0:	d036      	beq.n	800a110 <_printf_i+0x90>
 800a0a2:	d80a      	bhi.n	800a0ba <_printf_i+0x3a>
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	f000 80b9 	beq.w	800a21c <_printf_i+0x19c>
 800a0aa:	2958      	cmp	r1, #88	; 0x58
 800a0ac:	f000 8083 	beq.w	800a1b6 <_printf_i+0x136>
 800a0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a0b8:	e032      	b.n	800a120 <_printf_i+0xa0>
 800a0ba:	2964      	cmp	r1, #100	; 0x64
 800a0bc:	d001      	beq.n	800a0c2 <_printf_i+0x42>
 800a0be:	2969      	cmp	r1, #105	; 0x69
 800a0c0:	d1f6      	bne.n	800a0b0 <_printf_i+0x30>
 800a0c2:	6820      	ldr	r0, [r4, #0]
 800a0c4:	6813      	ldr	r3, [r2, #0]
 800a0c6:	0605      	lsls	r5, r0, #24
 800a0c8:	f103 0104 	add.w	r1, r3, #4
 800a0cc:	d52a      	bpl.n	800a124 <_printf_i+0xa4>
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	da03      	bge.n	800a0de <_printf_i+0x5e>
 800a0d6:	222d      	movs	r2, #45	; 0x2d
 800a0d8:	425b      	negs	r3, r3
 800a0da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0de:	486f      	ldr	r0, [pc, #444]	; (800a29c <_printf_i+0x21c>)
 800a0e0:	220a      	movs	r2, #10
 800a0e2:	e039      	b.n	800a158 <_printf_i+0xd8>
 800a0e4:	2973      	cmp	r1, #115	; 0x73
 800a0e6:	f000 809d 	beq.w	800a224 <_printf_i+0x1a4>
 800a0ea:	d808      	bhi.n	800a0fe <_printf_i+0x7e>
 800a0ec:	296f      	cmp	r1, #111	; 0x6f
 800a0ee:	d020      	beq.n	800a132 <_printf_i+0xb2>
 800a0f0:	2970      	cmp	r1, #112	; 0x70
 800a0f2:	d1dd      	bne.n	800a0b0 <_printf_i+0x30>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	f043 0320 	orr.w	r3, r3, #32
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	e003      	b.n	800a106 <_printf_i+0x86>
 800a0fe:	2975      	cmp	r1, #117	; 0x75
 800a100:	d017      	beq.n	800a132 <_printf_i+0xb2>
 800a102:	2978      	cmp	r1, #120	; 0x78
 800a104:	d1d4      	bne.n	800a0b0 <_printf_i+0x30>
 800a106:	2378      	movs	r3, #120	; 0x78
 800a108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a10c:	4864      	ldr	r0, [pc, #400]	; (800a2a0 <_printf_i+0x220>)
 800a10e:	e055      	b.n	800a1bc <_printf_i+0x13c>
 800a110:	6813      	ldr	r3, [r2, #0]
 800a112:	1d19      	adds	r1, r3, #4
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6011      	str	r1, [r2, #0]
 800a118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a11c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a120:	2301      	movs	r3, #1
 800a122:	e08c      	b.n	800a23e <_printf_i+0x1be>
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6011      	str	r1, [r2, #0]
 800a128:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a12c:	bf18      	it	ne
 800a12e:	b21b      	sxthne	r3, r3
 800a130:	e7cf      	b.n	800a0d2 <_printf_i+0x52>
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	6825      	ldr	r5, [r4, #0]
 800a136:	1d18      	adds	r0, r3, #4
 800a138:	6010      	str	r0, [r2, #0]
 800a13a:	0628      	lsls	r0, r5, #24
 800a13c:	d501      	bpl.n	800a142 <_printf_i+0xc2>
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	e002      	b.n	800a148 <_printf_i+0xc8>
 800a142:	0668      	lsls	r0, r5, #25
 800a144:	d5fb      	bpl.n	800a13e <_printf_i+0xbe>
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	4854      	ldr	r0, [pc, #336]	; (800a29c <_printf_i+0x21c>)
 800a14a:	296f      	cmp	r1, #111	; 0x6f
 800a14c:	bf14      	ite	ne
 800a14e:	220a      	movne	r2, #10
 800a150:	2208      	moveq	r2, #8
 800a152:	2100      	movs	r1, #0
 800a154:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a158:	6865      	ldr	r5, [r4, #4]
 800a15a:	60a5      	str	r5, [r4, #8]
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	f2c0 8095 	blt.w	800a28c <_printf_i+0x20c>
 800a162:	6821      	ldr	r1, [r4, #0]
 800a164:	f021 0104 	bic.w	r1, r1, #4
 800a168:	6021      	str	r1, [r4, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d13d      	bne.n	800a1ea <_printf_i+0x16a>
 800a16e:	2d00      	cmp	r5, #0
 800a170:	f040 808e 	bne.w	800a290 <_printf_i+0x210>
 800a174:	4665      	mov	r5, ip
 800a176:	2a08      	cmp	r2, #8
 800a178:	d10b      	bne.n	800a192 <_printf_i+0x112>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	07db      	lsls	r3, r3, #31
 800a17e:	d508      	bpl.n	800a192 <_printf_i+0x112>
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	429a      	cmp	r2, r3
 800a186:	bfde      	ittt	le
 800a188:	2330      	movle	r3, #48	; 0x30
 800a18a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a18e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a192:	ebac 0305 	sub.w	r3, ip, r5
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	f8cd 8000 	str.w	r8, [sp]
 800a19c:	463b      	mov	r3, r7
 800a19e:	aa03      	add	r2, sp, #12
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff fef6 	bl	8009f94 <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d14d      	bne.n	800a248 <_printf_i+0x1c8>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1b0:	b005      	add	sp, #20
 800a1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1b6:	4839      	ldr	r0, [pc, #228]	; (800a29c <_printf_i+0x21c>)
 800a1b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	6821      	ldr	r1, [r4, #0]
 800a1c0:	1d1d      	adds	r5, r3, #4
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6015      	str	r5, [r2, #0]
 800a1c6:	060a      	lsls	r2, r1, #24
 800a1c8:	d50b      	bpl.n	800a1e2 <_printf_i+0x162>
 800a1ca:	07ca      	lsls	r2, r1, #31
 800a1cc:	bf44      	itt	mi
 800a1ce:	f041 0120 	orrmi.w	r1, r1, #32
 800a1d2:	6021      	strmi	r1, [r4, #0]
 800a1d4:	b91b      	cbnz	r3, 800a1de <_printf_i+0x15e>
 800a1d6:	6822      	ldr	r2, [r4, #0]
 800a1d8:	f022 0220 	bic.w	r2, r2, #32
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	2210      	movs	r2, #16
 800a1e0:	e7b7      	b.n	800a152 <_printf_i+0xd2>
 800a1e2:	064d      	lsls	r5, r1, #25
 800a1e4:	bf48      	it	mi
 800a1e6:	b29b      	uxthmi	r3, r3
 800a1e8:	e7ef      	b.n	800a1ca <_printf_i+0x14a>
 800a1ea:	4665      	mov	r5, ip
 800a1ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f0:	fb02 3311 	mls	r3, r2, r1, r3
 800a1f4:	5cc3      	ldrb	r3, [r0, r3]
 800a1f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	d1f5      	bne.n	800a1ec <_printf_i+0x16c>
 800a200:	e7b9      	b.n	800a176 <_printf_i+0xf6>
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	6825      	ldr	r5, [r4, #0]
 800a206:	6961      	ldr	r1, [r4, #20]
 800a208:	1d18      	adds	r0, r3, #4
 800a20a:	6010      	str	r0, [r2, #0]
 800a20c:	0628      	lsls	r0, r5, #24
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	d501      	bpl.n	800a216 <_printf_i+0x196>
 800a212:	6019      	str	r1, [r3, #0]
 800a214:	e002      	b.n	800a21c <_printf_i+0x19c>
 800a216:	066a      	lsls	r2, r5, #25
 800a218:	d5fb      	bpl.n	800a212 <_printf_i+0x192>
 800a21a:	8019      	strh	r1, [r3, #0]
 800a21c:	2300      	movs	r3, #0
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	4665      	mov	r5, ip
 800a222:	e7b9      	b.n	800a198 <_printf_i+0x118>
 800a224:	6813      	ldr	r3, [r2, #0]
 800a226:	1d19      	adds	r1, r3, #4
 800a228:	6011      	str	r1, [r2, #0]
 800a22a:	681d      	ldr	r5, [r3, #0]
 800a22c:	6862      	ldr	r2, [r4, #4]
 800a22e:	2100      	movs	r1, #0
 800a230:	4628      	mov	r0, r5
 800a232:	f7f5 ffe5 	bl	8000200 <memchr>
 800a236:	b108      	cbz	r0, 800a23c <_printf_i+0x1bc>
 800a238:	1b40      	subs	r0, r0, r5
 800a23a:	6060      	str	r0, [r4, #4]
 800a23c:	6863      	ldr	r3, [r4, #4]
 800a23e:	6123      	str	r3, [r4, #16]
 800a240:	2300      	movs	r3, #0
 800a242:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a246:	e7a7      	b.n	800a198 <_printf_i+0x118>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	462a      	mov	r2, r5
 800a24c:	4639      	mov	r1, r7
 800a24e:	4630      	mov	r0, r6
 800a250:	47c0      	blx	r8
 800a252:	3001      	adds	r0, #1
 800a254:	d0aa      	beq.n	800a1ac <_printf_i+0x12c>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	079b      	lsls	r3, r3, #30
 800a25a:	d413      	bmi.n	800a284 <_printf_i+0x204>
 800a25c:	68e0      	ldr	r0, [r4, #12]
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	4298      	cmp	r0, r3
 800a262:	bfb8      	it	lt
 800a264:	4618      	movlt	r0, r3
 800a266:	e7a3      	b.n	800a1b0 <_printf_i+0x130>
 800a268:	2301      	movs	r3, #1
 800a26a:	464a      	mov	r2, r9
 800a26c:	4639      	mov	r1, r7
 800a26e:	4630      	mov	r0, r6
 800a270:	47c0      	blx	r8
 800a272:	3001      	adds	r0, #1
 800a274:	d09a      	beq.n	800a1ac <_printf_i+0x12c>
 800a276:	3501      	adds	r5, #1
 800a278:	68e3      	ldr	r3, [r4, #12]
 800a27a:	9a03      	ldr	r2, [sp, #12]
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	42ab      	cmp	r3, r5
 800a280:	dcf2      	bgt.n	800a268 <_printf_i+0x1e8>
 800a282:	e7eb      	b.n	800a25c <_printf_i+0x1dc>
 800a284:	2500      	movs	r5, #0
 800a286:	f104 0919 	add.w	r9, r4, #25
 800a28a:	e7f5      	b.n	800a278 <_printf_i+0x1f8>
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1ac      	bne.n	800a1ea <_printf_i+0x16a>
 800a290:	7803      	ldrb	r3, [r0, #0]
 800a292:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a296:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a29a:	e76c      	b.n	800a176 <_printf_i+0xf6>
 800a29c:	0800a689 	.word	0x0800a689
 800a2a0:	0800a69a 	.word	0x0800a69a

0800a2a4 <_putc_r>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	460d      	mov	r5, r1
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	b118      	cbz	r0, 800a2b6 <_putc_r+0x12>
 800a2ae:	6983      	ldr	r3, [r0, #24]
 800a2b0:	b90b      	cbnz	r3, 800a2b6 <_putc_r+0x12>
 800a2b2:	f7ff f987 	bl	80095c4 <__sinit>
 800a2b6:	4b13      	ldr	r3, [pc, #76]	; (800a304 <_putc_r+0x60>)
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	d112      	bne.n	800a2e2 <_putc_r+0x3e>
 800a2bc:	6874      	ldr	r4, [r6, #4]
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	da16      	bge.n	800a2f6 <_putc_r+0x52>
 800a2c8:	69a2      	ldr	r2, [r4, #24]
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	db02      	blt.n	800a2d4 <_putc_r+0x30>
 800a2ce:	b2eb      	uxtb	r3, r5
 800a2d0:	2b0a      	cmp	r3, #10
 800a2d2:	d110      	bne.n	800a2f6 <_putc_r+0x52>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4630      	mov	r0, r6
 800a2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2de:	f7ff bbbf 	b.w	8009a60 <__swbuf_r>
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <_putc_r+0x64>)
 800a2e4:	429c      	cmp	r4, r3
 800a2e6:	d101      	bne.n	800a2ec <_putc_r+0x48>
 800a2e8:	68b4      	ldr	r4, [r6, #8]
 800a2ea:	e7e8      	b.n	800a2be <_putc_r+0x1a>
 800a2ec:	4b07      	ldr	r3, [pc, #28]	; (800a30c <_putc_r+0x68>)
 800a2ee:	429c      	cmp	r4, r3
 800a2f0:	bf08      	it	eq
 800a2f2:	68f4      	ldreq	r4, [r6, #12]
 800a2f4:	e7e3      	b.n	800a2be <_putc_r+0x1a>
 800a2f6:	6823      	ldr	r3, [r4, #0]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	6022      	str	r2, [r4, #0]
 800a2fc:	701d      	strb	r5, [r3, #0]
 800a2fe:	b2e8      	uxtb	r0, r5
 800a300:	bd70      	pop	{r4, r5, r6, pc}
 800a302:	bf00      	nop
 800a304:	0800a634 	.word	0x0800a634
 800a308:	0800a654 	.word	0x0800a654
 800a30c:	0800a614 	.word	0x0800a614

0800a310 <_read_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4c07      	ldr	r4, [pc, #28]	; (800a330 <_read_r+0x20>)
 800a314:	4605      	mov	r5, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	6022      	str	r2, [r4, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f7 ff56 	bl	80021d0 <_read>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_read_r+0x1e>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_read_r+0x1e>
 800a32c:	602b      	str	r3, [r5, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	20000984 	.word	0x20000984

0800a334 <_fstat_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4c07      	ldr	r4, [pc, #28]	; (800a354 <_fstat_r+0x20>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4605      	mov	r5, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	4611      	mov	r1, r2
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	f7f7 ff8a 	bl	800225a <_fstat>
 800a346:	1c43      	adds	r3, r0, #1
 800a348:	d102      	bne.n	800a350 <_fstat_r+0x1c>
 800a34a:	6823      	ldr	r3, [r4, #0]
 800a34c:	b103      	cbz	r3, 800a350 <_fstat_r+0x1c>
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	bd38      	pop	{r3, r4, r5, pc}
 800a352:	bf00      	nop
 800a354:	20000984 	.word	0x20000984

0800a358 <_isatty_r>:
 800a358:	b538      	push	{r3, r4, r5, lr}
 800a35a:	4c06      	ldr	r4, [pc, #24]	; (800a374 <_isatty_r+0x1c>)
 800a35c:	2300      	movs	r3, #0
 800a35e:	4605      	mov	r5, r0
 800a360:	4608      	mov	r0, r1
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	f7f7 ff89 	bl	800227a <_isatty>
 800a368:	1c43      	adds	r3, r0, #1
 800a36a:	d102      	bne.n	800a372 <_isatty_r+0x1a>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	b103      	cbz	r3, 800a372 <_isatty_r+0x1a>
 800a370:	602b      	str	r3, [r5, #0]
 800a372:	bd38      	pop	{r3, r4, r5, pc}
 800a374:	20000984 	.word	0x20000984

0800a378 <_init>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	bf00      	nop
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr

0800a384 <_fini>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr
