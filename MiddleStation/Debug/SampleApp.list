
SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a31c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800a4dc  0800a4dc  0001a4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a814  0800a814  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a814  0800a814  0001a814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a81c  0800a81c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a81c  0800a81c  0001a81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000088  0800a8ac  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  0800a8ac  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031e31  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ef6  00000000  00000000  00051ee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e28  00000000  00000000  00056de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c60  00000000  00000000  00058c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033393  00000000  00000000  0005a868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e12  00000000  00000000  0008dbfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001283fb  00000000  00000000  000b1a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d9e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008778  00000000  00000000  001d9e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a4c4 	.word	0x0800a4c4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800a4c4 	.word	0x0800a4c4

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08e      	sub	sp, #56	; 0x38
 800059c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800059e:	4a7e      	ldr	r2, [pc, #504]	; (8000798 <MX_BlueNRG_MS_Init+0x200>)
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005a8:	6018      	str	r0, [r3, #0]
 80005aa:	3304      	adds	r3, #4
 80005ac:	8019      	strh	r1, [r3, #0]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80005ae:	4a7b      	ldr	r2, [pc, #492]	; (800079c <MX_BlueNRG_MS_Init+0x204>)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b8:	6018      	str	r0, [r3, #0]
 80005ba:	3304      	adds	r3, #4
 80005bc:	8019      	strh	r1, [r3, #0]

  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 80005be:	f000 f917 	bl	80007f0 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 80005c2:	2000      	movs	r0, #0
 80005c4:	f001 ff94 	bl	80024f0 <BSP_PB_GetState>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	4b74      	ldr	r3, [pc, #464]	; (80007a0 <MX_BlueNRG_MS_Init+0x208>)
 80005ce:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 80005d0:	2100      	movs	r1, #0
 80005d2:	4874      	ldr	r0, [pc, #464]	; (80007a4 <MX_BlueNRG_MS_Init+0x20c>)
 80005d4:	f008 fbec 	bl	8008db0 <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 80005d8:	1cba      	adds	r2, r7, #2
 80005da:	1d7b      	adds	r3, r7, #5
 80005dc:	4611      	mov	r1, r2
 80005de:	4618      	mov	r0, r3
 80005e0:	f008 fa5a 	bl	8008a98 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005e4:	f008 fa9c 	bl	8008b20 <hci_reset>

  HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	; 0x64
 80005ea:	f002 fa35 	bl	8002a58 <HAL_Delay>

  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	4619      	mov	r1, r3
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	461a      	mov	r2, r3
 80005f6:	486c      	ldr	r0, [pc, #432]	; (80007a8 <MX_BlueNRG_MS_Init+0x210>)
 80005f8:	f009 f99e 	bl	8009938 <iprintf>

  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	2b30      	cmp	r3, #48	; 0x30
 8000600:	d902      	bls.n	8000608 <MX_BlueNRG_MS_Init+0x70>
    bnrg_expansion_board = IDB05A1;
 8000602:	4b6a      	ldr	r3, [pc, #424]	; (80007ac <MX_BlueNRG_MS_Init+0x214>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT) {
 8000608:	4b69      	ldr	r3, [pc, #420]	; (80007b0 <MX_BlueNRG_MS_Init+0x218>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d109      	bne.n	8000624 <MX_BlueNRG_MS_Init+0x8c>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	f107 021c 	add.w	r2, r7, #28
 8000618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800061c:	6018      	str	r0, [r3, #0]
 800061e:	3304      	adds	r3, #4
 8000620:	8019      	strh	r1, [r3, #0]
 8000622:	e008      	b.n	8000636 <MX_BlueNRG_MS_Init+0x9e>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	f107 0214 	add.w	r2, r7, #20
 800062c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000630:	6018      	str	r0, [r3, #0]
 8000632:	3304      	adds	r3, #4
 8000634:	8019      	strh	r1, [r3, #0]
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	461a      	mov	r2, r3
 800063c:	2106      	movs	r1, #6
 800063e:	2000      	movs	r0, #0
 8000640:	f008 f992 	bl	8008968 <aci_hal_write_config_data>
 8000644:	4603      	mov	r3, r0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	2b00      	cmp	r3, #0
 800064c:	d003      	beq.n	8000656 <MX_BlueNRG_MS_Init+0xbe>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800064e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000650:	4858      	ldr	r0, [pc, #352]	; (80007b4 <MX_BlueNRG_MS_Init+0x21c>)
 8000652:	f009 f971 	bl	8009938 <iprintf>
  }

  ret = aci_gatt_init();
 8000656:	f007 fe24 	bl	80082a2 <aci_gatt_init>
 800065a:	4603      	mov	r3, r0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  if (ret) {
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <MX_BlueNRG_MS_Init+0xd2>
    printf("GATT_Init failed.\n");
 8000664:	4854      	ldr	r0, [pc, #336]	; (80007b8 <MX_BlueNRG_MS_Init+0x220>)
 8000666:	f009 fa03 	bl	8009a70 <puts>
  }

  if (BLE_Role == SERVER) {
 800066a:	4b51      	ldr	r3, [pc, #324]	; (80007b0 <MX_BlueNRG_MS_Init+0x218>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d11e      	bne.n	80006b0 <MX_BlueNRG_MS_Init+0x118>
    if (bnrg_expansion_board == IDB05A1) {
 8000672:	4b4e      	ldr	r3, [pc, #312]	; (80007ac <MX_BlueNRG_MS_Init+0x214>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d10f      	bne.n	800069a <MX_BlueNRG_MS_Init+0x102>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800067a:	f107 020a 	add.w	r2, r7, #10
 800067e:	1dbb      	adds	r3, r7, #6
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	4613      	mov	r3, r2
 800068a:	2207      	movs	r2, #7
 800068c:	2100      	movs	r1, #0
 800068e:	2001      	movs	r0, #1
 8000690:	f007 fb92 	bl	8007db8 <aci_gap_init_IDB05A1>
 8000694:	4603      	mov	r3, r0
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
 8000698:	e028      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	f107 0208 	add.w	r2, r7, #8
 80006a0:	f107 010a 	add.w	r1, r7, #10
 80006a4:	2001      	movs	r0, #1
 80006a6:	f007 fbd7 	bl	8007e58 <aci_gap_init_IDB04A1>
 80006aa:	4603      	mov	r3, r0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
 80006ae:	e01d      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <MX_BlueNRG_MS_Init+0x214>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10f      	bne.n	80006d8 <MX_BlueNRG_MS_Init+0x140>
      ret = aci_gap_init_IDB05A1(GAP_OBSERVER_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006b8:	f107 020a 	add.w	r2, r7, #10
 80006bc:	1dbb      	adds	r3, r7, #6
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	4613      	mov	r3, r2
 80006c8:	2207      	movs	r2, #7
 80006ca:	2100      	movs	r1, #0
 80006cc:	2008      	movs	r0, #8
 80006ce:	f007 fb73 	bl	8007db8 <aci_gap_init_IDB05A1>
 80006d2:	4603      	mov	r3, r0
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
 80006d6:	e009      	b.n	80006ec <MX_BlueNRG_MS_Init+0x154>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	f107 0208 	add.w	r2, r7, #8
 80006de:	f107 010a 	add.w	r1, r7, #10
 80006e2:	2003      	movs	r0, #3
 80006e4:	f007 fbb8 	bl	8007e58 <aci_gap_init_IDB04A1>
 80006e8:	4603      	mov	r3, r0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  if (ret != BLE_STATUS_SUCCESS) {
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <MX_BlueNRG_MS_Init+0x160>
    printf("GAP_Init failed.\n");
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <MX_BlueNRG_MS_Init+0x224>)
 80006f4:	f009 f9bc 	bl	8009a70 <puts>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006f8:	2300      	movs	r3, #0
 80006fa:	9303      	str	r3, [sp, #12]
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_BlueNRG_MS_Init+0x228>)
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2300      	movs	r3, #0
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2310      	movs	r3, #16
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2307      	movs	r3, #7
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2001      	movs	r0, #1
 8000710:	f007 fcdb 	bl	80080ca <aci_gap_set_auth_requirement>
 8000714:	4603      	mov	r3, r0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     NO_BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <MX_BlueNRG_MS_Init+0x18c>
    printf("BLE Stack Initialized.\n");
 800071e:	4829      	ldr	r0, [pc, #164]	; (80007c4 <MX_BlueNRG_MS_Init+0x22c>)
 8000720:	f009 f9a6 	bl	8009a70 <puts>
  }

  if (BLE_Role == SERVER) {
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_BlueNRG_MS_Init+0x218>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d111      	bne.n	8000750 <MX_BlueNRG_MS_Init+0x1b8>
    printf("SERVER: BLE Stack Initialized\n");
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <MX_BlueNRG_MS_Init+0x230>)
 800072e:	f009 f99f 	bl	8009a70 <puts>
    ret = Add_Sample_Service();
 8000732:	f000 f90b 	bl	800094c <Add_Sample_Service>
 8000736:	4603      	mov	r3, r0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24

    if (ret == BLE_STATUS_SUCCESS)
 800073a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073c:	2b00      	cmp	r3, #0
 800073e:	d103      	bne.n	8000748 <MX_BlueNRG_MS_Init+0x1b0>
      printf("Service added successfully.\n");
 8000740:	4822      	ldr	r0, [pc, #136]	; (80007cc <MX_BlueNRG_MS_Init+0x234>)
 8000742:	f009 f995 	bl	8009a70 <puts>
 8000746:	e006      	b.n	8000756 <MX_BlueNRG_MS_Init+0x1be>
    else
      printf("Error while adding service.\n");
 8000748:	4821      	ldr	r0, [pc, #132]	; (80007d0 <MX_BlueNRG_MS_Init+0x238>)
 800074a:	f009 f991 	bl	8009a70 <puts>
 800074e:	e002      	b.n	8000756 <MX_BlueNRG_MS_Init+0x1be>

  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 8000750:	4820      	ldr	r0, [pc, #128]	; (80007d4 <MX_BlueNRG_MS_Init+0x23c>)
 8000752:	f009 f98d 	bl	8009a70 <puts>
  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8000756:	2104      	movs	r1, #4
 8000758:	2001      	movs	r0, #1
 800075a:	f008 f96c 	bl	8008a36 <aci_hal_set_tx_power_level>
 800075e:	4603      	mov	r3, r0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */
	ret = aci_gap_start_observation_procedure( 0x3000,0x3000,PASSIVE_SCAN,PUBLIC_ADDR,0x01);
 8000762:	2301      	movs	r3, #1
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800076e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000772:	f007 fd55 	bl	8008220 <aci_gap_start_observation_procedure>
 8000776:	4603      	mov	r3, r0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
		if (ret == BLE_STATUS_SUCCESS)
 800077a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <MX_BlueNRG_MS_Init+0x1f0>
			printf("OK\n");
 8000780:	4815      	ldr	r0, [pc, #84]	; (80007d8 <MX_BlueNRG_MS_Init+0x240>)
 8000782:	f009 f975 	bl	8009a70 <puts>
		else
			printf("haha\n");

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000786:	e002      	b.n	800078e <MX_BlueNRG_MS_Init+0x1f6>
			printf("haha\n");
 8000788:	4814      	ldr	r0, [pc, #80]	; (80007dc <MX_BlueNRG_MS_Init+0x244>)
 800078a:	f009 f971 	bl	8009a70 <puts>
}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	0800a5d4 	.word	0x0800a5d4
 800079c:	0800a5dc 	.word	0x0800a5dc
 80007a0:	20000000 	.word	0x20000000
 80007a4:	08000df5 	.word	0x08000df5
 80007a8:	0800a4dc 	.word	0x0800a4dc
 80007ac:	200000a4 	.word	0x200000a4
 80007b0:	200000a6 	.word	0x200000a6
 80007b4:	0800a4f0 	.word	0x0800a4f0
 80007b8:	0800a510 	.word	0x0800a510
 80007bc:	0800a524 	.word	0x0800a524
 80007c0:	0001e240 	.word	0x0001e240
 80007c4:	0800a538 	.word	0x0800a538
 80007c8:	0800a550 	.word	0x0800a550
 80007cc:	0800a570 	.word	0x0800a570
 80007d0:	0800a58c 	.word	0x0800a58c
 80007d4:	0800a5a8 	.word	0x0800a5a8
 80007d8:	0800a5c8 	.word	0x0800a5c8
 80007dc:	0800a5cc 	.word	0x0800a5cc

080007e0 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

	/* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80007e4:	f000 f812 	bl	800080c <User_Process>
  hci_user_evt_proc();
 80007e8:	f008 fc5e 	bl	80090a8 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2000      	movs	r0, #0
 80007f8:	f001 fe26 	bl	8002448 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 fd8f 	bl	8002320 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8000802:	2000      	movs	r0, #0
 8000804:	f001 fed2 	bl	80025ac <BSP_COM_Init>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 800080c:	b5b0      	push	{r4, r5, r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
  if (set_connectable)
 8000812:	4b3d      	ldr	r3, [pc, #244]	; (8000908 <User_Process+0xfc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <User_Process+0x28>
  {
    /* Establish connection with remote device */
    Make_Connection();
 800081c:	f000 f908 	bl	8000a30 <Make_Connection>
    set_connectable = FALSE;
 8000820:	4b39      	ldr	r3, [pc, #228]	; (8000908 <User_Process+0xfc>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000826:	2000      	movs	r0, #0
 8000828:	f001 fe62 	bl	80024f0 <BSP_PB_GetState>
 800082c:	4603      	mov	r3, r0
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b36      	ldr	r3, [pc, #216]	; (800090c <User_Process+0x100>)
 8000832:	701a      	strb	r2, [r3, #0]
  }

  if (BLE_Role == CLIENT)
 8000834:	4b36      	ldr	r3, [pc, #216]	; (8000910 <User_Process+0x104>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d12e      	bne.n	800089a <User_Process+0x8e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <User_Process+0x108>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d007      	beq.n	8000854 <User_Process+0x48>
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <User_Process+0x10c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <User_Process+0x48>
      startReadTXCharHandle();
 800084e:	f000 f959 	bl	8000b04 <startReadTXCharHandle>
 8000852:	e00a      	b.n	800086a <User_Process+0x5e>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){
 8000854:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <User_Process+0x108>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <User_Process+0x5e>
 800085c:	4b2f      	ldr	r3, [pc, #188]	; (800091c <User_Process+0x110>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <User_Process+0x5e>
      startReadRXCharHandle();
 8000866:	f000 f973 	bl	8000b50 <startReadRXCharHandle>
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled)
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <User_Process+0x108>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d013      	beq.n	800089a <User_Process+0x8e>
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <User_Process+0x10c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d00e      	beq.n	800089a <User_Process+0x8e>
 800087c:	4b27      	ldr	r3, [pc, #156]	; (800091c <User_Process+0x110>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d009      	beq.n	800089a <User_Process+0x8e>
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <User_Process+0x114>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d104      	bne.n	800089a <User_Process+0x8e>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fd6d 	bl	8002370 <BSP_LED_Off>
      enableNotification();
 8000896:	f000 f9d7 	bl	8000c48 <enableNotification>
    }
  }

  /* Check if the User Button has been pushed */
  if (user_button_pressed)
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <User_Process+0x118>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d02c      	beq.n	80008fe <User_Process+0xf2>
  {
    /* Debouncing */
    HAL_Delay(50);
 80008a4:	2032      	movs	r0, #50	; 0x32
 80008a6:	f002 f8d7 	bl	8002a58 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80008aa:	bf00      	nop
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 fe1f 	bl	80024f0 <BSP_PB_GetState>
 80008b2:	4602      	mov	r2, r0
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <User_Process+0x100>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	bf0c      	ite	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	2300      	movne	r3, #0
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d0f1      	beq.n	80008ac <User_Process+0xa0>

    /* Debouncing */
    HAL_Delay(50);
 80008c8:	2032      	movs	r0, #50	; 0x32
 80008ca:	f002 f8c5 	bl	8002a58 <HAL_Delay>

    if (connected && notification_enabled)
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <User_Process+0x108>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d010      	beq.n	80008f8 <User_Process+0xec>
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <User_Process+0x114>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d00b      	beq.n	80008f8 <User_Process+0xec>
    {
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <User_Process+0x11c>)
 80008e2:	1d3c      	adds	r4, r7, #4
 80008e4:	461d      	mov	r5, r3
 80008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ea:	682b      	ldr	r3, [r5, #0]
 80008ec:	6023      	str	r3, [r4, #0]
      sendData(data, sizeof(data));
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2114      	movs	r1, #20
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 f978 	bl	8000be8 <sendData>
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }

    /* Reset the User Button flag */
    user_button_pressed = 0;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <User_Process+0x118>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
  }
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bdb0      	pop	{r4, r5, r7, pc}
 8000906:	bf00      	nop
 8000908:	20000001 	.word	0x20000001
 800090c:	20000000 	.word	0x20000000
 8000910:	200000a6 	.word	0x200000a6
 8000914:	200000a8 	.word	0x200000a8
 8000918:	200000b1 	.word	0x200000b1
 800091c:	200000b2 	.word	0x200000b2
 8000920:	200000ae 	.word	0x200000ae
 8000924:	200000a5 	.word	0x200000a5
 8000928:	0800a5e4 	.word	0x0800a5e4

0800092c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8000936:	4b04      	ldr	r3, [pc, #16]	; (8000948 <BSP_PB_Callback+0x1c>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	200000a5 	.word	0x200000a5

0800094c <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b095      	sub	sp, #84	; 0x54
 8000950:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <Add_Sample_Service+0xcc>)
 8000954:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <Add_Sample_Service+0xd0>)
 8000960:	f107 0414 	add.w	r4, r7, #20
 8000964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000966:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <Add_Sample_Service+0xd4>)
 800096c:	1d3c      	adds	r4, r7, #4
 800096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000974:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <Add_Sample_Service+0xd8>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2307      	movs	r3, #7
 800097e:	2201      	movs	r2, #1
 8000980:	2002      	movs	r0, #2
 8000982:	f007 fcb1 	bl	80082e8 <aci_gatt_add_serv>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800098c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000990:	2b00      	cmp	r3, #0
 8000992:	d136      	bne.n	8000a02 <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <Add_Sample_Service+0xd8>)
 8000996:	8818      	ldrh	r0, [r3, #0]
 8000998:	f107 0214 	add.w	r2, r7, #20
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <Add_Sample_Service+0xdc>)
 800099e:	9305      	str	r3, [sp, #20]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9304      	str	r3, [sp, #16]
 80009a4:	2310      	movs	r3, #16
 80009a6:	9303      	str	r3, [sp, #12]
 80009a8:	2300      	movs	r3, #0
 80009aa:	9302      	str	r3, [sp, #8]
 80009ac:	2300      	movs	r3, #0
 80009ae:	9301      	str	r3, [sp, #4]
 80009b0:	2310      	movs	r3, #16
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2314      	movs	r3, #20
 80009b6:	2102      	movs	r1, #2
 80009b8:	f007 fd22 	bl	8008400 <aci_gatt_add_char>
 80009bc:	4603      	mov	r3, r0
 80009be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d11d      	bne.n	8000a06 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <Add_Sample_Service+0xd8>)
 80009cc:	8818      	ldrh	r0, [r3, #0]
 80009ce:	1d3a      	adds	r2, r7, #4
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <Add_Sample_Service+0xe0>)
 80009d2:	9305      	str	r3, [sp, #20]
 80009d4:	2301      	movs	r3, #1
 80009d6:	9304      	str	r3, [sp, #16]
 80009d8:	2310      	movs	r3, #16
 80009da:	9303      	str	r3, [sp, #12]
 80009dc:	2301      	movs	r3, #1
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	2300      	movs	r3, #0
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	230c      	movs	r3, #12
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2314      	movs	r3, #20
 80009ea:	2102      	movs	r1, #2
 80009ec:	f007 fd08 	bl	8008400 <aci_gatt_add_char>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80009f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d105      	bne.n	8000a0a <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e005      	b.n	8000a0e <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a02:	bf00      	nop
 8000a04:	e002      	b.n	8000a0c <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a06:	bf00      	nop
 8000a08:	e000      	b.n	8000a0c <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000a0a:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000a0c:	2347      	movs	r3, #71	; 0x47
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	373c      	adds	r7, #60	; 0x3c
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	bf00      	nop
 8000a18:	0800a5f8 	.word	0x0800a5f8
 8000a1c:	0800a608 	.word	0x0800a608
 8000a20:	0800a618 	.word	0x0800a618
 8000a24:	200004d2 	.word	0x200004d2
 8000a28:	200004d0 	.word	0x200004d0
 8000a2c:	200004d4 	.word	0x200004d4

08000a30 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08f      	sub	sp, #60	; 0x3c
 8000a34:	af08      	add	r7, sp, #32
  tBleStatus ret;

  if(BLE_Role == CLIENT) {
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <Make_Connection+0xc0>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d132      	bne.n	8000aa4 <Make_Connection+0x74>

    printf("Client Create Connection\n");
 8000a3e:	482d      	ldr	r0, [pc, #180]	; (8000af4 <Make_Connection+0xc4>)
 8000a40:	f009 f816 	bl	8009a70 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000a44:	4a2c      	ldr	r2, [pc, #176]	; (8000af8 <Make_Connection+0xc8>)
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4e:	6018      	str	r0, [r3, #0]
 8000a50:	3304      	adds	r3, #4
 8000a52:	8019      	strh	r1, [r3, #0]

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000a54:	2000      	movs	r0, #0
 8000a56:	f001 fc75 	bl	8002344 <BSP_LED_On>

    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min,
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a62:	9206      	str	r2, [sp, #24]
 8000a64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a68:	9205      	str	r2, [sp, #20]
 8000a6a:	223c      	movs	r2, #60	; 0x3c
 8000a6c:	9204      	str	r2, [sp, #16]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	9203      	str	r2, [sp, #12]
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	9202      	str	r2, [sp, #8]
 8000a76:	2228      	movs	r2, #40	; 0x28
 8000a78:	9201      	str	r2, [sp, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a88:	f007 fb76 	bl	8008178 <aci_gap_create_connection>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	75fb      	strb	r3, [r7, #23]
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2);

    if (ret != 0){
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d027      	beq.n	8000ae6 <Make_Connection+0xb6>
      printf("Error while starting connection.\n");
 8000a96:	4819      	ldr	r0, [pc, #100]	; (8000afc <Make_Connection+0xcc>)
 8000a98:	f008 ffea 	bl	8009a70 <puts>
      HAL_Delay(100);
 8000a9c:	2064      	movs	r0, #100	; 0x64
 8000a9e:	f001 ffdb 	bl	8002a58 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
                                   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000aa2:	e020      	b.n	8000ae6 <Make_Connection+0xb6>
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <Make_Connection+0xd0>)
 8000aa6:	463c      	mov	r4, r7
 8000aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aaa:	c407      	stmia	r4!, {r0, r1, r2}
 8000aac:	7023      	strb	r3, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f008 f8a1 	bl	8008bf8 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	9306      	str	r3, [sp, #24]
 8000aba:	2300      	movs	r3, #0
 8000abc:	9305      	str	r3, [sp, #20]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9304      	str	r3, [sp, #16]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9303      	str	r3, [sp, #12]
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	9302      	str	r3, [sp, #8]
 8000aca:	230d      	movs	r3, #13
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000adc:	2000      	movs	r0, #0
 8000ade:	f007 fa05 	bl	8007eec <aci_gap_set_discoverable>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	75fb      	strb	r3, [r7, #23]
}
 8000ae6:	bf00      	nop
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000a6 	.word	0x200000a6
 8000af4:	0800a628 	.word	0x0800a628
 8000af8:	0800a668 	.word	0x0800a668
 8000afc:	0800a644 	.word	0x0800a644
 8000b00:	0800a670 	.word	0x0800a670

08000b04 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af02      	add	r7, sp, #8
  if (!start_read_tx_char_handle)
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <startReadTXCharHandle+0x40>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d112      	bne.n	8000b3a <startReadTXCharHandle+0x36>
  {
    PRINTF("Start reading TX Char Handle\n");

    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <startReadTXCharHandle+0x44>)
 8000b16:	463c      	mov	r4, r7
 8000b18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <startReadTXCharHandle+0x48>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	b298      	uxth	r0, r3
 8000b24:	463b      	mov	r3, r7
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2e:	2101      	movs	r1, #1
 8000b30:	f007 fdca 	bl	80086c8 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <startReadTXCharHandle+0x40>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000af 	.word	0x200000af
 8000b48:	0800a608 	.word	0x0800a608
 8000b4c:	200000ac 	.word	0x200000ac

08000b50 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None
 * @retval None
 */
void startReadRXCharHandle(void)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af02      	add	r7, sp, #8
  if (!start_read_rx_char_handle)
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <startReadRXCharHandle+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d112      	bne.n	8000b86 <startReadRXCharHandle+0x36>
  {
    PRINTF("Start reading RX Char Handle\n");

    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <startReadRXCharHandle+0x44>)
 8000b62:	463c      	mov	r4, r7
 8000b64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <startReadRXCharHandle+0x48>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b298      	uxth	r0, r3
 8000b70:	463b      	mov	r3, r7
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2302      	movs	r3, #2
 8000b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	f007 fda4 	bl	80086c8 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <startReadRXCharHandle+0x40>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
  }
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000b0 	.word	0x200000b0
 8000b94:	0800a618 	.word	0x0800a618
 8000b98:	200000ac 	.word	0x200000ac

08000b9c <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f001 fbf7 	bl	800239c <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	e009      	b.n	8000bc8 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f008 fed3 	bl	8009968 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	68fa      	ldr	r2, [r7, #12]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf1      	blt.n	8000bb4 <receiveData+0x18>
  }
  fflush(stdout);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <receiveData+0x48>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f008 fcbe 	bl	8009558 <fflush>
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000024 	.word	0x20000024

08000be8 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <sendData+0x4c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d10b      	bne.n	8000c14 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <sendData+0x50>)
 8000bfe:	8818      	ldrh	r0, [r3, #0]
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <sendData+0x54>)
 8000c02:	8819      	ldrh	r1, [r3, #0]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f007 fcc9 	bl	80085a4 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000c12:	e00a      	b.n	8000c2a <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <sendData+0x58>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <sendData+0x5c>)
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	b299      	uxth	r1, r3
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f007 fe5a 	bl	80088de <aci_gatt_write_without_response>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000a6 	.word	0x200000a6
 8000c38:	200004d2 	.word	0x200004d2
 8000c3c:	200004d0 	.word	0x200004d0
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	200004ce 	.word	0x200004ce

08000c48 <enableNotification>:
 * @brief  Enable notification
 * @param  None
 * @retval None
 */
void enableNotification(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000c4e:	2301      	movs	r3, #1
 8000c50:	803b      	strh	r3, [r7, #0]

  uint32_t tickstart = HAL_GetTick();
 8000c52:	f001 fef5 	bl	8002a40 <HAL_GetTick>
 8000c56:	6078      	str	r0, [r7, #4]

  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c58:	e008      	b.n	8000c6c <enableNotification+0x24>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c5a:	f001 fef1 	bl	8002a40 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d80e      	bhi.n	8000c8a <enableNotification+0x42>
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <enableNotification+0x54>)
 8000c6e:	881b      	ldrh	r3, [r3, #0]
 8000c70:	b298      	uxth	r0, r3
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <enableNotification+0x58>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	3302      	adds	r3, #2
 8000c78:	b299      	uxth	r1, r3
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f007 fdb2 	bl	80087e6 <aci_gatt_write_charac_descriptor>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b46      	cmp	r3, #70	; 0x46
 8000c86:	d0e8      	beq.n	8000c5a <enableNotification+0x12>
 8000c88:	e000      	b.n	8000c8c <enableNotification+0x44>
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000c8a:	bf00      	nop
  }
  notification_enabled = TRUE;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <enableNotification+0x5c>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000ac 	.word	0x200000ac
 8000ca0:	200004cc 	.word	0x200004cc
 8000ca4:	200000ae 	.word	0x200000ae

08000ca8 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	603a      	str	r2, [r7, #0]
 8000cb2:	80fb      	strh	r3, [r7, #6]
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8000cb8:	88fa      	ldrh	r2, [r7, #6]
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <Attribute_Modified_CB+0x4c>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d105      	bne.n	8000cd0 <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6838      	ldr	r0, [r7, #0]
 8000cca:	f7ff ff67 	bl	8000b9c <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 8000cce:	e00c      	b.n	8000cea <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <Attribute_Modified_CB+0x50>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d106      	bne.n	8000cea <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d102      	bne.n	8000cea <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <Attribute_Modified_CB+0x54>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200004d4 	.word	0x200004d4
 8000cf8:	200004d0 	.word	0x200004d0
 8000cfc:	200000ae 	.word	0x200000ae

08000d00 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <GAP_ConnectionComplete_CB+0x54>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <GAP_ConnectionComplete_CB+0x58>)
 8000d14:	887b      	ldrh	r3, [r7, #2]
 8000d16:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <GAP_ConnectionComplete_CB+0x5c>)
 8000d1a:	f008 fe0d 	bl	8009938 <iprintf>
  for(int i = 5; i > 0; i--){
 8000d1e:	2305      	movs	r3, #5
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e00a      	b.n	8000d3a <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <GAP_ConnectionComplete_CB+0x60>)
 8000d30:	f008 fe02 	bl	8009938 <iprintf>
  for(int i = 5; i > 0; i--){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dcf1      	bgt.n	8000d24 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	4807      	ldr	r0, [pc, #28]	; (8000d64 <GAP_ConnectionComplete_CB+0x64>)
 8000d48:	f008 fdf6 	bl	8009938 <iprintf>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000a8 	.word	0x200000a8
 8000d58:	200000ac 	.word	0x200000ac
 8000d5c:	0800a680 	.word	0x0800a680
 8000d60:	0800a698 	.word	0x0800a698
 8000d64:	0800a6a0 	.word	0x0800a6a0

08000d68 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <GAP_DisconnectionComplete_CB+0x38>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <GAP_DisconnectionComplete_CB+0x3c>)
 8000d74:	f008 fe7c 	bl	8009a70 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <GAP_DisconnectionComplete_CB+0x40>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <GAP_DisconnectionComplete_CB+0x44>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <GAP_DisconnectionComplete_CB+0x48>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <GAP_DisconnectionComplete_CB+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <GAP_DisconnectionComplete_CB+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <GAP_DisconnectionComplete_CB+0x54>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200000a8 	.word	0x200000a8
 8000da4:	0800a6a8 	.word	0x0800a6a8
 8000da8:	20000001 	.word	0x20000001
 8000dac:	200000ae 	.word	0x200000ae
 8000db0:	200000af 	.word	0x200000af
 8000db4:	200000b0 	.word	0x200000b0
 8000db8:	200000b1 	.word	0x200000b1
 8000dbc:	200000b2 	.word	0x200000b2

08000dc0 <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	603a      	str	r2, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 8000dd0:	88fa      	ldrh	r2, [r7, #6]
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <GATT_Notification_CB+0x30>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d104      	bne.n	8000de6 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	4619      	mov	r1, r3
 8000de0:	6838      	ldr	r0, [r7, #0]
 8000de2:	f7ff fedb 	bl	8000b9c <receiveData>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200004cc 	.word	0x200004cc

08000df4 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e02:	3301      	adds	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	f040 80e2 	bne.w	8000fd4 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 8000e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2bff      	cmp	r3, #255	; 0xff
 8000e16:	d021      	beq.n	8000e5c <user_notify+0x68>
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	f300 80e0 	bgt.w	8000fde <user_notify+0x1ea>
 8000e1e:	2b05      	cmp	r3, #5
 8000e20:	d002      	beq.n	8000e28 <user_notify+0x34>
 8000e22:	2b3e      	cmp	r3, #62	; 0x3e
 8000e24:	d003      	beq.n	8000e2e <user_notify+0x3a>
 8000e26:	e0da      	b.n	8000fde <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000e28:	f7ff ff9e 	bl	8000d68 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000e2c:	e0d7      	b.n	8000fde <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e30:	3302      	adds	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 80cd 	bne.w	8000fd8 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1d5a      	adds	r2, r3, #5
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4610      	mov	r0, r2
 8000e54:	f7ff ff54 	bl	8000d00 <GAP_ConnectionComplete_CB>
        }
        break;
 8000e58:	bf00      	nop
      }
    }
    break;
 8000e5a:	e0bd      	b.n	8000fd8 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	3302      	adds	r3, #2
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8000e6c:	2b11      	cmp	r3, #17
 8000e6e:	f200 80b5 	bhi.w	8000fdc <user_notify+0x1e8>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <user_notify+0x84>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000ec1 	.word	0x08000ec1
 8000e7c:	08000fdd 	.word	0x08000fdd
 8000e80:	08000fdd 	.word	0x08000fdd
 8000e84:	08000fdd 	.word	0x08000fdd
 8000e88:	08000fdd 	.word	0x08000fdd
 8000e8c:	08000fdd 	.word	0x08000fdd
 8000e90:	08000fdd 	.word	0x08000fdd
 8000e94:	08000fdd 	.word	0x08000fdd
 8000e98:	08000fdd 	.word	0x08000fdd
 8000e9c:	08000fdd 	.word	0x08000fdd
 8000ea0:	08000fdd 	.word	0x08000fdd
 8000ea4:	08000fdd 	.word	0x08000fdd
 8000ea8:	08000fdd 	.word	0x08000fdd
 8000eac:	08000fdd 	.word	0x08000fdd
 8000eb0:	08000f01 	.word	0x08000f01
 8000eb4:	08000f8d 	.word	0x08000f8d
 8000eb8:	08000fdd 	.word	0x08000fdd
 8000ebc:	08000f23 	.word	0x08000f23

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8000ec0:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <user_notify+0x1f0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d10d      	bne.n	8000ee4 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	3302      	adds	r3, #2
 8000ecc:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	885b      	ldrh	r3, [r3, #2]
 8000ed2:	b298      	uxth	r0, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	7919      	ldrb	r1, [r3, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	3307      	adds	r3, #7
 8000edc:	461a      	mov	r2, r3
 8000ede:	f7ff fee3 	bl	8000ca8 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 8000ee2:	e076      	b.n	8000fd2 <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	885b      	ldrh	r3, [r3, #2]
 8000eee:	b298      	uxth	r0, r3
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	7919      	ldrb	r1, [r3, #4]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	3305      	adds	r3, #5
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f7ff fed5 	bl	8000ca8 <Attribute_Modified_CB>
        break;
 8000efe:	e068      	b.n	8000fd2 <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	3302      	adds	r3, #2
 8000f04:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f0c:	b298      	uxth	r0, r3
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	3b02      	subs	r3, #2
 8000f14:	b2d9      	uxtb	r1, r3
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f7ff ff50 	bl	8000dc0 <GATT_Notification_CB>
        }
        break;
 8000f20:	e057      	b.n	8000fd2 <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8000f22:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <user_notify+0x1f4>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d150      	bne.n	8000fcc <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <user_notify+0x1f8>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d011      	beq.n	8000f5e <user_notify+0x16a>
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <user_notify+0x1fc>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10c      	bne.n	8000f5e <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8000f44:	6a3b      	ldr	r3, [r7, #32]
 8000f46:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <user_notify+0x200>)
 8000f4e:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 8000f50:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <user_notify+0x200>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4828      	ldr	r0, [pc, #160]	; (8000ff8 <user_notify+0x204>)
 8000f58:	f008 fcee 	bl	8009938 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8000f5c:	e036      	b.n	8000fcc <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <user_notify+0x208>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d031      	beq.n	8000fcc <user_notify+0x1d8>
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <user_notify+0x20c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d12c      	bne.n	8000fcc <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <user_notify+0x210>)
 8000f7c:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <user_notify+0x210>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	4619      	mov	r1, r3
 8000f84:	4820      	ldr	r0, [pc, #128]	; (8001008 <user_notify+0x214>)
 8000f86:	f008 fcd7 	bl	8009938 <iprintf>
        break;
 8000f8a:	e01f      	b.n	8000fcc <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <user_notify+0x1f4>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d11d      	bne.n	8000fd0 <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <user_notify+0x1f8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <user_notify+0x1bc>
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <user_notify+0x1fc>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d103      	bne.n	8000fb0 <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <user_notify+0x1fc>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 8000fae:	e00f      	b.n	8000fd0 <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <user_notify+0x208>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00a      	beq.n	8000fd0 <user_notify+0x1dc>
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <user_notify+0x20c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <user_notify+0x20c>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
        break;
 8000fca:	e001      	b.n	8000fd0 <user_notify+0x1dc>
        break;
 8000fcc:	bf00      	nop
 8000fce:	e005      	b.n	8000fdc <user_notify+0x1e8>
        break;
 8000fd0:	bf00      	nop
      }
    }
    break;
 8000fd2:	e003      	b.n	8000fdc <user_notify+0x1e8>
    return;
 8000fd4:	bf00      	nop
 8000fd6:	e002      	b.n	8000fde <user_notify+0x1ea>
    break;
 8000fd8:	bf00      	nop
 8000fda:	e000      	b.n	8000fde <user_notify+0x1ea>
    break;
 8000fdc:	bf00      	nop
  }
}
 8000fde:	3730      	adds	r7, #48	; 0x30
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	200000a6 	.word	0x200000a6
 8000fec:	200000af 	.word	0x200000af
 8000ff0:	200000b1 	.word	0x200000b1
 8000ff4:	200004cc 	.word	0x200004cc
 8000ff8:	0800a6b8 	.word	0x0800a6b8
 8000ffc:	200000b0 	.word	0x200000b0
 8001000:	200000b2 	.word	0x200000b2
 8001004:	200004ce 	.word	0x200004ce
 8001008:	0800a6d0 	.word	0x0800a6d0

0800100c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <HCI_TL_SPI_Init+0x84>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HCI_TL_SPI_Init+0x84>)
 800101a:	f043 0301 	orr.w	r3, r3, #1
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HCI_TL_SPI_Init+0x84>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HCI_TL_SPI_Init+0x88>)
 8001032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4619      	mov	r1, r3
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <HCI_TL_SPI_Init+0x8c>)
 8001040:	f002 fe92 	bl	8003d68 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f002 fe82 	bl	8003d68 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4807      	ldr	r0, [pc, #28]	; (800109c <HCI_TL_SPI_Init+0x90>)
 800107e:	f002 fe73 	bl	8003d68 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001082:	f001 fb83 	bl	800278c <BSP_SPI3_Init>
 8001086:	4603      	mov	r3, r0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000
 8001094:	10110000 	.word	0x10110000
 8001098:	48001000 	.word	0x48001000
 800109c:	48000c00 	.word	0x48000c00

080010a0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 80010a4:	2140      	movs	r1, #64	; 0x40
 80010a6:	4808      	ldr	r0, [pc, #32]	; (80010c8 <HCI_TL_SPI_DeInit+0x28>)
 80010a8:	f002 fff0 	bl	800408c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 80010ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <HCI_TL_SPI_DeInit+0x2c>)
 80010b2:	f002 ffeb 	bl	800408c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f002 ffe5 	bl	800408c <HAL_GPIO_DeInit>
  return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	48001000 	.word	0x48001000
 80010cc:	48000c00 	.word	0x48000c00

080010d0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <HCI_TL_SPI_Reset+0x40>)
 80010dc:	f003 f8e0 	bl	80042a0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f003 f8d9 	bl	80042a0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80010ee:	2005      	movs	r0, #5
 80010f0:	f001 fcb2 	bl	8002a58 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f003 f8cf 	bl	80042a0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001102:	2005      	movs	r0, #5
 8001104:	f001 fca8 	bl	8002a58 <HAL_Delay>
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	48000c00 	.word	0x48000c00

08001114 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HCI_TL_SPI_Receive+0xb0>)
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001132:	6018      	str	r0, [r3, #0]
 8001134:	3304      	adds	r3, #4
 8001136:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	4822      	ldr	r0, [pc, #136]	; (80011c8 <HCI_TL_SPI_Receive+0xb4>)
 8001140:	f003 f8ae 	bl	80042a0 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001144:	f107 010c 	add.w	r1, r7, #12
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2205      	movs	r2, #5
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fb4c 	bl	80027ec <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d129      	bne.n	80011ae <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800115a:	7c3b      	ldrb	r3, [r7, #16]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 800116a:	8bfb      	ldrh	r3, [r7, #30]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01e      	beq.n	80011ae <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001170:	8bfa      	ldrh	r2, [r7, #30]
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	429a      	cmp	r2, r3
 8001176:	d901      	bls.n	800117c <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 800117c:	2300      	movs	r3, #0
 800117e:	777b      	strb	r3, [r7, #29]
 8001180:	e010      	b.n	80011a4 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001182:	f107 011b 	add.w	r1, r7, #27
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2201      	movs	r2, #1
 800118c:	4618      	mov	r0, r3
 800118e:	f001 fb2d 	bl	80027ec <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001192:	7f7b      	ldrb	r3, [r7, #29]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	7efa      	ldrb	r2, [r7, #27]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 800119e:	7f7b      	ldrb	r3, [r7, #29]
 80011a0:	3301      	adds	r3, #1
 80011a2:	777b      	strb	r3, [r7, #29]
 80011a4:	7f7b      	ldrb	r3, [r7, #29]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	8bfa      	ldrh	r2, [r7, #30]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d8e9      	bhi.n	8001182 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b4:	4804      	ldr	r0, [pc, #16]	; (80011c8 <HCI_TL_SPI_Receive+0xb4>)
 80011b6:	f003 f873 	bl	80042a0 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 80011ba:	7f7b      	ldrb	r3, [r7, #29]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	0800a6e8 	.word	0x0800a6e8
 80011c8:	48000c00 	.word	0x48000c00

080011cc <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <HCI_TL_SPI_Send+0xa0>)
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011e2:	6018      	str	r0, [r3, #0]
 80011e4:	3304      	adds	r3, #4
 80011e6:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80011e8:	f001 fc2a 	bl	8002a40 <HAL_GetTick>
 80011ec:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f8:	481d      	ldr	r0, [pc, #116]	; (8001270 <HCI_TL_SPI_Send+0xa4>)
 80011fa:	f003 f851 	bl	80042a0 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80011fe:	f107 0108 	add.w	r1, r7, #8
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	2205      	movs	r2, #5
 8001208:	4618      	mov	r0, r3
 800120a:	f001 faef 	bl	80027ec <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 800120e:	7a3b      	ldrb	r3, [r7, #8]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d10f      	bne.n	8001234 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001214:	7a7b      	ldrb	r3, [r7, #9]
 8001216:	b29b      	uxth	r3, r3
 8001218:	887a      	ldrh	r2, [r7, #2]
 800121a:	429a      	cmp	r2, r3
 800121c:	d806      	bhi.n	800122c <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	461a      	mov	r2, r3
 8001222:	4914      	ldr	r1, [pc, #80]	; (8001274 <HCI_TL_SPI_Send+0xa8>)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f001 fae1 	bl	80027ec <BSP_SPI3_SendRecv>
 800122a:	e006      	b.n	800123a <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 800122c:	f06f 0301 	mvn.w	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e002      	b.n	800123a <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <HCI_TL_SPI_Send+0xa4>)
 8001242:	f003 f82d 	bl	80042a0 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001246:	f001 fbfb 	bl	8002a40 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d903      	bls.n	800125c <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 8001254:	f06f 0302 	mvn.w	r3, #2
 8001258:	61fb      	str	r3, [r7, #28]
      break;
 800125a:	e002      	b.n	8001262 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b00      	cmp	r3, #0
 8001260:	dbc5      	blt.n	80011ee <HCI_TL_SPI_Send+0x22>

  return result;
 8001262:	69fb      	ldr	r3, [r7, #28]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	0800a6f0 	.word	0x0800a6f0
 8001270:	48000c00 	.word	0x48000c00
 8001274:	200000b4 	.word	0x200000b4

08001278 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800127c:	2140      	movs	r1, #64	; 0x40
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <IsDataAvailable+0x1c>)
 8001280:	f002 fff6 	bl	8004270 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	bf0c      	ite	eq
 800128a:	2301      	moveq	r3, #1
 800128c:	2300      	movne	r3, #0
 800128e:	b2db      	uxtb	r3, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	48001000 	.word	0x48001000

08001298 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <hci_tl_lowlevel_init+0x50>)
 80012a0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <hci_tl_lowlevel_init+0x54>)
 80012a4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <hci_tl_lowlevel_init+0x58>)
 80012a8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <hci_tl_lowlevel_init+0x5c>)
 80012ac:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <hci_tl_lowlevel_init+0x60>)
 80012b0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <hci_tl_lowlevel_init+0x64>)
 80012b4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 fdbb 	bl	8008e34 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 80012be:	4910      	ldr	r1, [pc, #64]	; (8001300 <hci_tl_lowlevel_init+0x68>)
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <hci_tl_lowlevel_init+0x6c>)
 80012c2:	f002 fd0d 	bl	8003ce0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <hci_tl_lowlevel_init+0x70>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	480e      	ldr	r0, [pc, #56]	; (8001304 <hci_tl_lowlevel_init+0x6c>)
 80012cc:	f002 fcee 	bl	8003cac <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2017      	movs	r0, #23
 80012d6:	f002 fba6 	bl	8003a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012da:	2017      	movs	r0, #23
 80012dc:	f002 fbbf 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	0800100d 	.word	0x0800100d
 80012ec:	080010a1 	.word	0x080010a1
 80012f0:	080011cd 	.word	0x080011cd
 80012f4:	08001115 	.word	0x08001115
 80012f8:	080010d1 	.word	0x080010d1
 80012fc:	0800282d 	.word	0x0800282d
 8001300:	16000006 	.word	0x16000006
 8001304:	200004d8 	.word	0x200004d8
 8001308:	0800130d 	.word	0x0800130d

0800130c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001310:	e005      	b.n	800131e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001312:	2000      	movs	r0, #0
 8001314:	f007 fef4 	bl	8009100 <hci_notify_asynch_evt>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d105      	bne.n	800132a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800131e:	f7ff ffab 	bl	8001278 <IsDataAvailable>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f4      	bne.n	8001312 <hci_tl_lowlevel_isr+0x6>
 8001328:	e000      	b.n	800132c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800132a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800132c:	bd80      	pop	{r7, pc}

0800132e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001332:	f001 fb1d 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001336:	f000 f819 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133a:	f000 fb17 	bl	800196c <MX_GPIO_Init>
  MX_ADC1_Init();
 800133e:	f000 f8c3 	bl	80014c8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8001342:	f000 f925 	bl	8001590 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8001346:	f000 f95b 	bl	8001600 <MX_I2C1_Init>
  MX_I2C2_Init();
 800134a:	f000 f999 	bl	8001680 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800134e:	f000 f9d7 	bl	8001700 <MX_OCTOSPI1_Init>
  MX_USART3_UART_Init();
 8001352:	f000 fab7 	bl	80018c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001356:	f000 fb01 	bl	800195c <MX_USB_OTG_FS_USB_Init>
  MX_SPI1_Init();
 800135a:	f000 fa27 	bl	80017ac <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800135e:	f000 fa63 	bl	8001828 <MX_USART2_UART_Init>
  MX_BlueNRG_MS_Init();
 8001362:	f7ff f919 	bl	8000598 <MX_BlueNRG_MS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  MX_BlueNRG_MS_Process();
 8001366:	f7ff fa3b 	bl	80007e0 <MX_BlueNRG_MS_Process>
 800136a:	e7fc      	b.n	8001366 <main+0x38>

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0bc      	sub	sp, #240	; 0xf0
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001376:	2244      	movs	r2, #68	; 0x44
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f008 fa29 	bl	80097d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2294      	movs	r2, #148	; 0x94
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fa1b 	bl	80097d2 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800139c:	2000      	movs	r0, #0
 800139e:	f003 fe21 	bl	8004fe4 <HAL_PWREx_ControlVoltageScaling>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0x40>
  {
    Error_Handler();
 80013a8:	f000 fc28 	bl	8001bfc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013ac:	f003 fdea 	bl	8004f84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <SystemClock_Config+0x154>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b6:	4a42      	ldr	r2, [pc, #264]	; (80014c0 <SystemClock_Config+0x154>)
 80013b8:	f023 0318 	bic.w	r3, r3, #24
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013c0:	2314      	movs	r3, #20
 80013c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c6:	2301      	movs	r3, #1
 80013c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013cc:	2301      	movs	r3, #1
 80013ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d8:	2360      	movs	r3, #96	; 0x60
 80013da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013f0:	233c      	movs	r3, #60	; 0x3c
 80013f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fe8d 	bl	800512c <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001418:	f000 fbf0 	bl	8001bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800143e:	2105      	movs	r1, #5
 8001440:	4618      	mov	r0, r3
 8001442:	f004 fa99 	bl	8005978 <HAL_RCC_ClockConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800144c:	f000 fbd6 	bl	8001bfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <SystemClock_Config+0x158>)
 8001452:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_OSPI;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001454:	2300      	movs	r3, #0
 8001456:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800145c:	2300      	movs	r3, #0
 800145e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001460:	2300      	movs	r3, #0
 8001462:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001464:	2300      	movs	r3, #0
 8001466:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800146c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800147c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001480:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001482:	2301      	movs	r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001486:	2301      	movs	r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800148a:	2318      	movs	r3, #24
 800148c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800148e:	2302      	movs	r3, #2
 8001490:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800149a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800149e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4618      	mov	r0, r3
 80014a4:	f004 fd1a 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0x146>
  {
    Error_Handler();
 80014ae:	f000 fba5 	bl	8001bfc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014b2:	f005 f843 	bl	800653c <HAL_RCCEx_EnableMSIPLLMode>
}
 80014b6:	bf00      	nop
 80014b8:	37f0      	adds	r7, #240	; 0xf0
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	010160c7 	.word	0x010160c7

080014c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <MX_ADC1_Init+0xc0>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <MX_ADC1_Init+0xbc>)
 80014fe:	2204      	movs	r2, #4
 8001500:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001504:	2200      	movs	r2, #0
 8001506:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_ADC1_Init+0xbc>)
 800150a:	2200      	movs	r2, #0
 800150c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001510:	2201      	movs	r2, #1
 8001512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_ADC1_Init+0xbc>)
 800151e:	2200      	movs	r2, #0
 8001520:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <MX_ADC1_Init+0xbc>)
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001532:	2200      	movs	r2, #0
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153e:	4811      	ldr	r0, [pc, #68]	; (8001584 <MX_ADC1_Init+0xbc>)
 8001540:	f001 fc4e 	bl	8002de0 <HAL_ADC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800154a:	f000 fb57 	bl	8001bfc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_ADC1_Init+0xc4>)
 8001550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001552:	2306      	movs	r3, #6
 8001554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800155a:	237f      	movs	r3, #127	; 0x7f
 800155c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800155e:	2304      	movs	r3, #4
 8001560:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_ADC1_Init+0xbc>)
 800156c:	f001 fd84 	bl	8003078 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001576:	f000 fb41 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000658 	.word	0x20000658
 8001588:	50040000 	.word	0x50040000
 800158c:	04300002 	.word	0x04300002

08001590 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <MX_DFSDM1_Init+0x6c>)
 8001598:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 800159c:	2201      	movs	r2, #1
 800159e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015c6:	2204      	movs	r2, #4
 80015c8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015d8:	2200      	movs	r2, #0
 80015da:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_DFSDM1_Init+0x68>)
 80015e4:	f002 fa56 	bl	8003a94 <HAL_DFSDM_ChannelInit>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80015ee:	f000 fb05 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200007b4 	.word	0x200007b4
 80015fc:	40016040 	.word	0x40016040

08001600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_I2C1_Init+0x74>)
 8001606:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <MX_I2C1_Init+0x78>)
 8001608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <MX_I2C1_Init+0x74>)
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <MX_I2C1_Init+0x7c>)
 800160e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <MX_I2C1_Init+0x74>)
 8001618:	2201      	movs	r2, #1
 800161a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b14      	ldr	r3, [pc, #80]	; (8001674 <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163a:	480e      	ldr	r0, [pc, #56]	; (8001674 <MX_I2C1_Init+0x74>)
 800163c:	f002 fe85 	bl	800434a <HAL_I2C_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001646:	f000 fad9 	bl	8001bfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <MX_I2C1_Init+0x74>)
 800164e:	f002 ff0b 	bl	8004468 <HAL_I2CEx_ConfigAnalogFilter>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001658:	f000 fad0 	bl	8001bfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_I2C1_Init+0x74>)
 8001660:	f002 ff4d 	bl	80044fe <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166a:	f000 fac7 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000570 	.word	0x20000570
 8001678:	40005400 	.word	0x40005400
 800167c:	307075b1 	.word	0x307075b1

08001680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <MX_I2C2_Init+0x74>)
 8001686:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <MX_I2C2_Init+0x78>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_I2C2_Init+0x74>)
 800168c:	4a1b      	ldr	r2, [pc, #108]	; (80016fc <MX_I2C2_Init+0x7c>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_I2C2_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_I2C2_Init+0x74>)
 8001698:	2201      	movs	r2, #1
 800169a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_I2C2_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016ba:	480e      	ldr	r0, [pc, #56]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016bc:	f002 fe45 	bl	800434a <HAL_I2C_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016c6:	f000 fa99 	bl	8001bfc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	4809      	ldr	r0, [pc, #36]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016ce:	f002 fecb 	bl	8004468 <HAL_I2CEx_ConfigAnalogFilter>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 fa90 	bl	8001bfc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_I2C2_Init+0x74>)
 80016e0:	f002 ff0d 	bl	80044fe <HAL_I2CEx_ConfigDigitalFilter>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 fa87 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000060c 	.word	0x2000060c
 80016f8:	40005800 	.word	0x40005800
 80016fc:	307075b1 	.word	0x307075b1

08001700 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001714:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001716:	4a24      	ldr	r2, [pc, #144]	; (80017a8 <MX_OCTOSPI1_Init+0xa8>)
 8001718:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 800171c:	2201      	movs	r2, #1
 800171e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001728:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800172c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001730:	2220      	movs	r2, #32
 8001732:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001736:	2201      	movs	r2, #1
 8001738:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800173a:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001748:	2201      	movs	r2, #1
 800174a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 800175a:	2200      	movs	r2, #0
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001760:	2208      	movs	r2, #8
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 8001766:	f002 ff17 	bl	8004598 <HAL_OSPI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001770:	f000 fa44 	bl	8001bfc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800177c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001780:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_OCTOSPI1_Init+0xa4>)
 800178c:	f002 ffbe 	bl	800470c <HAL_OSPIM_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001796:	f000 fa31 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200005bc 	.word	0x200005bc
 80017a8:	a0001000 	.word	0xa0001000

080017ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_SPI1_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <MX_SPI1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_SPI1_Init+0x74>)
 80017b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_SPI1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI1_Init+0x74>)
 80017c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI1_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_SPI1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI1_Init+0x74>)
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_SPI1_Init+0x74>)
 80017e2:	2218      	movs	r2, #24
 80017e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI1_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI1_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_SPI1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI1_Init+0x74>)
 80017fa:	2207      	movs	r2, #7
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI1_Init+0x74>)
 8001806:	2208      	movs	r2, #8
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_SPI1_Init+0x74>)
 800180c:	f005 f88e 	bl	800692c <HAL_SPI_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001816:	f000 f9f1 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200006c0 	.word	0x200006c0
 8001824:	40013000 	.word	0x40013000

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MX_USART2_UART_Init+0x94>)
 800182e:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <MX_USART2_UART_Init+0x98>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_USART2_UART_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_USART2_UART_Init+0x94>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001854:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001858:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_USART2_UART_Init+0x94>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <MX_USART2_UART_Init+0x94>)
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001874:	f005 fc7e 	bl	8007174 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800187e:	f000 f9bd 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001886:	f006 f9cd 	bl	8007c24 <HAL_UARTEx_SetTxFifoThreshold>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001890:	f000 f9b4 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4809      	ldr	r0, [pc, #36]	; (80018bc <MX_USART2_UART_Init+0x94>)
 8001898:	f006 fa02 	bl	8007ca0 <HAL_UARTEx_SetRxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80018a2:	f000 f9ab 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <MX_USART2_UART_Init+0x94>)
 80018a8:	f006 f983 	bl	8007bb2 <HAL_UARTEx_DisableFifoMode>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80018b2:	f000 f9a3 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000724 	.word	0x20000724
 80018c0:	40004400 	.word	0x40004400

080018c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c8:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <MX_USART3_UART_Init+0x94>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <MX_USART3_UART_Init+0x90>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_USART3_UART_Init+0x90>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_USART3_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <MX_USART3_UART_Init+0x90>)
 800190e:	f005 fc31 	bl	8007174 <HAL_UART_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001918:	f000 f970 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191c:	2100      	movs	r1, #0
 800191e:	480d      	ldr	r0, [pc, #52]	; (8001954 <MX_USART3_UART_Init+0x90>)
 8001920:	f006 f980 	bl	8007c24 <HAL_UARTEx_SetTxFifoThreshold>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800192a:	f000 f967 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192e:	2100      	movs	r1, #0
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <MX_USART3_UART_Init+0x90>)
 8001932:	f006 f9b5 	bl	8007ca0 <HAL_UARTEx_SetRxFifoThreshold>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800193c:	f000 f95e 	bl	8001bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_USART3_UART_Init+0x90>)
 8001942:	f006 f936 	bl	8007bb2 <HAL_UARTEx_DisableFifoMode>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800194c:	f000 f956 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200004e0 	.word	0x200004e0
 8001958:	40004800 	.word	0x40004800

0800195c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001982:	4b98      	ldr	r3, [pc, #608]	; (8001be4 <MX_GPIO_Init+0x278>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a97      	ldr	r2, [pc, #604]	; (8001be4 <MX_GPIO_Init+0x278>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b95      	ldr	r3, [pc, #596]	; (8001be4 <MX_GPIO_Init+0x278>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <MX_GPIO_Init+0x278>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a91      	ldr	r2, [pc, #580]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b2:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b86      	ldr	r3, [pc, #536]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a85      	ldr	r2, [pc, #532]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b83      	ldr	r3, [pc, #524]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a7f      	ldr	r2, [pc, #508]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b7d      	ldr	r3, [pc, #500]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	4b7a      	ldr	r3, [pc, #488]	; (8001be4 <MX_GPIO_Init+0x278>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a79      	ldr	r2, [pc, #484]	; (8001be4 <MX_GPIO_Init+0x278>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b77      	ldr	r3, [pc, #476]	; (8001be4 <MX_GPIO_Init+0x278>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	f240 1105 	movw	r1, #261	; 0x105
 8001a18:	4873      	ldr	r0, [pc, #460]	; (8001be8 <MX_GPIO_Init+0x27c>)
 8001a1a:	f002 fc41 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f248 111e 	movw	r1, #33054	; 0x811e
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f002 fc3a 	bl	80042a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001a32:	486e      	ldr	r0, [pc, #440]	; (8001bec <MX_GPIO_Init+0x280>)
 8001a34:	f002 fc34 	bl	80042a0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f242 0183 	movw	r1, #8323	; 0x2083
 8001a3e:	486c      	ldr	r0, [pc, #432]	; (8001bf0 <MX_GPIO_Init+0x284>)
 8001a40:	f002 fc2e 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2140      	movs	r1, #64	; 0x40
 8001a48:	486a      	ldr	r0, [pc, #424]	; (8001bf4 <MX_GPIO_Init+0x288>)
 8001a4a:	f002 fc29 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001a4e:	f240 1305 	movw	r3, #261	; 0x105
 8001a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4619      	mov	r1, r3
 8001a66:	4860      	ldr	r0, [pc, #384]	; (8001be8 <MX_GPIO_Init+0x27c>)
 8001a68:	f002 f97e 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8001a6c:	237a      	movs	r3, #122	; 0x7a
 8001a6e:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a70:	4b61      	ldr	r3, [pc, #388]	; (8001bf8 <MX_GPIO_Init+0x28c>)
 8001a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	485a      	ldr	r0, [pc, #360]	; (8001be8 <MX_GPIO_Init+0x27c>)
 8001a80:	f002 f972 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a84:	2301      	movs	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <MX_GPIO_Init+0x28c>)
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a9a:	f002 f965 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin
                           PA8 ARD_D9_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin
 8001a9e:	f248 131e 	movw	r3, #33054	; 0x811e
 8001aa2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aba:	f002 f955 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 031c 	add.w	r3, r7, #28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4844      	ldr	r0, [pc, #272]	; (8001bec <MX_GPIO_Init+0x280>)
 8001ada:	f002 f945 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001ade:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001ae2:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	483d      	ldr	r0, [pc, #244]	; (8001bec <MX_GPIO_Init+0x280>)
 8001af8:	f002 f936 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8001afc:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001b00:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <MX_GPIO_Init+0x28c>)
 8001b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4837      	ldr	r0, [pc, #220]	; (8001bf0 <MX_GPIO_Init+0x284>)
 8001b12:	f002 f929 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001b16:	f242 0383 	movw	r3, #8323	; 0x2083
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <MX_GPIO_Init+0x284>)
 8001b30:	f002 f91a 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001b34:	2340      	movs	r3, #64	; 0x40
 8001b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <MX_GPIO_Init+0x288>)
 8001b4c:	f002 f90c 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001b50:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <MX_GPIO_Init+0x28c>)
 8001b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <MX_GPIO_Init+0x288>)
 8001b66:	f002 f8ff 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b82:	f002 f8f1 	bl	8003d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001b86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba6:	f002 f8df 	bl	8003d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2006      	movs	r0, #6
 8001bb0:	f001 ff39 	bl	8003a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bb4:	2006      	movs	r0, #6
 8001bb6:	f001 ff52 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2017      	movs	r0, #23
 8001bc0:	f001 ff31 	bl	8003a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001bc4:	2017      	movs	r0, #23
 8001bc6:	f001 ff4a 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f001 ff29 	bl	8003a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f001 ff42 	bl	8003a5e <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48001000 	.word	0x48001000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	48000c00 	.word	0x48000c00
 8001bf4:	48000800 	.word	0x48000800
 8001bf8:	10110000 	.word	0x10110000

08001bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <Error_Handler+0x8>
	...

08001c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_MspInit+0x44>)
 8001c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_MspInit+0x44>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6613      	str	r3, [r2, #96]	; 0x60
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_MspInit+0x44>)
 8001c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_MspInit+0x44>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_MspInit+0x44>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6593      	str	r3, [r2, #88]	; 0x58
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_MspInit+0x44>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <HAL_ADC_MspInit+0x74>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d123      	bne.n	8001cba <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_ADC_MspInit+0x78>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001ca2:	233f      	movs	r3, #63	; 0x3f
 8001ca4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ca6:	230b      	movs	r3, #11
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_ADC_MspInit+0x7c>)
 8001cb6:	f002 f857 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	50040000 	.word	0x50040000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	48000800 	.word	0x48000800

08001cd0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	; 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d12d      	bne.n	8001d4c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_DFSDM_ChannelMspInit+0x88>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d20:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d32:	2306      	movs	r3, #6
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_DFSDM_ChannelMspInit+0x8c>)
 8001d3e:	f002 f813 	bl	8003d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a02      	ldr	r2, [pc, #8]	; (8001d54 <HAL_DFSDM_ChannelMspInit+0x84>)
 8001d4a:	6013      	str	r3, [r2, #0]
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200001b4 	.word	0x200001b4
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	48001000 	.word	0x48001000

08001d60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <HAL_I2C_MspInit+0xdc>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d129      	bne.n	8001dd6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d86:	4a2e      	ldr	r2, [pc, #184]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8e:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da0:	2312      	movs	r3, #18
 8001da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dac:	2304      	movs	r3, #4
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	4619      	mov	r1, r3
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <HAL_I2C_MspInit+0xe4>)
 8001db8:	f001 ffd6 	bl	8003d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dd4:	e02d      	b.n	8001e32 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_I2C_MspInit+0xe8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d128      	bne.n	8001e32 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001df8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfe:	2312      	movs	r3, #18
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <HAL_I2C_MspInit+0xe4>)
 8001e16:	f001 ffa7 	bl	8003d68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_I2C_MspInit+0xe0>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400
 8001e48:	40005800 	.word	0x40005800

08001e4c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  if(hospi->Instance==OCTOSPI1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1d      	ldr	r2, [pc, #116]	; (8001ee0 <HAL_OSPI_MspInit+0x94>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d134      	bne.n	8001ed8 <HAL_OSPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6513      	str	r3, [r2, #80]	; 0x50
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_OSPI_MspInit+0x98>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001eb6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001eba:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001ec8:	230a      	movs	r3, #10
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_OSPI_MspInit+0x9c>)
 8001ed4:	f001 ff48 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	a0001000 	.word	0xa0001000
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	48001000 	.word	0x48001000

08001eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_SPI_MspInit+0x7c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d128      	bne.n	8001f60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4a16      	ldr	r2, [pc, #88]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f18:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <HAL_SPI_MspInit+0x80>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23e0      	movs	r3, #224	; 0xe0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5c:	f001 ff04 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40021000 	.word	0x40021000

08001f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	; 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2e      	ldr	r2, [pc, #184]	; (8002048 <HAL_UART_MspInit+0xd8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d128      	bne.n	8001fe4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	4a2d      	ldr	r2, [pc, #180]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	4b28      	ldr	r3, [pc, #160]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a27      	ldr	r2, [pc, #156]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
    PD3     ------> USART2_CTS
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001fc2:	2378      	movs	r3, #120	; 0x78
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481c      	ldr	r0, [pc, #112]	; (8002050 <HAL_UART_MspInit+0xe0>)
 8001fde:	f001 fec3 	bl	8003d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fe2:	e02d      	b.n	8002040 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	; (8002054 <HAL_UART_MspInit+0xe4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d128      	bne.n	8002040 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_UART_MspInit+0xdc>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <HAL_UART_MspInit+0xdc>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a10      	ldr	r2, [pc, #64]	; (800204c <HAL_UART_MspInit+0xdc>)
 800200c:	f043 0308 	orr.w	r3, r3, #8
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_UART_MspInit+0xdc>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800201e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002030:	2307      	movs	r3, #7
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0xe0>)
 800203c:	f001 fe94 	bl	8003d68 <HAL_GPIO_Init>
}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40004400 	.word	0x40004400
 800204c:	40021000 	.word	0x40021000
 8002050:	48000c00 	.word	0x48000c00
 8002054:	40004800 	.word	0x40004800

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800205c:	e7fe      	b.n	800205c <NMI_Handler+0x4>

0800205e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <HardFault_Handler+0x4>

08002064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <MemManage_Handler+0x4>

0800206a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	e7fe      	b.n	8002074 <UsageFault_Handler+0x4>

08002076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a4:	f000 fcb8 	bl	8002a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020b0:	2001      	movs	r0, #1
 80020b2:	f002 f927 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020c0:	2020      	movs	r0, #32
 80020c2:	f002 f91f 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <EXTI9_5_IRQHandler+0x24>)
 80020c8:	f001 fe1e 	bl	8003d08 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020cc:	2080      	movs	r0, #128	; 0x80
 80020ce:	f002 f919 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020d6:	f002 f915 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200004d8 	.word	0x200004d8

080020e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80020e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020ec:	f002 f90a 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80020f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020f4:	f002 f906 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80020f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020fc:	f002 f902 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <EXTI15_10_IRQHandler+0x38>)
 8002102:	f001 fe01 	bl	8003d08 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002106:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800210a:	f002 f8fb 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800210e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002112:	f002 f8f7 	bl	8004304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000010 	.word	0x20000010

08002120 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	e00a      	b.n	8002148 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002132:	f3af 8000 	nop.w
 8002136:	4601      	mov	r1, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	60ba      	str	r2, [r7, #8]
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf0      	blt.n	8002132 <_read+0x12>
	}

return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e009      	b.n	8002180 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	60ba      	str	r2, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 faa9 	bl	80026cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf1      	blt.n	800216c <_write+0x12>
	}
	return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_close>:

int _close(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
	return -1;
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ba:	605a      	str	r2, [r3, #4]
	return 0;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <_isatty>:

int _isatty(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
	return 1;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
	return 0;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <_sbrk+0x5c>)
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <_sbrk+0x60>)
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <_sbrk+0x64>)
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <_sbrk+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	429a      	cmp	r2, r3
 800222a:	d207      	bcs.n	800223c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800222c:	f007 f8cc 	bl	80093c8 <__errno>
 8002230:	4603      	mov	r3, r0
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b08      	ldr	r3, [pc, #32]	; (8002260 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200a0000 	.word	0x200a0000
 800225c:	00000400 	.word	0x00000400
 8002260:	200001b8 	.word	0x200001b8
 8002264:	20000908 	.word	0x20000908

08002268 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <SystemInit+0x5c>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	4a14      	ldr	r2, [pc, #80]	; (80022c4 <SystemInit+0x5c>)
 8002274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <SystemInit+0x60>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a11      	ldr	r2, [pc, #68]	; (80022c8 <SystemInit+0x60>)
 8002282:	f043 0301 	orr.w	r3, r3, #1
 8002286:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002288:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <SystemInit+0x60>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <SystemInit+0x60>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <SystemInit+0x60>)
 8002294:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002298:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800229c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <SystemInit+0x60>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <SystemInit+0x60>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <SystemInit+0x60>)
 80022ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SystemInit+0x60>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	40021000 	.word	0x40021000

080022cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d0:	f7ff ffca 	bl	8002268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022d6:	e003      	b.n	80022e0 <LoopCopyDataInit>

080022d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022de:	3104      	adds	r1, #4

080022e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022e0:	480a      	ldr	r0, [pc, #40]	; (800230c <LoopForever+0xa>)
	ldr	r3, =_edata
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022e8:	d3f6      	bcc.n	80022d8 <CopyDataInit>
	ldr	r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022ec:	e002      	b.n	80022f4 <LoopFillZerobss>

080022ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022f0:	f842 3b04 	str.w	r3, [r2], #4

080022f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <LoopForever+0x16>)
	cmp	r2, r3
 80022f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80022f8:	d3f9      	bcc.n	80022ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fa:	f007 fa35 	bl	8009768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fe:	f7ff f816 	bl	800132e <main>

08002302 <LoopForever>:

LoopForever:
    b LoopForever
 8002302:	e7fe      	b.n	8002302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002304:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002308:	0800a824 	.word	0x0800a824
	ldr	r0, =_sdata
 800230c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002310:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8002314:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8002318:	20000904 	.word	0x20000904

0800231c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_IRQHandler>
	...

08002320 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <BSP_LED_Init+0x20>)
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	0800a740 	.word	0x0800a740

08002344 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <BSP_LED_On+0x28>)
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	f44f 7100 	mov.w	r1, #512	; 0x200
 800235a:	2201      	movs	r2, #1
 800235c:	4618      	mov	r0, r3
 800235e:	f001 ff9f 	bl	80042a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000008 	.word	0x20000008

08002370 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <BSP_LED_Off+0x28>)
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002386:	2200      	movs	r2, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f001 ff89 	bl	80042a0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000008 	.word	0x20000008

0800239c <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <BSP_LED_Toggle+0x28>)
 80023aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 ff8b 	bl	80042d0 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000008 	.word	0x20000008

080023c8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d2:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 80023fc:	f043 0304 	orr.w	r3, r3, #4
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <LED_USER_GPIO_Init+0x78>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	480b      	ldr	r0, [pc, #44]	; (8002444 <LED_USER_GPIO_Init+0x7c>)
 8002416:	f001 ff43 	bl	80042a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800241a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800241e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4619      	mov	r1, r3
 8002432:	4804      	ldr	r0, [pc, #16]	; (8002444 <LED_USER_GPIO_Init+0x7c>)
 8002434:	f001 fc98 	bl	8003d68 <HAL_GPIO_Init>

}
 8002438:	bf00      	nop
 800243a:	3720      	adds	r7, #32
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	48000800 	.word	0x48000800

08002448 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	460a      	mov	r2, r1
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	4613      	mov	r3, r2
 8002456:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <BSP_PB_Init+0x94>)
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d132      	bne.n	80024d2 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4a1b      	ldr	r2, [pc, #108]	; (80024e0 <BSP_PB_Init+0x98>)
 8002472:	441a      	add	r2, r3
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	491b      	ldr	r1, [pc, #108]	; (80024e4 <BSP_PB_Init+0x9c>)
 8002478:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800247c:	4619      	mov	r1, r3
 800247e:	4610      	mov	r0, r2
 8002480:	f001 fc2e 	bl	8003ce0 <HAL_EXTI_GetHandle>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800248a:	f06f 0303 	mvn.w	r3, #3
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e01f      	b.n	80024d2 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <BSP_PB_Init+0x98>)
 8002498:	1898      	adds	r0, r3, r2
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <BSP_PB_Init+0xa0>)
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	461a      	mov	r2, r3
 80024a4:	2100      	movs	r1, #0
 80024a6:	f001 fc01 	bl	8003cac <HAL_EXTI_RegisterCallback>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024b0:	f06f 0303 	mvn.w	r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	e00c      	b.n	80024d2 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80024b8:	2028      	movs	r0, #40	; 0x28
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	4a0b      	ldr	r2, [pc, #44]	; (80024ec <BSP_PB_Init+0xa4>)
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	2200      	movs	r2, #0
 80024c4:	4619      	mov	r1, r3
 80024c6:	f001 faae 	bl	8003a26 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80024ca:	2328      	movs	r3, #40	; 0x28
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fac6 	bl	8003a5e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80024d2:	68fb      	ldr	r3, [r7, #12]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	0800a744 	.word	0x0800a744
 80024e0:	20000010 	.word	0x20000010
 80024e4:	0800a748 	.word	0x0800a748
 80024e8:	0800a74c 	.word	0x0800a74c
 80024ec:	0800a750 	.word	0x0800a750

080024f0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	4a09      	ldr	r2, [pc, #36]	; (8002524 <BSP_PB_GetState+0x34>)
 80024fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f001 feb1 	bl	8004270 <HAL_GPIO_ReadPin>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c

08002528 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe f9fd 	bl	800092c <BSP_PB_Callback>
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002556:	f107 030c 	add.w	r3, r7, #12
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002572:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <BUTTON_USER_GPIO_Init+0x68>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800257e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <BUTTON_USER_GPIO_Init+0x6c>)
 8002586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	4619      	mov	r1, r3
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <BUTTON_USER_GPIO_Init+0x70>)
 8002594:	f001 fbe8 	bl	8003d68 <HAL_GPIO_Init>

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	48000800 	.word	0x48000800

080025ac <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d903      	bls.n	80025c8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025c0:	f06f 0301 	mvn.w	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e025      	b.n	8002614 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	79fa      	ldrb	r2, [r7, #7]
 80025cc:	4914      	ldr	r1, [pc, #80]	; (8002620 <BSP_COM_Init+0x74>)
 80025ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <BSP_COM_Init+0x78>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4403      	add	r3, r0
 80025de:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <BSP_COM_Init+0x78>)
 80025ec:	4413      	add	r3, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f888 	bl	8002704 <USART1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 80025f4:	79fa      	ldrb	r2, [r7, #7]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	4a09      	ldr	r2, [pc, #36]	; (8002624 <BSP_COM_Init+0x78>)
 8002600:	4413      	add	r3, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f810 	bl	8002628 <MX_USART1_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800260e:	f06f 0303 	mvn.w	r3, #3
 8002612:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002614:	68fb      	ldr	r3, [r7, #12]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000018 	.word	0x20000018
 8002624:	200007ec 	.word	0x200007ec

08002628 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART1;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <MX_USART1_UART_Init+0xa0>)
 8002638:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002640:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f004 fd7b 	bl	8007174 <HAL_UART_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_USART1_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f005 faca 	bl	8007c24 <HAL_UARTEx_SetTxFifoThreshold>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_USART1_UART_Init+0x72>
  {
    ret = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269a:	2100      	movs	r1, #0
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f005 faff 	bl	8007ca0 <HAL_UARTEx_SetRxFifoThreshold>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_USART1_UART_Init+0x84>
  {
    ret = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f005 fa80 	bl	8007bb2 <HAL_UARTEx_DisableFifoMode>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART1_UART_Init+0x94>
  {
    ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40013800 	.word	0x40013800

080026cc <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) /* For IAR and MDK-ARM */
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* __GNUC__ */
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <__io_putchar+0x30>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	461a      	mov	r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <__io_putchar+0x34>)
 80026e4:	1898      	adds	r0, r3, r2
 80026e6:	1d39      	adds	r1, r7, #4
 80026e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ec:	2201      	movs	r2, #1
 80026ee:	f004 fd91 	bl	8007214 <HAL_UART_Transmit>
  return ch;
 80026f2:	687b      	ldr	r3, [r7, #4]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200001bc 	.word	0x200001bc
 8002700:	200007ec 	.word	0x200007ec

08002704 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <USART1_MspInit+0x80>)
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <USART1_MspInit+0x80>)
 8002712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002716:	6613      	str	r3, [r2, #96]	; 0x60
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <USART1_MspInit+0x80>)
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b17      	ldr	r3, [pc, #92]	; (8002784 <USART1_MspInit+0x80>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4a16      	ldr	r2, [pc, #88]	; (8002784 <USART1_MspInit+0x80>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	4b14      	ldr	r3, [pc, #80]	; (8002784 <USART1_MspInit+0x80>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 800273c:	2340      	movs	r3, #64	; 0x40
 800273e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002748:	2303      	movs	r3, #3
 800274a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800274c:	2307      	movs	r3, #7
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	480c      	ldr	r0, [pc, #48]	; (8002788 <USART1_MspInit+0x84>)
 8002758:	f001 fb06 	bl	8003d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002760:	2302      	movs	r3, #2
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800276c:	2307      	movs	r3, #7
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	4619      	mov	r1, r3
 8002776:	4804      	ldr	r0, [pc, #16]	; (8002788 <USART1_MspInit+0x84>)
 8002778:	f001 faf6 	bl	8003d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400

0800278c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <BSP_SPI3_Init+0x54>)
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <BSP_SPI3_Init+0x58>)
 800279a:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <BSP_SPI3_Init+0x5c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	4911      	ldr	r1, [pc, #68]	; (80027e8 <BSP_SPI3_Init+0x5c>)
 80027a4:	600a      	str	r2, [r1, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d114      	bne.n	80027d4 <BSP_SPI3_Init+0x48>
  {
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80027aa:	480d      	ldr	r0, [pc, #52]	; (80027e0 <BSP_SPI3_Init+0x54>)
 80027ac:	f004 fb74 	bl	8006e98 <HAL_SPI_GetState>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10e      	bne.n	80027d4 <BSP_SPI3_Init+0x48>
	{
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
		/* Init the SPI Msp */
		SPI3_MspInit(&hspi3);
 80027b6:	480a      	ldr	r0, [pc, #40]	; (80027e0 <BSP_SPI3_Init+0x54>)
 80027b8:	f000 f882 	bl	80028c0 <SPI3_MspInit>
			{
				return BSP_ERROR_MSP_FAILURE;
			}
		}
#endif
		if(ret == BSP_ERROR_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d108      	bne.n	80027d4 <BSP_SPI3_Init+0x48>
		{
			/* Init the SPI */
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <BSP_SPI3_Init+0x54>)
 80027c4:	f000 f83a 	bl	800283c <MX_SPI3_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <BSP_SPI3_Init+0x48>
			{
				ret = BSP_ERROR_BUS_FAILURE;
 80027ce:	f06f 0307 	mvn.w	r3, #7
 80027d2:	607b      	str	r3, [r7, #4]
			}
		}
	}
  }

  return ret;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	2000087c 	.word	0x2000087c
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	200001c0 	.word	0x200001c0

080027ec <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002804:	9200      	str	r2, [sp, #0]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	68f9      	ldr	r1, [r7, #12]
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <BSP_SPI3_SendRecv+0x3c>)
 800280c:	f004 f931 	bl	8006a72 <HAL_SPI_TransmitReceive>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002816:	f06f 0305 	mvn.w	r3, #5
 800281a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800281c:	697b      	ldr	r3, [r7, #20]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	2000087c 	.word	0x2000087c

0800282c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002830:	f000 f906 	bl	8002a40 <HAL_GetTick>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]
  hspi->Instance = SPI3;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <MX_SPI3_Init+0x80>)
 800284c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002854:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002862:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002876:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2218      	movs	r2, #24
 800287c:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2207      	movs	r2, #7
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2208      	movs	r2, #8
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f004 f842 	bl	800692c <HAL_SPI_Init>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40003c00 	.word	0x40003c00

080028c0 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028c8:	4b27      	ldr	r3, [pc, #156]	; (8002968 <SPI3_MspInit+0xa8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <SPI3_MspInit+0xa8>)
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b24      	ldr	r3, [pc, #144]	; (8002968 <SPI3_MspInit+0xa8>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e0:	4b21      	ldr	r3, [pc, #132]	; (8002968 <SPI3_MspInit+0xa8>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a20      	ldr	r2, [pc, #128]	; (8002968 <SPI3_MspInit+0xa8>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <SPI3_MspInit+0xa8>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 80028f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 800290a:	2306      	movs	r3, #6
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4815      	ldr	r0, [pc, #84]	; (800296c <SPI3_MspInit+0xac>)
 8002916:	f001 fa27 	bl	8003d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 800291a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800291e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 800292c:	2306      	movs	r3, #6
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480d      	ldr	r0, [pc, #52]	; (800296c <SPI3_MspInit+0xac>)
 8002938:	f001 fa16 	bl	8003d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 800293c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294a:	2303      	movs	r3, #3
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 800294e:	2306      	movs	r3, #6
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002952:	f107 0314 	add.w	r3, r7, #20
 8002956:	4619      	mov	r1, r3
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <SPI3_MspInit+0xac>)
 800295a:	f001 fa05 	bl	8003d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 800295e:	bf00      	nop
 8002960:	3728      	adds	r7, #40	; 0x28
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	48000800 	.word	0x48000800

08002970 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297a:	2003      	movs	r0, #3
 800297c:	f001 f848 	bl	8003a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f80d 	bl	80029a0 <HAL_InitTick>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	e001      	b.n	8002996 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002992:	f7ff f939 	bl	8001c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002996:	79fb      	ldrb	r3, [r7, #7]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_InitTick+0x6c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <HAL_InitTick+0x70>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_InitTick+0x6c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f001 f855 	bl	8003a7a <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d809      	bhi.n	80029f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295
 80029e4:	f001 f81f 	bl	8003a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <HAL_InitTick+0x74>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e007      	b.n	8002a00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	e004      	b.n	8002a00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e001      	b.n	8002a00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000020 	.word	0x20000020
 8002a10:	20000004 	.word	0x20000004
 8002a14:	2000001c 	.word	0x2000001c

08002a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_IncTick+0x20>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_IncTick+0x24>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <HAL_IncTick+0x24>)
 8002a2a:	6013      	str	r3, [r2, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000020 	.word	0x20000020
 8002a3c:	200008e0 	.word	0x200008e0

08002a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return uwTick;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_GetTick+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	200008e0 	.word	0x200008e0

08002a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a60:	f7ff ffee 	bl	8002a40 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a70:	d005      	beq.n	8002a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_Delay+0x44>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a7e:	bf00      	nop
 8002a80:	f7ff ffde 	bl	8002a40 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d8f7      	bhi.n	8002a80 <HAL_Delay+0x28>
  {
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000020 	.word	0x20000020

08002aa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <LL_ADC_SetOffset+0x44>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	03fff000 	.word	0x03fff000

08002b50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	615a      	str	r2, [r3, #20]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3330      	adds	r3, #48	; 0x30
 8002be8:	461a      	mov	r2, r3
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	4413      	add	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	211f      	movs	r1, #31
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	401a      	ands	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	f003 011f 	and.w	r1, r3, #31
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c24:	bf00      	nop
 8002c26:	371c      	adds	r7, #28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3314      	adds	r3, #20
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	0e5b      	lsrs	r3, r3, #25
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	0d1b      	lsrs	r3, r3, #20
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2107      	movs	r1, #7
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	401a      	ands	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	f003 031f 	and.w	r3, r3, #31
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	431a      	orrs	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0318 	and.w	r3, r3, #24
 8002caa:	4908      	ldr	r1, [pc, #32]	; (8002ccc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002cac:	40d9      	lsrs	r1, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	0007ffff 	.word	0x0007ffff

08002cd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6093      	str	r3, [r2, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d08:	d101      	bne.n	8002d0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d58:	d101      	bne.n	8002d5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <LL_ADC_IsEnabled+0x18>
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <LL_ADC_IsEnabled+0x1a>
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d101      	bne.n	8002daa <LL_ADC_REG_IsConversionOngoing+0x18>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d101      	bne.n	8002dd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e12f      	b.n	800305a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7fe ff21 	bl	8001c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff ff67 	bl	8002cf4 <LL_ADC_IsDeepPowerDownEnabled>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff4d 	bl	8002cd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff82 	bl	8002d44 <LL_ADC_IsInternalRegulatorEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d115      	bne.n	8002e72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff66 	bl	8002d1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e50:	4b84      	ldr	r3, [pc, #528]	; (8003064 <HAL_ADC_Init+0x284>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	4a84      	ldr	r2, [pc, #528]	; (8003068 <HAL_ADC_Init+0x288>)
 8002e58:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5c:	099b      	lsrs	r3, r3, #6
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e64:	e002      	b.n	8002e6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f9      	bne.n	8002e66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff64 	bl	8002d44 <LL_ADC_IsInternalRegulatorEnabled>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10d      	bne.n	8002e9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e86:	f043 0210 	orr.w	r2, r3, #16
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff75 	bl	8002d92 <LL_ADC_REG_IsConversionOngoing>
 8002ea8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 80c8 	bne.w	8003048 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 80c4 	bne.w	8003048 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ec8:	f043 0202 	orr.w	r2, r3, #2
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff49 	bl	8002d6c <LL_ADC_IsEnabled>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee0:	4862      	ldr	r0, [pc, #392]	; (800306c <HAL_ADC_Init+0x28c>)
 8002ee2:	f7ff ff43 	bl	8002d6c <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	485f      	ldr	r0, [pc, #380]	; (8003070 <HAL_ADC_Init+0x290>)
 8002ef4:	f7ff fdd4 	bl	8002aa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e5b      	ldrb	r3, [r3, #25]
 8002efc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f16:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	045b      	lsls	r3, r3, #17
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d009      	beq.n	8002f50 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_ADC_Init+0x294>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff12 	bl	8002d92 <LL_ADC_REG_IsConversionOngoing>
 8002f6e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff1f 	bl	8002db8 <LL_ADC_INJ_IsConversionOngoing>
 8002f7a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d140      	bne.n	8003004 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d13d      	bne.n	8003004 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f92:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f9a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002faa:	f023 0306 	bic.w	r3, r3, #6
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d118      	bne.n	8002ff4 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002fde:	4311      	orrs	r1, r2
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	611a      	str	r2, [r3, #16]
 8002ff2:	e007      	b.n	8003004 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d10c      	bne.n	8003026 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f023 010f 	bic.w	r1, r3, #15
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	1e5a      	subs	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
 8003024:	e007      	b.n	8003036 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 020f 	bic.w	r2, r2, #15
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	659a      	str	r2, [r3, #88]	; 0x58
 8003046:	e007      	b.n	8003058 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f043 0210 	orr.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003058:	7ffb      	ldrb	r3, [r7, #31]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3720      	adds	r7, #32
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000004 	.word	0x20000004
 8003068:	053e2d63 	.word	0x053e2d63
 800306c:	50040000 	.word	0x50040000
 8003070:	50040300 	.word	0x50040300
 8003074:	fff0c007 	.word	0xfff0c007

08003078 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b0b6      	sub	sp, #216	; 0xd8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_ADC_ConfigChannel+0x22>
 8003096:	2302      	movs	r3, #2
 8003098:	e3d5      	b.n	8003846 <HAL_ADC_ConfigChannel+0x7ce>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fe73 	bl	8002d92 <LL_ADC_REG_IsConversionOngoing>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f040 83ba 	bne.w	8003828 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d824      	bhi.n	8003106 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	3b02      	subs	r3, #2
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d81b      	bhi.n	80030fe <HAL_ADC_ConfigChannel+0x86>
 80030c6:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <HAL_ADC_ConfigChannel+0x54>)
 80030c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030cc:	080030dd 	.word	0x080030dd
 80030d0:	080030e5 	.word	0x080030e5
 80030d4:	080030ed 	.word	0x080030ed
 80030d8:	080030f5 	.word	0x080030f5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	220c      	movs	r2, #12
 80030e0:	605a      	str	r2, [r3, #4]
          break;
 80030e2:	e011      	b.n	8003108 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2212      	movs	r2, #18
 80030e8:	605a      	str	r2, [r3, #4]
          break;
 80030ea:	e00d      	b.n	8003108 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2218      	movs	r2, #24
 80030f0:	605a      	str	r2, [r3, #4]
          break;
 80030f2:	e009      	b.n	8003108 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fa:	605a      	str	r2, [r3, #4]
          break;
 80030fc:	e004      	b.n	8003108 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2206      	movs	r2, #6
 8003102:	605a      	str	r2, [r3, #4]
          break;
 8003104:	e000      	b.n	8003108 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003106:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6818      	ldr	r0, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	f7ff fd5f 	bl	8002bd8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fe37 	bl	8002d92 <LL_ADC_REG_IsConversionOngoing>
 8003124:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fe43 	bl	8002db8 <LL_ADC_INJ_IsConversionOngoing>
 8003132:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003136:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 81c1 	bne.w	80034c2 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003140:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 81bc 	bne.w	80034c2 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003152:	d10f      	bne.n	8003174 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2200      	movs	r2, #0
 800315e:	4619      	mov	r1, r3
 8003160:	f7ff fd66 	bl	8002c30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fd20 	bl	8002bb2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003172:	e00e      	b.n	8003192 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	461a      	mov	r2, r3
 8003182:	f7ff fd55 	bl	8002c30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fd10 	bl	8002bb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	08db      	lsrs	r3, r3, #3
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00a      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6919      	ldr	r1, [r3, #16]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031c4:	f7ff fca0 	bl	8002b08 <LL_ADC_SetOffset>
 80031c8:	e17b      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fcbd 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x17e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fcb2 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80031ec:	4603      	mov	r3, r0
 80031ee:	0e9b      	lsrs	r3, r3, #26
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	e01e      	b.n	8003234 <HAL_ADC_ConfigChannel+0x1bc>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fca7 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003202:	4603      	mov	r3, r0
 8003204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800321c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003224:	2320      	movs	r3, #32
 8003226:	e004      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d105      	bne.n	800324c <HAL_ADC_ConfigChannel+0x1d4>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	e018      	b.n	800327e <HAL_ADC_ConfigChannel+0x206>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003268:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e004      	b.n	800327e <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8003274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800327e:	429a      	cmp	r2, r3
 8003280:	d106      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fc76 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2101      	movs	r1, #1
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fc5a 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x244>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2101      	movs	r1, #1
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fc4f 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	e01e      	b.n	80032fa <HAL_ADC_ConfigChannel+0x282>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fc44 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80032da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80032e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80032ea:	2320      	movs	r3, #32
 80032ec:	e004      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80032ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x29a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	e018      	b.n	8003344 <HAL_ADC_ConfigChannel+0x2cc>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003326:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800332a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800332e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e004      	b.n	8003344 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800333a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fc13 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff fbf7 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x30a>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fbec 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	e01e      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x348>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2102      	movs	r1, #2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fbe1 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80033a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80033a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e004      	b.n	80033be <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80033b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x360>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	e016      	b.n	8003406 <HAL_ADC_ConfigChannel+0x38e>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80033ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80033ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e004      	b.n	8003406 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80033fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003406:	429a      	cmp	r2, r3
 8003408:	d106      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	2102      	movs	r1, #2
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fbb2 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2103      	movs	r1, #3
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fb96 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x3cc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2103      	movs	r1, #3
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fb8b 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	f003 021f 	and.w	r2, r3, #31
 8003442:	e017      	b.n	8003474 <HAL_ADC_ConfigChannel+0x3fc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2103      	movs	r1, #3
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fb80 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003450:	4603      	mov	r3, r0
 8003452:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800345c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800345e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e003      	b.n	8003472 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800346a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_ADC_ConfigChannel+0x414>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	0e9b      	lsrs	r3, r3, #26
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	e011      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x438>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800349a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800349c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d106      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2200      	movs	r2, #0
 80034ba:	2103      	movs	r1, #3
 80034bc:	4618      	mov	r0, r3
 80034be:	f7ff fb5d 	bl	8002b7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fc50 	bl	8002d6c <LL_ADC_IsEnabled>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 8140 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6818      	ldr	r0, [r3, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f7ff fbd1 	bl	8002c88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4a8f      	ldr	r2, [pc, #572]	; (8003728 <HAL_ADC_ConfigChannel+0x6b0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	f040 8131 	bne.w	8003754 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x4a2>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	3301      	adds	r3, #1
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2b09      	cmp	r3, #9
 8003510:	bf94      	ite	ls
 8003512:	2301      	movls	r3, #1
 8003514:	2300      	movhi	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e019      	b.n	800354e <HAL_ADC_ConfigChannel+0x4d6>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800352a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800352c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003532:	2320      	movs	r3, #32
 8003534:	e003      	b.n	800353e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	2b09      	cmp	r3, #9
 8003546:	bf94      	ite	ls
 8003548:	2301      	movls	r3, #1
 800354a:	2300      	movhi	r3, #0
 800354c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354e:	2b00      	cmp	r3, #0
 8003550:	d079      	beq.n	8003646 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_ADC_ConfigChannel+0x4f6>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	3301      	adds	r3, #1
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800356c:	e015      	b.n	800359a <HAL_ADC_ConfigChannel+0x522>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003576:	fa93 f3a3 	rbit	r3, r3
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8003586:	2320      	movs	r3, #32
 8003588:	e003      	b.n	8003592 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800358a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3301      	adds	r3, #1
 8003594:	069b      	lsls	r3, r3, #26
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_ADC_ConfigChannel+0x542>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	3301      	adds	r3, #1
 80035ae:	f003 031f 	and.w	r3, r3, #31
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f303 	lsl.w	r3, r1, r3
 80035b8:	e017      	b.n	80035ea <HAL_ADC_ConfigChannel+0x572>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80035cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e003      	b.n	80035de <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80035d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035d8:	fab3 f383 	clz	r3, r3
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3301      	adds	r3, #1
 80035e0:	f003 031f 	and.w	r3, r3, #31
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	ea42 0103 	orr.w	r1, r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x598>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	3301      	adds	r3, #1
 8003602:	f003 021f 	and.w	r2, r3, #31
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	051b      	lsls	r3, r3, #20
 800360e:	e018      	b.n	8003642 <HAL_ADC_ConfigChannel+0x5ca>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 021f 	and.w	r2, r3, #31
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003642:	430b      	orrs	r3, r1
 8003644:	e081      	b.n	800374a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x5ea>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	3301      	adds	r3, #1
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003660:	e015      	b.n	800368e <HAL_ADC_ConfigChannel+0x616>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800367a:	2320      	movs	r3, #32
 800367c:	e003      	b.n	8003686 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3301      	adds	r3, #1
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x636>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	0e9b      	lsrs	r3, r3, #26
 80036a0:	3301      	adds	r3, #1
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	e017      	b.n	80036de <HAL_ADC_ConfigChannel+0x666>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	61fb      	str	r3, [r7, #28]
  return result;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80036c6:	2320      	movs	r3, #32
 80036c8:	e003      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	ea42 0103 	orr.w	r1, r2, r3
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10d      	bne.n	800370a <HAL_ADC_ConfigChannel+0x692>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	3301      	adds	r3, #1
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	4613      	mov	r3, r2
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	4413      	add	r3, r2
 8003700:	3b1e      	subs	r3, #30
 8003702:	051b      	lsls	r3, r3, #20
 8003704:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003708:	e01e      	b.n	8003748 <HAL_ADC_ConfigChannel+0x6d0>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	613b      	str	r3, [r7, #16]
  return result;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003722:	2320      	movs	r3, #32
 8003724:	e006      	b.n	8003734 <HAL_ADC_ConfigChannel+0x6bc>
 8003726:	bf00      	nop
 8003728:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	f003 021f 	and.w	r2, r3, #31
 800373a:	4613      	mov	r3, r2
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	4413      	add	r3, r2
 8003740:	3b1e      	subs	r3, #30
 8003742:	051b      	lsls	r3, r3, #20
 8003744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003748:	430b      	orrs	r3, r1
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	6892      	ldr	r2, [r2, #8]
 800374e:	4619      	mov	r1, r3
 8003750:	f7ff fa6e 	bl	8002c30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_ADC_ConfigChannel+0x7d8>)
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d06c      	beq.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003760:	483c      	ldr	r0, [pc, #240]	; (8003854 <HAL_ADC_ConfigChannel+0x7dc>)
 8003762:	f7ff f9c3 	bl	8002aec <LL_ADC_GetCommonPathInternalCh>
 8003766:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a3a      	ldr	r2, [pc, #232]	; (8003858 <HAL_ADC_ConfigChannel+0x7e0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d127      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003774:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d121      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a35      	ldr	r2, [pc, #212]	; (800385c <HAL_ADC_ConfigChannel+0x7e4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d157      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800378e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003792:	4619      	mov	r1, r3
 8003794:	482f      	ldr	r0, [pc, #188]	; (8003854 <HAL_ADC_ConfigChannel+0x7dc>)
 8003796:	f7ff f996 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_ADC_ConfigChannel+0x7e8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <HAL_ADC_ConfigChannel+0x7ec>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	4613      	mov	r3, r2
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037b4:	e002      	b.n	80037bc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f9      	bne.n	80037b6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c2:	e03a      	b.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a27      	ldr	r2, [pc, #156]	; (8003868 <HAL_ADC_ConfigChannel+0x7f0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d113      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x77e>
 80037ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10d      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_ADC_ConfigChannel+0x7e4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d12a      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ec:	4619      	mov	r1, r3
 80037ee:	4819      	ldr	r0, [pc, #100]	; (8003854 <HAL_ADC_ConfigChannel+0x7dc>)
 80037f0:	f7ff f969 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f4:	e021      	b.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1c      	ldr	r2, [pc, #112]	; (800386c <HAL_ADC_ConfigChannel+0x7f4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d11c      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003800:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d116      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a12      	ldr	r2, [pc, #72]	; (800385c <HAL_ADC_ConfigChannel+0x7e4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800381a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800381e:	4619      	mov	r1, r3
 8003820:	480c      	ldr	r0, [pc, #48]	; (8003854 <HAL_ADC_ConfigChannel+0x7dc>)
 8003822:	f7ff f950 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
 8003826:	e008      	b.n	800383a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003842:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003846:	4618      	mov	r0, r3
 8003848:	37d8      	adds	r7, #216	; 0xd8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	80080000 	.word	0x80080000
 8003854:	50040300 	.word	0x50040300
 8003858:	c7520000 	.word	0xc7520000
 800385c:	50040000 	.word	0x50040000
 8003860:	20000004 	.word	0x20000004
 8003864:	053e2d63 	.word	0x053e2d63
 8003868:	cb840000 	.word	0xcb840000
 800386c:	80000001 	.word	0x80000001

08003870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800388c:	4013      	ands	r3, r2
 800388e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038a2:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <__NVIC_SetPriorityGrouping+0x44>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	60d3      	str	r3, [r2, #12]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038bc:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <__NVIC_GetPriorityGrouping+0x18>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	f003 0307 	and.w	r3, r3, #7
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0b      	blt.n	80038fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	; (800390c <__NVIC_EnableIRQ+0x38>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	6039      	str	r1, [r7, #0]
 800391a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	2b00      	cmp	r3, #0
 8003922:	db0a      	blt.n	800393a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2da      	uxtb	r2, r3
 8003928:	490c      	ldr	r1, [pc, #48]	; (800395c <__NVIC_SetPriority+0x4c>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	0112      	lsls	r2, r2, #4
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	440b      	add	r3, r1
 8003934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003938:	e00a      	b.n	8003950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	b2da      	uxtb	r2, r3
 800393e:	4908      	ldr	r1, [pc, #32]	; (8003960 <__NVIC_SetPriority+0x50>)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	3b04      	subs	r3, #4
 8003948:	0112      	lsls	r2, r2, #4
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	440b      	add	r3, r1
 800394e:	761a      	strb	r2, [r3, #24]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000e100 	.word	0xe000e100
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f1c3 0307 	rsb	r3, r3, #7
 800397e:	2b04      	cmp	r3, #4
 8003980:	bf28      	it	cs
 8003982:	2304      	movcs	r3, #4
 8003984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3304      	adds	r3, #4
 800398a:	2b06      	cmp	r3, #6
 800398c:	d902      	bls.n	8003994 <NVIC_EncodePriority+0x30>
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3b03      	subs	r3, #3
 8003992:	e000      	b.n	8003996 <NVIC_EncodePriority+0x32>
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43da      	mvns	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	401a      	ands	r2, r3
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ac:	f04f 31ff 	mov.w	r1, #4294967295
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43d9      	mvns	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	4313      	orrs	r3, r2
         );
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	; 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039dc:	d301      	bcc.n	80039e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039de:	2301      	movs	r3, #1
 80039e0:	e00f      	b.n	8003a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <SysTick_Config+0x40>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ea:	210f      	movs	r1, #15
 80039ec:	f04f 30ff 	mov.w	r0, #4294967295
 80039f0:	f7ff ff8e 	bl	8003910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <SysTick_Config+0x40>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039fa:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <SysTick_Config+0x40>)
 80039fc:	2207      	movs	r2, #7
 80039fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000e010 	.word	0xe000e010

08003a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ff29 	bl	8003870 <__NVIC_SetPriorityGrouping>
}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b086      	sub	sp, #24
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a38:	f7ff ff3e 	bl	80038b8 <__NVIC_GetPriorityGrouping>
 8003a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ff8e 	bl	8003964 <NVIC_EncodePriority>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff5d 	bl	8003910 <__NVIC_SetPriority>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ff31 	bl	80038d4 <__NVIC_EnableIRQ>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ffa2 	bl	80039cc <SysTick_Config>
 8003a88:	4603      	mov	r3, r0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0ac      	b.n	8003c00 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f8b2 	bl	8003c14 <DFSDM_GetChannelFromInstance>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	4a55      	ldr	r2, [pc, #340]	; (8003c08 <HAL_DFSDM_ChannelInit+0x174>)
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e09f      	b.n	8003c00 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7fe f905 	bl	8001cd0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_DFSDM_ChannelInit+0x178>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3301      	adds	r3, #1
 8003acc:	4a4f      	ldr	r2, [pc, #316]	; (8003c0c <HAL_DFSDM_ChannelInit+0x178>)
 8003ace:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003ad0:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <HAL_DFSDM_ChannelInit+0x178>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d125      	bne.n	8003b24 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ade:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ae2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ae4:	4b4a      	ldr	r3, [pc, #296]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4948      	ldr	r1, [pc, #288]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a46      	ldr	r2, [pc, #280]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003af8:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003afc:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	791b      	ldrb	r3, [r3, #4]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d108      	bne.n	8003b18 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	493f      	ldr	r1, [pc, #252]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003b18:	4b3d      	ldr	r3, [pc, #244]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <HAL_DFSDM_ChannelInit+0x17c>)
 8003b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b32:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b42:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003b48:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 020f 	bic.w	r2, r2, #15
 8003b60:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6819      	ldr	r1, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b88:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6899      	ldr	r1, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f002 0207 	and.w	r2, r2, #7
 8003bb4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 f810 	bl	8003c14 <DFSDM_GetChannelFromInstance>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	4904      	ldr	r1, [pc, #16]	; (8003c08 <HAL_DFSDM_ChannelInit+0x174>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200001c8 	.word	0x200001c8
 8003c0c:	200001c4 	.word	0x200001c4
 8003c10:	40016000 	.word	0x40016000

08003c14 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <DFSDM_GetChannelFromInstance+0x7c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d102      	bne.n	8003c2a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e02b      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <DFSDM_GetChannelFromInstance+0x80>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d102      	bne.n	8003c38 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	e024      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <DFSDM_GetChannelFromInstance+0x84>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003c40:	2302      	movs	r3, #2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e01d      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a14      	ldr	r2, [pc, #80]	; (8003c9c <DFSDM_GetChannelFromInstance+0x88>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d102      	bne.n	8003c54 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003c4e:	2304      	movs	r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	e016      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <DFSDM_GetChannelFromInstance+0x8c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d102      	bne.n	8003c62 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e00f      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a0f      	ldr	r2, [pc, #60]	; (8003ca4 <DFSDM_GetChannelFromInstance+0x90>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d102      	bne.n	8003c70 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003c6a:	2306      	movs	r3, #6
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e008      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <DFSDM_GetChannelFromInstance+0x94>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d102      	bne.n	8003c7e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e001      	b.n	8003c82 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003c82:	68fb      	ldr	r3, [r7, #12]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40016000 	.word	0x40016000
 8003c94:	40016020 	.word	0x40016020
 8003c98:	40016040 	.word	0x40016040
 8003c9c:	40016080 	.word	0x40016080
 8003ca0:	400160a0 	.word	0x400160a0
 8003ca4:	400160c0 	.word	0x400160c0
 8003ca8:	400160e0 	.word	0x400160e0

08003cac <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003cbe:	7afb      	ldrb	r3, [r7, #11]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	605a      	str	r2, [r3, #4]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd0:	bf00      	nop
  }

  return status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e003      	b.n	8003cfc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2201      	movs	r2, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_EXTI_IRQHandler+0x5c>)
 8003d32:	4413      	add	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4798      	blx	r3
    }
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40010414 	.word	0x40010414

08003d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d76:	e166      	b.n	8004046 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8158 	beq.w	8004040 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d00b      	beq.n	8003db0 <HAL_GPIO_Init+0x48>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d007      	beq.n	8003db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003da4:	2b11      	cmp	r3, #17
 8003da6:	d003      	beq.n	8003db0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b12      	cmp	r3, #18
 8003dae:	d130      	bne.n	8003e12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003de6:	2201      	movs	r2, #1
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa02 f303 	lsl.w	r3, r2, r3
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0201 	and.w	r2, r3, #1
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_GPIO_Init+0xea>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b12      	cmp	r3, #18
 8003e50:	d123      	bne.n	8003e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	08da      	lsrs	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3208      	adds	r2, #8
 8003e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	08da      	lsrs	r2, r3, #3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3208      	adds	r2, #8
 8003e94:	6939      	ldr	r1, [r7, #16]
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f003 0203 	and.w	r2, r3, #3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 80b2 	beq.w	8004040 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003edc:	4b61      	ldr	r3, [pc, #388]	; (8004064 <HAL_GPIO_Init+0x2fc>)
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	4a60      	ldr	r2, [pc, #384]	; (8004064 <HAL_GPIO_Init+0x2fc>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	6613      	str	r3, [r2, #96]	; 0x60
 8003ee8:	4b5e      	ldr	r3, [pc, #376]	; (8004064 <HAL_GPIO_Init+0x2fc>)
 8003eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eec:	f003 0301 	and.w	r3, r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ef4:	4a5c      	ldr	r2, [pc, #368]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4013      	ands	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f1e:	d02b      	beq.n	8003f78 <HAL_GPIO_Init+0x210>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a52      	ldr	r2, [pc, #328]	; (800406c <HAL_GPIO_Init+0x304>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d025      	beq.n	8003f74 <HAL_GPIO_Init+0x20c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a51      	ldr	r2, [pc, #324]	; (8004070 <HAL_GPIO_Init+0x308>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d01f      	beq.n	8003f70 <HAL_GPIO_Init+0x208>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a50      	ldr	r2, [pc, #320]	; (8004074 <HAL_GPIO_Init+0x30c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d019      	beq.n	8003f6c <HAL_GPIO_Init+0x204>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4f      	ldr	r2, [pc, #316]	; (8004078 <HAL_GPIO_Init+0x310>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x200>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a4e      	ldr	r2, [pc, #312]	; (800407c <HAL_GPIO_Init+0x314>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1fc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a4d      	ldr	r2, [pc, #308]	; (8004080 <HAL_GPIO_Init+0x318>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1f8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a4c      	ldr	r2, [pc, #304]	; (8004084 <HAL_GPIO_Init+0x31c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1f4>
 8003f58:	2307      	movs	r3, #7
 8003f5a:	e00e      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f5c:	2308      	movs	r3, #8
 8003f5e:	e00c      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f60:	2306      	movs	r3, #6
 8003f62:	e00a      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f64:	2305      	movs	r3, #5
 8003f66:	e008      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	e006      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e004      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e002      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_GPIO_Init+0x212>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	f002 0203 	and.w	r2, r2, #3
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	4093      	lsls	r3, r2
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f8a:	4937      	ldr	r1, [pc, #220]	; (8004068 <HAL_GPIO_Init+0x300>)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	089b      	lsrs	r3, r3, #2
 8003f90:	3302      	adds	r3, #2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f98:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fbc:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003fc2:	4b31      	ldr	r3, [pc, #196]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fe6:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <HAL_GPIO_Init+0x320>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_GPIO_Init+0x320>)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <HAL_GPIO_Init+0x320>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	43db      	mvns	r3, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800403a:	4a13      	ldr	r2, [pc, #76]	; (8004088 <HAL_GPIO_Init+0x320>)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3301      	adds	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f ae91 	bne.w	8003d78 <HAL_GPIO_Init+0x10>
  }
}
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	40021000 	.word	0x40021000
 8004068:	40010000 	.word	0x40010000
 800406c:	48000400 	.word	0x48000400
 8004070:	48000800 	.word	0x48000800
 8004074:	48000c00 	.word	0x48000c00
 8004078:	48001000 	.word	0x48001000
 800407c:	48001400 	.word	0x48001400
 8004080:	48001800 	.word	0x48001800
 8004084:	48001c00 	.word	0x48001c00
 8004088:	40010400 	.word	0x40010400

0800408c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800409a:	e0c9      	b.n	8004230 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800409c:	2201      	movs	r2, #1
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80bc 	beq.w	800422a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80040b2:	4a66      	ldr	r2, [pc, #408]	; (800424c <HAL_GPIO_DeInit+0x1c0>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040da:	d02b      	beq.n	8004134 <HAL_GPIO_DeInit+0xa8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a5c      	ldr	r2, [pc, #368]	; (8004250 <HAL_GPIO_DeInit+0x1c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d025      	beq.n	8004130 <HAL_GPIO_DeInit+0xa4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a5b      	ldr	r2, [pc, #364]	; (8004254 <HAL_GPIO_DeInit+0x1c8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d01f      	beq.n	800412c <HAL_GPIO_DeInit+0xa0>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_GPIO_DeInit+0x1cc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d019      	beq.n	8004128 <HAL_GPIO_DeInit+0x9c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_GPIO_DeInit+0x1d0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_GPIO_DeInit+0x98>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_GPIO_DeInit+0x1d4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00d      	beq.n	8004120 <HAL_GPIO_DeInit+0x94>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a57      	ldr	r2, [pc, #348]	; (8004264 <HAL_GPIO_DeInit+0x1d8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <HAL_GPIO_DeInit+0x90>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a56      	ldr	r2, [pc, #344]	; (8004268 <HAL_GPIO_DeInit+0x1dc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_GPIO_DeInit+0x8c>
 8004114:	2307      	movs	r3, #7
 8004116:	e00e      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004118:	2308      	movs	r3, #8
 800411a:	e00c      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 800411c:	2306      	movs	r3, #6
 800411e:	e00a      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004120:	2305      	movs	r3, #5
 8004122:	e008      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004124:	2304      	movs	r3, #4
 8004126:	e006      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004128:	2303      	movs	r3, #3
 800412a:	e004      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 800412c:	2302      	movs	r3, #2
 800412e:	e002      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <HAL_GPIO_DeInit+0xaa>
 8004134:	2300      	movs	r3, #0
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	f002 0203 	and.w	r2, r2, #3
 800413c:	0092      	lsls	r2, r2, #2
 800413e:	4093      	lsls	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	429a      	cmp	r2, r3
 8004144:	d132      	bne.n	80041ac <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004146:	4b49      	ldr	r3, [pc, #292]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	4947      	ldr	r1, [pc, #284]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004150:	4013      	ands	r3, r2
 8004152:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004154:	4b45      	ldr	r3, [pc, #276]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	43db      	mvns	r3, r3
 800415c:	4943      	ldr	r1, [pc, #268]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 800415e:	4013      	ands	r3, r2
 8004160:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004162:	4b42      	ldr	r3, [pc, #264]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	43db      	mvns	r3, r3
 800416a:	4940      	ldr	r1, [pc, #256]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 800416c:	4013      	ands	r3, r2
 800416e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8004170:	4b3e      	ldr	r3, [pc, #248]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	43db      	mvns	r3, r3
 8004178:	493c      	ldr	r1, [pc, #240]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 800417a:	4013      	ands	r3, r2
 800417c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	220f      	movs	r2, #15
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800418e:	4a2f      	ldr	r2, [pc, #188]	; (800424c <HAL_GPIO_DeInit+0x1c0>)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	3302      	adds	r3, #2
 8004196:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	43da      	mvns	r2, r3
 800419e:	482b      	ldr	r0, [pc, #172]	; (800424c <HAL_GPIO_DeInit+0x1c0>)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	089b      	lsrs	r3, r3, #2
 80041a4:	400a      	ands	r2, r1
 80041a6:	3302      	adds	r3, #2
 80041a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	2103      	movs	r1, #3
 80041b6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	08da      	lsrs	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3208      	adds	r2, #8
 80041c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0307 	and.w	r3, r3, #7
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	220f      	movs	r2, #15
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43db      	mvns	r3, r3
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	08d2      	lsrs	r2, r2, #3
 80041e0:	4019      	ands	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3208      	adds	r2, #8
 80041e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	2103      	movs	r1, #3
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	43db      	mvns	r3, r3
 80041fa:	401a      	ands	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	2101      	movs	r1, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	fa01 f303 	lsl.w	r3, r1, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2103      	movs	r1, #3
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	3301      	adds	r3, #1
 800422e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa22 f303 	lsr.w	r3, r2, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f af2f 	bne.w	800409c <HAL_GPIO_DeInit+0x10>
  }
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40010000 	.word	0x40010000
 8004250:	48000400 	.word	0x48000400
 8004254:	48000800 	.word	0x48000800
 8004258:	48000c00 	.word	0x48000c00
 800425c:	48001000 	.word	0x48001000
 8004260:	48001400 	.word	0x48001400
 8004264:	48001800 	.word	0x48001800
 8004268:	48001c00 	.word	0x48001c00
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	887b      	ldrh	r3, [r7, #2]
 8004282:	4013      	ands	r3, r2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
 800428c:	e001      	b.n	8004292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	807b      	strh	r3, [r7, #2]
 80042ac:	4613      	mov	r3, r2
 80042ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042b0:	787b      	ldrb	r3, [r7, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042bc:	e002      	b.n	80042c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042be:	887a      	ldrh	r2, [r7, #2]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042e2:	887a      	ldrh	r2, [r7, #2]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	43d9      	mvns	r1, r3
 80042ee:	887b      	ldrh	r3, [r7, #2]
 80042f0:	400b      	ands	r3, r1
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	619a      	str	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d006      	beq.n	8004328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431a:	4a05      	ldr	r2, [pc, #20]	; (8004330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800431c:	88fb      	ldrh	r3, [r7, #6]
 800431e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f806 	bl	8004334 <HAL_GPIO_EXTI_Callback>
  }
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40010400 	.word	0x40010400

08004334 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e081      	b.n	8004460 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7fd fcf5 	bl	8001d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0201 	bic.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800439a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043aa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	e006      	b.n	80043d2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043d0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d104      	bne.n	80043e4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6812      	ldr	r2, [r2, #0]
 80043ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004406:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	ea42 0103 	orr.w	r1, r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	021a      	lsls	r2, r3, #8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69d9      	ldr	r1, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b20      	cmp	r3, #32
 800447c:	d138      	bne.n	80044f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004488:	2302      	movs	r3, #2
 800448a:	e032      	b.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2224      	movs	r2, #36	; 0x24
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	d139      	bne.n	8004588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800451e:	2302      	movs	r3, #2
 8004520:	e033      	b.n	800458a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2224      	movs	r2, #36	; 0x24
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	e000      	b.n	800458a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004588:	2302      	movs	r3, #2
  }
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80045a4:	f7fe fa4c 	bl	8002a40 <HAL_GetTick>
 80045a8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
 80045b4:	e092      	b.n	80046dc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 808b 	bne.w	80046dc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fd fc40 	bl	8001e4c <HAL_OSPI_MspInit>
#endif

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80045cc:	f241 3188 	movw	r1, #5000	; 0x1388
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f88b 	bl	80046ec <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_OSPI_Init+0x150>)
 80045de:	4013      	ands	r3, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68d1      	ldr	r1, [r2, #12]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6912      	ldr	r2, [r2, #16]
 80045e8:	3a01      	subs	r2, #1
 80045ea:	0412      	lsls	r2, r2, #16
 80045ec:	4311      	orrs	r1, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6952      	ldr	r2, [r2, #20]
 80045f2:	3a01      	subs	r2, #1
 80045f4:	0212      	lsls	r2, r2, #8
 80045f6:	4311      	orrs	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	69d2      	ldr	r2, [r2, #28]
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	6093      	str	r3, [r2, #8]
#if   defined (OCTOSPI_DCR3_MAXTRAN)
      /* Configure chip select boundary and maximun transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) | (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	0412      	lsls	r2, r2, #16
 8004616:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	3b01      	subs	r3, #1
 8004628:	021a      	lsls	r2, r3, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	2120      	movs	r1, #32
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fbb8 	bl	8004db4 <OSPI_WaitFlagStateUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d146      	bne.n	80046dc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	1e5a      	subs	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	60da      	str	r2, [r3, #12]

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC), (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004684:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0201 	orr.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d107      	bne.n	80046c4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0202 	orr.w	r2, r2, #2
 80046c2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046cc:	d103      	bne.n	80046d6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	645a      	str	r2, [r3, #68]	; 0x44
 80046d4:	e002      	b.n	80046dc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	f8e0f8f4 	.word	0xf8e0f8f4

080046ec <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b092      	sub	sp, #72	; 0x48
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index, ospi_enabled = 0U, other_instance;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_OSPIM_Config+0x40>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d105      	bne.n	800473a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004738:	e004      	b.n	8004744 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800473a:	2301      	movs	r3, #1
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004744:	2300      	movs	r3, #0
 8004746:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800474a:	e01f      	b.n	800478c <HAL_OSPIM_Config+0x80>
 800474c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8004750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004754:	3301      	adds	r3, #1
 8004756:	b2d8      	uxtb	r0, r3
 8004758:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800475c:	f107 0114 	add.w	r1, r7, #20
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	4619      	mov	r1, r3
 800476c:	f000 fb5a 	bl	8004e24 <OSPIM_GetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2208      	movs	r2, #8
 8004780:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004786:	3301      	adds	r3, #1
 8004788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800478c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004790:	2b01      	cmp	r3, #1
 8004792:	d9dd      	bls.n	8004750 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8004794:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004798:	2b00      	cmp	r3, #0
 800479a:	f040 82fe 	bne.w	8004d9a <HAL_OSPIM_Config+0x68e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800479e:	4bcd      	ldr	r3, [pc, #820]	; (8004ad4 <HAL_OSPIM_Config+0x3c8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00b      	beq.n	80047c2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80047aa:	4bca      	ldr	r3, [pc, #808]	; (8004ad4 <HAL_OSPIM_Config+0x3c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4ac9      	ldr	r2, [pc, #804]	; (8004ad4 <HAL_OSPIM_Config+0x3c8>)
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80047b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80047c2:	4bc5      	ldr	r3, [pc, #788]	; (8004ad8 <HAL_OSPIM_Config+0x3cc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00b      	beq.n	80047e6 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80047ce:	4bc2      	ldr	r3, [pc, #776]	; (8004ad8 <HAL_OSPIM_Config+0x3cc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4ac1      	ldr	r2, [pc, #772]	; (8004ad8 <HAL_OSPIM_Config+0x3cc>)
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80047da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80047e6:	49bd      	ldr	r1, [pc, #756]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 80047e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ea:	4613      	mov	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047f6:	4413      	add	r3, r2
 80047f8:	3b2c      	subs	r3, #44	; 0x2c
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	6859      	ldr	r1, [r3, #4]
 8004804:	48b5      	ldr	r0, [pc, #724]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004808:	4613      	mov	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004814:	4413      	add	r3, r2
 8004816:	3b2c      	subs	r3, #44	; 0x2c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3b01      	subs	r3, #1
 800481c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4403      	add	r3, r0
 8004824:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004834:	4413      	add	r3, r2
 8004836:	3b34      	subs	r3, #52	; 0x34
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80ac 	beq.w	8004998 <HAL_OSPIM_Config+0x28c>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004840:	49a6      	ldr	r1, [pc, #664]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004844:	4613      	mov	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004850:	4413      	add	r3, r2
 8004852:	3b34      	subs	r3, #52	; 0x34
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	489f      	ldr	r0, [pc, #636]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004860:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800486e:	4413      	add	r3, r2
 8004870:	3b34      	subs	r3, #52	; 0x34
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3b01      	subs	r3, #1
 8004876:	f021 0201 	bic.w	r2, r1, #1
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4403      	add	r3, r0
 800487e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8004880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800488e:	4413      	add	r3, r2
 8004890:	3b30      	subs	r3, #48	; 0x30
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01f      	beq.n	80048d8 <HAL_OSPIM_Config+0x1cc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004898:	4990      	ldr	r1, [pc, #576]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 800489a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048a8:	4413      	add	r3, r2
 80048aa:	3b30      	subs	r3, #48	; 0x30
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	4889      	ldr	r0, [pc, #548]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 80048b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048c6:	4413      	add	r3, r2
 80048c8:	3b30      	subs	r3, #48	; 0x30
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f021 0210 	bic.w	r2, r1, #16
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4403      	add	r3, r0
 80048d6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80048d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048e6:	4413      	add	r3, r2
 80048e8:	3b28      	subs	r3, #40	; 0x28
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <HAL_OSPIM_Config+0x22c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80048f0:	497a      	ldr	r1, [pc, #488]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 80048f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004900:	4413      	add	r3, r2
 8004902:	3b28      	subs	r3, #40	; 0x28
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3b01      	subs	r3, #1
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	6859      	ldr	r1, [r3, #4]
 8004912:	4872      	ldr	r0, [pc, #456]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004914:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004922:	4413      	add	r3, r2
 8004924:	3b28      	subs	r3, #40	; 0x28
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3b01      	subs	r3, #1
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4403      	add	r3, r0
 8004936:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004946:	4413      	add	r3, r2
 8004948:	3b24      	subs	r3, #36	; 0x24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d023      	beq.n	8004998 <HAL_OSPIM_Config+0x28c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004950:	4962      	ldr	r1, [pc, #392]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004960:	4413      	add	r3, r2
 8004962:	3b24      	subs	r3, #36	; 0x24
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3b01      	subs	r3, #1
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	485a      	ldr	r0, [pc, #360]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004982:	4413      	add	r3, r2
 8004984:	3b24      	subs	r3, #36	; 0x24
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3b01      	subs	r3, #1
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4403      	add	r3, r0
 8004996:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6819      	ldr	r1, [r3, #0]
 800499c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ac:	4413      	add	r3, r2
 80049ae:	3b34      	subs	r3, #52	; 0x34
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4299      	cmp	r1, r3
 80049b4:	d03c      	beq.n	8004a30 <HAL_OSPIM_Config+0x324>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049ca:	4413      	add	r3, r2
 80049cc:	3b30      	subs	r3, #48	; 0x30
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4299      	cmp	r1, r3
 80049d2:	d02d      	beq.n	8004a30 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049e8:	4413      	add	r3, r2
 80049ea:	3b2c      	subs	r3, #44	; 0x2c
 80049ec:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80049ee:	4299      	cmp	r1, r3
 80049f0:	d01e      	beq.n	8004a30 <HAL_OSPIM_Config+0x324>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	68d9      	ldr	r1, [r3, #12]
 80049f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a06:	4413      	add	r3, r2
 8004a08:	3b28      	subs	r3, #40	; 0x28
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	d00f      	beq.n	8004a30 <HAL_OSPIM_Config+0x324>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	6919      	ldr	r1, [r3, #16]
 8004a14:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a24:	4413      	add	r3, r2
 8004a26:	3b24      	subs	r3, #36	; 0x24
 8004a28:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004a2a:	4299      	cmp	r1, r3
 8004a2c:	f040 80e0 	bne.w	8004bf0 <HAL_OSPIM_Config+0x4e4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8004a30:	492a      	ldr	r1, [pc, #168]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004a32:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a42:	4413      	add	r3, r2
 8004a44:	3b34      	subs	r3, #52	; 0x34
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	4822      	ldr	r0, [pc, #136]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004a52:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a62:	4413      	add	r3, r2
 8004a64:	3b34      	subs	r3, #52	; 0x34
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f021 0201 	bic.w	r2, r1, #1
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4403      	add	r3, r0
 8004a72:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004a74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a84:	4413      	add	r3, r2
 8004a86:	3b30      	subs	r3, #48	; 0x30
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_OSPIM_Config+0x3d4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8004a8e:	4913      	ldr	r1, [pc, #76]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004a90:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3b30      	subs	r3, #48	; 0x30
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	6859      	ldr	r1, [r3, #4]
 8004aae:	480b      	ldr	r0, [pc, #44]	; (8004adc <HAL_OSPIM_Config+0x3d0>)
 8004ab0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ac0:	4413      	add	r3, r2
 8004ac2:	3b30      	subs	r3, #48	; 0x30
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	f021 0210 	bic.w	r2, r1, #16
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4403      	add	r3, r0
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	e005      	b.n	8004ae0 <HAL_OSPIM_Config+0x3d4>
 8004ad4:	a0001000 	.word	0xa0001000
 8004ad8:	a0001400 	.word	0xa0001400
 8004adc:	50061c00 	.word	0x50061c00
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8004ae0:	49b1      	ldr	r1, [pc, #708]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004ae2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004af2:	4413      	add	r3, r2
 8004af4:	3b2c      	subs	r3, #44	; 0x2c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	440b      	add	r3, r1
 8004afe:	6859      	ldr	r1, [r3, #4]
 8004b00:	48a9      	ldr	r0, [pc, #676]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004b02:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b12:	4413      	add	r3, r2
 8004b14:	3b2c      	subs	r3, #44	; 0x2c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4403      	add	r3, r0
 8004b22:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004b24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b34:	4413      	add	r3, r2
 8004b36:	3b28      	subs	r3, #40	; 0x28
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d025      	beq.n	8004b8a <HAL_OSPIM_Config+0x47e>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004b3e:	499a      	ldr	r1, [pc, #616]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004b40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b50:	4413      	add	r3, r2
 8004b52:	3b28      	subs	r3, #40	; 0x28
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	4891      	ldr	r0, [pc, #580]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004b64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b74:	4413      	add	r3, r2
 8004b76:	3b28      	subs	r3, #40	; 0x28
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4403      	add	r3, r0
 8004b88:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004b8a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004b8e:	4613      	mov	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3b24      	subs	r3, #36	; 0x24
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d025      	beq.n	8004bf0 <HAL_OSPIM_Config+0x4e4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004ba4:	4980      	ldr	r1, [pc, #512]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004ba6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3b24      	subs	r3, #36	; 0x24
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	4877      	ldr	r0, [pc, #476]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004bca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b24      	subs	r3, #36	; 0x24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4403      	add	r3, r0
 8004bee:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort-1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC), (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));
 8004bf0:	4a6d      	ldr	r2, [pc, #436]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c04:	025b      	lsls	r3, r3, #9
 8004c06:	431a      	orrs	r2, r3
 8004c08:	4967      	ldr	r1, [pc, #412]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	440b      	add	r3, r1
 8004c18:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
 8004c1a:	4a63      	ldr	r2, [pc, #396]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 0203 	bic.w	r2, r3, #3
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	495d      	ldr	r1, [pc, #372]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d014      	beq.n	8004c76 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
 8004c4c:	4a56      	ldr	r2, [pc, #344]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c60:	015b      	lsls	r3, r3, #5
 8004c62:	431a      	orrs	r2, r3
 8004c64:	4950      	ldr	r1, [pc, #320]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f042 0210 	orr.w	r2, r2, #16
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d019      	beq.n	8004cb6 <HAL_OSPIM_Config+0x5aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004c82:	4a49      	ldr	r2, [pc, #292]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9a:	049b      	lsls	r3, r3, #18
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	4942      	ldr	r1, [pc, #264]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e01c      	b.n	8004cf0 <HAL_OSPIM_Config+0x5e4>
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d018      	beq.n	8004cf0 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd6:	069b      	lsls	r3, r3, #26
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	4933      	ldr	r1, [pc, #204]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d019      	beq.n	8004d30 <HAL_OSPIM_Config+0x624>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d14:	049b      	lsls	r3, r3, #18
 8004d16:	431a      	orrs	r2, r3
 8004d18:	4923      	ldr	r1, [pc, #140]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	605a      	str	r2, [r3, #4]
 8004d2e:	e01c      	b.n	8004d6a <HAL_OSPIM_Config+0x65e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d018      	beq.n	8004d6a <HAL_OSPIM_Config+0x65e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], (OCTOSPIM_PCR_IOHEN | OCTOSPIM_PCR_IOHSRC),
 8004d38:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	069b      	lsls	r3, r3, #26
 8004d52:	431a      	orrs	r2, r3
 8004d54:	4914      	ldr	r1, [pc, #80]	; (8004da8 <HAL_OSPIM_Config+0x69c>)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004d6a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_OSPIM_Config+0x676>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_OSPIM_Config+0x6a0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <HAL_OSPIM_Config+0x6a0>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004d82:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_OSPIM_Config+0x68e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004d8e:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_OSPIM_Config+0x6a4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a07      	ldr	r2, [pc, #28]	; (8004db0 <HAL_OSPIM_Config+0x6a4>)
 8004d94:	f043 0301 	orr.w	r3, r3, #1
 8004d98:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004d9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3748      	adds	r7, #72	; 0x48
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	50061c00 	.word	0x50061c00
 8004dac:	a0001000 	.word	0xa0001000
 8004db0:	a0001400 	.word	0xa0001400

08004db4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004dc4:	e01a      	b.n	8004dfc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d016      	beq.n	8004dfc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dce:	f7fd fe37 	bl	8002a40 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d302      	bcc.n	8004de4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	f043 0201 	orr.w	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e00e      	b.n	8004e1a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf14      	ite	ne
 8004e0a:	2301      	movne	r3, #1
 8004e0c:	2300      	moveq	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d1d6      	bne.n	8004dc6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	6039      	str	r1, [r7, #0]
 8004e2e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	75fb      	strb	r3, [r7, #23]
  uint32_t reg, value = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d005      	beq.n	8004e4a <OSPIM_GetConfig+0x26>
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d802      	bhi.n	8004e4a <OSPIM_GetConfig+0x26>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
 8004e4e:	e08e      	b.n	8004f6e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d101      	bne.n	8004e78 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
 8004e74:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <OSPIM_GetConfig+0x158>)
 8004e76:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e074      	b.n	8004f68 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004e7e:	4a40      	ldr	r2, [pc, #256]	; (8004f80 <OSPIM_GetConfig+0x15c>)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4053      	eors	r3, r2
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d103      	bne.n	8004eaa <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00a      	beq.n	8004eca <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4053      	eors	r3, r2
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4053      	eors	r3, r2
 8004eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d018      	beq.n	8004f26 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4053      	eors	r3, r2
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d111      	bne.n	8004f26 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e005      	b.n	8004f26 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d018      	beq.n	8004f62 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4053      	eors	r3, r2
 8004f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d111      	bne.n	8004f62 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	611a      	str	r2, [r3, #16]
 8004f54:	e005      	b.n	8004f62 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d987      	bls.n	8004e7e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	04040222 	.word	0x04040222
 8004f80:	50061c00 	.word	0x50061c00

08004f84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40007000 	.word	0x40007000

08004fa4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d102      	bne.n	8004fbc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fba:	e00b      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d102      	bne.n	8004fd2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd0:	e000      	b.n	8004fd4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004fd2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40007000 	.word	0x40007000

08004fe4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d141      	bne.n	8005076 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d131      	bne.n	8005064 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005006:	4a46      	ldr	r2, [pc, #280]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005010:	4b43      	ldr	r3, [pc, #268]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005018:	4a41      	ldr	r2, [pc, #260]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800501a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800501e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005020:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2232      	movs	r2, #50	; 0x32
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	0c9b      	lsrs	r3, r3, #18
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005036:	e002      	b.n	800503e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800503e:	4b38      	ldr	r3, [pc, #224]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504a:	d102      	bne.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f2      	bne.n	8005038 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005052:	4b33      	ldr	r3, [pc, #204]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800505a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505e:	d158      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e057      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005064:	4b2e      	ldr	r3, [pc, #184]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800506a:	4a2d      	ldr	r2, [pc, #180]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800506c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005074:	e04d      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507c:	d141      	bne.n	8005102 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800508a:	d131      	bne.n	80050f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800508c:	4b24      	ldr	r3, [pc, #144]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050a4:	4a1e      	ldr	r2, [pc, #120]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2232      	movs	r2, #50	; 0x32
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	0c9b      	lsrs	r3, r3, #18
 80050be:	3301      	adds	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c2:	e002      	b.n	80050ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d102      	bne.n	80050de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f2      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050de:	4b10      	ldr	r3, [pc, #64]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ea:	d112      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e011      	b.n	8005114 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005100:	e007      	b.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800510a:	4a05      	ldr	r2, [pc, #20]	; (8005120 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005110:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40007000 	.word	0x40007000
 8005124:	20000004 	.word	0x20000004
 8005128:	431bde83 	.word	0x431bde83

0800512c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f000 bc16 	b.w	800596c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005140:	4ba0      	ldr	r3, [pc, #640]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800514a:	4b9e      	ldr	r3, [pc, #632]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80e4 	beq.w	800532a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <HAL_RCC_OscConfig+0x4c>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	f040 808b 	bne.w	8005286 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 8087 	bne.w	8005286 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005178:	4b92      	ldr	r3, [pc, #584]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_OscConfig+0x64>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e3ed      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	4b8b      	ldr	r3, [pc, #556]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_RCC_OscConfig+0x7e>
 80051a0:	4b88      	ldr	r3, [pc, #544]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051a8:	e005      	b.n	80051b6 <HAL_RCC_OscConfig+0x8a>
 80051aa:	4b86      	ldr	r3, [pc, #536]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d223      	bcs.n	8005202 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fdca 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e3ce      	b.n	800596c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ce:	4b7d      	ldr	r3, [pc, #500]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a7c      	ldr	r2, [pc, #496]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	4b7a      	ldr	r3, [pc, #488]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4977      	ldr	r1, [pc, #476]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ec:	4b75      	ldr	r3, [pc, #468]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	4972      	ldr	r1, [pc, #456]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	e025      	b.n	800524e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005202:	4b70      	ldr	r3, [pc, #448]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6f      	ldr	r2, [pc, #444]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b6d      	ldr	r3, [pc, #436]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	496a      	ldr	r1, [pc, #424]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005220:	4b68      	ldr	r3, [pc, #416]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	4965      	ldr	r1, [pc, #404]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fd8a 	bl	8005d58 <RCC_SetFlashLatencyFromMSIRange>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e38e      	b.n	800596c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800524e:	f000 fcbf 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	495a      	ldr	r1, [pc, #360]	; (80053c8 <HAL_RCC_OscConfig+0x29c>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	4a58      	ldr	r2, [pc, #352]	; (80053cc <HAL_RCC_OscConfig+0x2a0>)
 800526c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800526e:	4b58      	ldr	r3, [pc, #352]	; (80053d0 <HAL_RCC_OscConfig+0x2a4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd fb94 	bl	80029a0 <HAL_InitTick>
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d052      	beq.n	8005328 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	e372      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d032      	beq.n	80052f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800528e:	4b4d      	ldr	r3, [pc, #308]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a4c      	ldr	r2, [pc, #304]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800529a:	f7fd fbd1 	bl	8002a40 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052a2:	f7fd fbcd 	bl	8002a40 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e35b      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b4:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c0:	4b40      	ldr	r3, [pc, #256]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a3f      	ldr	r2, [pc, #252]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052c6:	f043 0308 	orr.w	r3, r3, #8
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b3d      	ldr	r3, [pc, #244]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	493a      	ldr	r1, [pc, #232]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	4935      	ldr	r1, [pc, #212]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
 80052f2:	e01a      	b.n	800532a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052f4:	4b33      	ldr	r3, [pc, #204]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a32      	ldr	r2, [pc, #200]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005300:	f7fd fb9e 	bl	8002a40 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005308:	f7fd fb9a 	bl	8002a40 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e328      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800531a:	4b2a      	ldr	r3, [pc, #168]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x1dc>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d073      	beq.n	800541e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d005      	beq.n	8005348 <HAL_RCC_OscConfig+0x21c>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	d10e      	bne.n	8005360 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d10b      	bne.n	8005360 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005348:	4b1e      	ldr	r3, [pc, #120]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d063      	beq.n	800541c <HAL_RCC_OscConfig+0x2f0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d15f      	bne.n	800541c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e305      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d106      	bne.n	8005378 <HAL_RCC_OscConfig+0x24c>
 800536a:	4b16      	ldr	r3, [pc, #88]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e01d      	b.n	80053b4 <HAL_RCC_OscConfig+0x288>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005380:	d10c      	bne.n	800539c <HAL_RCC_OscConfig+0x270>
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a0f      	ldr	r2, [pc, #60]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a0c      	ldr	r2, [pc, #48]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e00b      	b.n	80053b4 <HAL_RCC_OscConfig+0x288>
 800539c:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80053a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <HAL_RCC_OscConfig+0x298>)
 80053ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01b      	beq.n	80053f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053bc:	f7fd fb40 	bl	8002a40 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c2:	e010      	b.n	80053e6 <HAL_RCC_OscConfig+0x2ba>
 80053c4:	40021000 	.word	0x40021000
 80053c8:	0800a6f8 	.word	0x0800a6f8
 80053cc:	20000004 	.word	0x20000004
 80053d0:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d4:	f7fd fb34 	bl	8002a40 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e2c2      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e6:	4baf      	ldr	r3, [pc, #700]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x2a8>
 80053f2:	e014      	b.n	800541e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fd fb24 	bl	8002a40 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fc:	f7fd fb20 	bl	8002a40 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e2ae      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540e:	4ba5      	ldr	r3, [pc, #660]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x2d0>
 800541a:	e000      	b.n	800541e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d060      	beq.n	80054ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d005      	beq.n	800543c <HAL_RCC_OscConfig+0x310>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d119      	bne.n	800546a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d116      	bne.n	800546a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543c:	4b99      	ldr	r3, [pc, #612]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_OscConfig+0x328>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e28b      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b93      	ldr	r3, [pc, #588]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	4990      	ldr	r1, [pc, #576]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	e040      	b.n	80054ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d023      	beq.n	80054ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005472:	4b8c      	ldr	r3, [pc, #560]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a8b      	ldr	r2, [pc, #556]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fd fadf 	bl	8002a40 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005486:	f7fd fadb 	bl	8002a40 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e269      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005498:	4b82      	ldr	r3, [pc, #520]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a4:	4b7f      	ldr	r3, [pc, #508]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	497c      	ldr	r1, [pc, #496]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	e018      	b.n	80054ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ba:	4b7a      	ldr	r3, [pc, #488]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a79      	ldr	r2, [pc, #484]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80054c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fd fabb 	bl	8002a40 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fd fab7 	bl	8002a40 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e245      	b.n	800596c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e0:	4b70      	ldr	r3, [pc, #448]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005500:	4b68      	ldr	r3, [pc, #416]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005506:	4a67      	ldr	r2, [pc, #412]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fd fa96 	bl	8002a40 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005518:	f7fd fa92 	bl	8002a40 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e220      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800552a:	4b5e      	ldr	r3, [pc, #376]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800552c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <HAL_RCC_OscConfig+0x3ec>
 8005538:	e01b      	b.n	8005572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553a:	4b5a      	ldr	r3, [pc, #360]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005540:	4a58      	ldr	r2, [pc, #352]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554a:	f7fd fa79 	bl	8002a40 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005552:	f7fd fa75 	bl	8002a40 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e203      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005564:	4b4f      	ldr	r3, [pc, #316]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a6 	beq.w	80056cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005584:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005590:	4b44      	ldr	r3, [pc, #272]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	4a43      	ldr	r2, [pc, #268]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	6593      	str	r3, [r2, #88]	; 0x58
 800559c:	4b41      	ldr	r3, [pc, #260]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a8:	2301      	movs	r3, #1
 80055aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ac:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <HAL_RCC_OscConfig+0x57c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d118      	bne.n	80055ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b8:	4b3b      	ldr	r3, [pc, #236]	; (80056a8 <HAL_RCC_OscConfig+0x57c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a3a      	ldr	r2, [pc, #232]	; (80056a8 <HAL_RCC_OscConfig+0x57c>)
 80055be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c4:	f7fd fa3c 	bl	8002a40 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fd fa38 	bl	8002a40 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e1c6      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <HAL_RCC_OscConfig+0x57c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d108      	bne.n	8005604 <HAL_RCC_OscConfig+0x4d8>
 80055f2:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005602:	e024      	b.n	800564e <HAL_RCC_OscConfig+0x522>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b05      	cmp	r3, #5
 800560a:	d110      	bne.n	800562e <HAL_RCC_OscConfig+0x502>
 800560c:	4b25      	ldr	r3, [pc, #148]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	4a24      	ldr	r2, [pc, #144]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800561c:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800562c:	e00f      	b.n	800564e <HAL_RCC_OscConfig+0x522>
 800562e:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	4a1b      	ldr	r2, [pc, #108]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005646:	f023 0304 	bic.w	r3, r3, #4
 800564a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005656:	f7fd f9f3 	bl	8002a40 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fd f9ef 	bl	8002a40 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e17b      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <HAL_RCC_OscConfig+0x578>)
 8005676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0ed      	beq.n	800565e <HAL_RCC_OscConfig+0x532>
 8005682:	e01a      	b.n	80056ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fd f9dc 	bl	8002a40 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800568a:	e00f      	b.n	80056ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568c:	f7fd f9d8 	bl	8002a40 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	f241 3288 	movw	r2, #5000	; 0x1388
 800569a:	4293      	cmp	r3, r2
 800569c:	d906      	bls.n	80056ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e164      	b.n	800596c <HAL_RCC_OscConfig+0x840>
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ac:	4ba8      	ldr	r3, [pc, #672]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e8      	bne.n	800568c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4ba3      	ldr	r3, [pc, #652]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c4:	4aa2      	ldr	r2, [pc, #648]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d03c      	beq.n	8005752 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e0:	4b9b      	ldr	r3, [pc, #620]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056e6:	4a9a      	ldr	r2, [pc, #616]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fd f9a6 	bl	8002a40 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f8:	f7fd f9a2 	bl	8002a40 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e130      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800570a:	4b91      	ldr	r3, [pc, #580]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800570c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RCC_OscConfig+0x5cc>
 8005718:	e01b      	b.n	8005752 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571a:	4b8d      	ldr	r3, [pc, #564]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800571c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005720:	4a8b      	ldr	r2, [pc, #556]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fd f989 	bl	8002a40 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fd f985 	bl	8002a40 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e113      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005744:	4b82      	ldr	r3, [pc, #520]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ef      	bne.n	8005732 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 8107 	beq.w	800596a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 80cb 	bne.w	80058fc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005766:	4b7a      	ldr	r3, [pc, #488]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d12c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	3b01      	subs	r3, #1
 8005786:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d123      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d11b      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d113      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	3b01      	subs	r3, #1
 80057ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d109      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	3b01      	subs	r3, #1
 80057ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d06d      	beq.n	80058b0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d068      	beq.n	80058ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057e6:	4b5a      	ldr	r3, [pc, #360]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0ba      	b.n	800596c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057f6:	4b56      	ldr	r3, [pc, #344]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a55      	ldr	r2, [pc, #340]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80057fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005800:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005802:	f7fd f91d 	bl	8002a40 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580a:	f7fd f919 	bl	8002a40 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0a7      	b.n	800596c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800581c:	4b4c      	ldr	r3, [pc, #304]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005828:	4b49      	ldr	r3, [pc, #292]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	4b49      	ldr	r3, [pc, #292]	; (8005954 <HAL_RCC_OscConfig+0x828>)
 800582e:	4013      	ands	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005838:	3a01      	subs	r2, #1
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005842:	0212      	lsls	r2, r2, #8
 8005844:	4311      	orrs	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800584a:	0852      	lsrs	r2, r2, #1
 800584c:	3a01      	subs	r2, #1
 800584e:	0552      	lsls	r2, r2, #21
 8005850:	4311      	orrs	r1, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005856:	0852      	lsrs	r2, r2, #1
 8005858:	3a01      	subs	r2, #1
 800585a:	0652      	lsls	r2, r2, #25
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005862:	06d2      	lsls	r2, r2, #27
 8005864:	430a      	orrs	r2, r1
 8005866:	493a      	ldr	r1, [pc, #232]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005868:	4313      	orrs	r3, r2
 800586a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800586c:	4b38      	ldr	r3, [pc, #224]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a37      	ldr	r2, [pc, #220]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005878:	4b35      	ldr	r3, [pc, #212]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a34      	ldr	r2, [pc, #208]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800587e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005884:	f7fd f8dc 	bl	8002a40 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588c:	f7fd f8d8 	bl	8002a40 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e066      	b.n	800596c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589e:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058aa:	e05e      	b.n	800596a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e05d      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b0:	4b27      	ldr	r3, [pc, #156]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d156      	bne.n	800596a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058bc:	4b24      	ldr	r3, [pc, #144]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a23      	ldr	r2, [pc, #140]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058d4:	f7fd f8b4 	bl	8002a40 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058dc:	f7fd f8b0 	bl	8002a40 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e03e      	b.n	800596c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ee:	4b18      	ldr	r3, [pc, #96]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0f0      	beq.n	80058dc <HAL_RCC_OscConfig+0x7b0>
 80058fa:	e036      	b.n	800596a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d031      	beq.n	8005966 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b13      	ldr	r3, [pc, #76]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a12      	ldr	r2, [pc, #72]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800590e:	4b10      	ldr	r3, [pc, #64]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d105      	bne.n	8005926 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	4a0c      	ldr	r2, [pc, #48]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005920:	f023 0303 	bic.w	r3, r3, #3
 8005924:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005926:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a09      	ldr	r2, [pc, #36]	; (8005950 <HAL_RCC_OscConfig+0x824>)
 800592c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005934:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fd f883 	bl	8002a40 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593c:	e00c      	b.n	8005958 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593e:	f7fd f87f 	bl	8002a40 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d905      	bls.n	8005958 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e00d      	b.n	800596c <HAL_RCC_OscConfig+0x840>
 8005950:	40021000 	.word	0x40021000
 8005954:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <HAL_RCC_OscConfig+0x848>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ec      	bne.n	800593e <HAL_RCC_OscConfig+0x812>
 8005964:	e001      	b.n	800596a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3720      	adds	r7, #32
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000

08005978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005982:	2300      	movs	r3, #0
 8005984:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e10f      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b89      	ldr	r3, [pc, #548]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d910      	bls.n	80059c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b86      	ldr	r3, [pc, #536]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 020f 	bic.w	r2, r3, #15
 80059a6:	4984      	ldr	r1, [pc, #528]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b82      	ldr	r3, [pc, #520]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0f7      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8089 	beq.w	8005ae0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d133      	bne.n	8005a3e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059d6:	4b79      	ldr	r3, [pc, #484]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0e4      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80059e6:	f000 fa11 	bl	8005e0c <RCC_GetSysClockFreqFromPLLSource>
 80059ea:	4603      	mov	r3, r0
 80059ec:	4a74      	ldr	r2, [pc, #464]	; (8005bc0 <HAL_RCC_ClockConfig+0x248>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d955      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80059f2:	4b72      	ldr	r3, [pc, #456]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059fe:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a06:	4a6d      	ldr	r2, [pc, #436]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a0e:	2380      	movs	r3, #128	; 0x80
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	e044      	b.n	8005a9e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d03e      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x126>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13a      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a28:	4b64      	ldr	r3, [pc, #400]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a30:	4a62      	ldr	r2, [pc, #392]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e02f      	b.n	8005a9e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d107      	bne.n	8005a56 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a46:	4b5d      	ldr	r3, [pc, #372]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d115      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0ac      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a5e:	4b57      	ldr	r3, [pc, #348]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0a0      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a6e:	4b53      	ldr	r3, [pc, #332]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e098      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005a7e:	f000 f8a7 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4a4e      	ldr	r2, [pc, #312]	; (8005bc0 <HAL_RCC_ClockConfig+0x248>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d909      	bls.n	8005a9e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a8a:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a92:	4a4a      	ldr	r2, [pc, #296]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a9e:	4b47      	ldr	r3, [pc, #284]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f023 0203 	bic.w	r2, r3, #3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	4944      	ldr	r1, [pc, #272]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab0:	f7fc ffc6 	bl	8002a40 <HAL_GetTick>
 8005ab4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab6:	e00a      	b.n	8005ace <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f7fc ffc2 	bl	8002a40 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e070      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ace:	4b3b      	ldr	r3, [pc, #236]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 020c 	and.w	r2, r3, #12
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d1eb      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d009      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aec:	4b33      	ldr	r3, [pc, #204]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	4930      	ldr	r1, [pc, #192]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	608b      	str	r3, [r1, #8]
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d105      	bne.n	8005b12 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b06:	4b2d      	ldr	r3, [pc, #180]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	4a2c      	ldr	r2, [pc, #176]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b10:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b12:	4b29      	ldr	r3, [pc, #164]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d210      	bcs.n	8005b42 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 020f 	bic.w	r2, r3, #15
 8005b28:	4923      	ldr	r1, [pc, #140]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b30:	4b21      	ldr	r3, [pc, #132]	; (8005bb8 <HAL_RCC_ClockConfig+0x240>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d001      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e036      	b.n	8005bb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	4918      	ldr	r1, [pc, #96]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	4910      	ldr	r1, [pc, #64]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b80:	f000 f826 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 8005b84:	4602      	mov	r2, r0
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <HAL_RCC_ClockConfig+0x244>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	490c      	ldr	r1, [pc, #48]	; (8005bc4 <HAL_RCC_ClockConfig+0x24c>)
 8005b92:	5ccb      	ldrb	r3, [r1, r3]
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x250>)
 8005b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RCC_ClockConfig+0x254>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc fefb 	bl	80029a0 <HAL_InitTick>
 8005baa:	4603      	mov	r3, r0
 8005bac:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40022000 	.word	0x40022000
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	04c4b400 	.word	0x04c4b400
 8005bc4:	0800a6f8 	.word	0x0800a6f8
 8005bc8:	20000004 	.word	0x20000004
 8005bcc:	2000001c 	.word	0x2000001c

08005bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	; 0x24
 8005bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bde:	4b3e      	ldr	r3, [pc, #248]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 030c 	and.w	r3, r3, #12
 8005be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be8:	4b3b      	ldr	r3, [pc, #236]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x34>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d121      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d11e      	bne.n	8005c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c04:	4b34      	ldr	r3, [pc, #208]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d107      	bne.n	8005c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c10:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 030f 	and.w	r3, r3, #15
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e005      	b.n	8005c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c20:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c2c:	4a2b      	ldr	r2, [pc, #172]	; (8005cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d102      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c4a:	61bb      	str	r3, [r7, #24]
 8005c4c:	e004      	b.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d101      	bne.n	8005c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c54:	4b23      	ldr	r3, [pc, #140]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b0c      	cmp	r3, #12
 8005c5c:	d134      	bne.n	8005cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d003      	beq.n	8005c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d003      	beq.n	8005c7c <HAL_RCC_GetSysClockFreq+0xac>
 8005c74:	e005      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c76:	4b1a      	ldr	r3, [pc, #104]	; (8005ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c78:	617b      	str	r3, [r7, #20]
      break;
 8005c7a:	e005      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c7e:	617b      	str	r3, [r7, #20]
      break;
 8005c80:	e002      	b.n	8005c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	617b      	str	r3, [r7, #20]
      break;
 8005c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	3301      	adds	r3, #1
 8005c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	fb02 f203 	mul.w	r2, r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	; (8005cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	0e5b      	lsrs	r3, r3, #25
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	3301      	adds	r3, #1
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3724      	adds	r7, #36	; 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	0800a710 	.word	0x0800a710
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	007a1200 	.word	0x007a1200

08005ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cee:	681b      	ldr	r3, [r3, #0]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000004 	.word	0x20000004

08005d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d04:	f7ff fff0 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b06      	ldr	r3, [pc, #24]	; (8005d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	0a1b      	lsrs	r3, r3, #8
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	4904      	ldr	r1, [pc, #16]	; (8005d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d16:	5ccb      	ldrb	r3, [r1, r3]
 8005d18:	f003 031f 	and.w	r3, r3, #31
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	40021000 	.word	0x40021000
 8005d28:	0800a708 	.word	0x0800a708

08005d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d30:	f7ff ffda 	bl	8005ce8 <HAL_RCC_GetHCLKFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	0adb      	lsrs	r3, r3, #11
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	4904      	ldr	r1, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40021000 	.word	0x40021000
 8005d54:	0800a708 	.word	0x0800a708

08005d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d60:	2300      	movs	r3, #0
 8005d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d64:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d70:	f7ff f918 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005d74:	6178      	str	r0, [r7, #20]
 8005d76:	e014      	b.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d78:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	4a21      	ldr	r2, [pc, #132]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6593      	str	r3, [r2, #88]	; 0x58
 8005d84:	4b1f      	ldr	r3, [pc, #124]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d90:	f7ff f908 	bl	8004fa4 <HAL_PWREx_GetVoltageRange>
 8005d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d96:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	4a1a      	ldr	r2, [pc, #104]	; (8005e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da8:	d10b      	bne.n	8005dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d913      	bls.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2ba0      	cmp	r3, #160	; 0xa0
 8005db4:	d902      	bls.n	8005dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005db6:	2302      	movs	r3, #2
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	e00d      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	e00a      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc6:	d902      	bls.n	8005dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005dc8:	2302      	movs	r3, #2
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e004      	b.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b70      	cmp	r3, #112	; 0x70
 8005dd2:	d101      	bne.n	8005dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 020f 	bic.w	r2, r3, #15
 8005de0:	4909      	ldr	r1, [pc, #36]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005de8:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 030f 	and.w	r3, r3, #15
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d001      	beq.n	8005dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	40022000 	.word	0x40022000

08005e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8005e16:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d118      	bne.n	8005e54 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e22:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d107      	bne.n	8005e3e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e2e:	4b27      	ldr	r3, [pc, #156]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e34:	0a1b      	lsrs	r3, r3, #8
 8005e36:	f003 030f 	and.w	r3, r3, #15
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	e005      	b.n	8005e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e3e:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	091b      	lsrs	r3, r3, #4
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e4a:	4a21      	ldr	r2, [pc, #132]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e52:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e54:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d003      	beq.n	8005e6c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d003      	beq.n	8005e72 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8005e6a:	e005      	b.n	8005e78 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e6c:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005e6e:	613b      	str	r3, [r7, #16]
    break;
 8005e70:	e005      	b.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e74:	613b      	str	r3, [r7, #16]
    break;
 8005e76:	e002      	b.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	613b      	str	r3, [r7, #16]
    break;
 8005e7c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	fb02 f203 	mul.w	r2, r2, r3
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0e5b      	lsrs	r3, r3, #25
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ebe:	683b      	ldr	r3, [r7, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	0800a710 	.word	0x0800a710
 8005ed4:	00f42400 	.word	0x00f42400
 8005ed8:	007a1200 	.word	0x007a1200

08005edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee8:	2300      	movs	r3, #0
 8005eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d040      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005efc:	2b80      	cmp	r3, #128	; 0x80
 8005efe:	d02a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f00:	2b80      	cmp	r3, #128	; 0x80
 8005f02:	d825      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f04:	2b60      	cmp	r3, #96	; 0x60
 8005f06:	d026      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d821      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d006      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d81d      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d010      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f1c:	e018      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f1e:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a88      	ldr	r2, [pc, #544]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f2a:	e015      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fb12 	bl	800655c <RCCEx_PLLSAI1_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3320      	adds	r3, #32
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fbfd 	bl	8006744 <RCCEx_PLLSAI2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	74fb      	strb	r3, [r7, #19]
      break;
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f5e:	4b79      	ldr	r3, [pc, #484]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f64:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6c:	4975      	ldr	r1, [pc, #468]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7cfb      	ldrb	r3, [r7, #19]
 8005f78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d047      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8e:	d030      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	d82a      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9a:	d02a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa0:	d824      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa6:	d008      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fac:	d81e      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb6:	d010      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fb8:	e018      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fba:	4b62      	ldr	r3, [pc, #392]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4a61      	ldr	r2, [pc, #388]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fc6:	e015      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fac4 	bl	800655c <RCCEx_PLLSAI1_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3320      	adds	r3, #32
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fbaf 	bl	8006744 <RCCEx_PLLSAI2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	74fb      	strb	r3, [r7, #19]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ffa:	4b52      	ldr	r3, [pc, #328]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	494e      	ldr	r1, [pc, #312]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 809f 	beq.w	8006162 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006024:	2300      	movs	r3, #0
 8006026:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006028:	4b46      	ldr	r3, [pc, #280]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	4a40      	ldr	r2, [pc, #256]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	6593      	str	r3, [r2, #88]	; 0x58
 800604a:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006056:	2301      	movs	r3, #1
 8006058:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800605a:	4b3b      	ldr	r3, [pc, #236]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3a      	ldr	r2, [pc, #232]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006066:	f7fc fceb 	bl	8002a40 <HAL_GetTick>
 800606a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800606c:	e009      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fc fce7 	bl	8002a40 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d902      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	74fb      	strb	r3, [r7, #19]
        break;
 8006080:	e005      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006082:	4b31      	ldr	r3, [pc, #196]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ef      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d15b      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01f      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d019      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d4:	4a1b      	ldr	r2, [pc, #108]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060de:	4a19      	ldr	r2, [pc, #100]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fc fca6 	bl	8002a40 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f6:	e00b      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fc fca2 	bl	8002a40 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	; 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d902      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	74fb      	strb	r3, [r7, #19]
            break;
 800610e:	e006      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ec      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10c      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	4903      	ldr	r1, [pc, #12]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800613c:	e008      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800613e:	7cfb      	ldrb	r3, [r7, #19]
 8006140:	74bb      	strb	r3, [r7, #18]
 8006142:	e005      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006144:	40021000 	.word	0x40021000
 8006148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	7cfb      	ldrb	r3, [r7, #19]
 800614e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006150:	7c7b      	ldrb	r3, [r7, #17]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d105      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006156:	4ba0      	ldr	r3, [pc, #640]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	4a9f      	ldr	r2, [pc, #636]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006160:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800616e:	4b9a      	ldr	r3, [pc, #616]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f023 0203 	bic.w	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617c:	4996      	ldr	r1, [pc, #600]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006190:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f023 020c 	bic.w	r2, r3, #12
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	498e      	ldr	r1, [pc, #568]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061b2:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c0:	4985      	ldr	r1, [pc, #532]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061d4:	4b80      	ldr	r3, [pc, #512]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e2:	497d      	ldr	r1, [pc, #500]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061f6:	4b78      	ldr	r3, [pc, #480]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006204:	4974      	ldr	r1, [pc, #464]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006218:	4b6f      	ldr	r3, [pc, #444]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006226:	496c      	ldr	r1, [pc, #432]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623a:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006248:	4963      	ldr	r1, [pc, #396]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800625c:	4b5e      	ldr	r3, [pc, #376]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626a:	495b      	ldr	r1, [pc, #364]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800627e:	4b56      	ldr	r3, [pc, #344]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	4952      	ldr	r1, [pc, #328]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062a0:	4b4d      	ldr	r3, [pc, #308]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	494a      	ldr	r1, [pc, #296]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062c2:	4b45      	ldr	r3, [pc, #276]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d0:	4941      	ldr	r1, [pc, #260]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e4:	4b3c      	ldr	r3, [pc, #240]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f2:	4939      	ldr	r1, [pc, #228]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d028      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006306:	4b34      	ldr	r3, [pc, #208]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006314:	4930      	ldr	r1, [pc, #192]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006324:	d106      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006326:	4b2c      	ldr	r3, [pc, #176]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	4a2b      	ldr	r2, [pc, #172]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006330:	60d3      	str	r3, [r2, #12]
 8006332:	e011      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800633c:	d10c      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	2101      	movs	r1, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f909 	bl	800655c <RCCEx_PLLSAI1_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d04d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800636c:	d108      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800636e:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800637a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800637e:	e012      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006380:	4b15      	ldr	r3, [pc, #84]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006386:	4a14      	ldr	r2, [pc, #80]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639e:	490e      	ldr	r1, [pc, #56]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ba:	60d3      	str	r3, [r2, #12]
 80063bc:	e020      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c6:	d109      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063c8:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a02      	ldr	r2, [pc, #8]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063d2:	60d3      	str	r3, [r2, #12]
 80063d4:	e014      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063d6:	bf00      	nop
 80063d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e4:	d10c      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3304      	adds	r3, #4
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f8b5 	bl	800655c <RCCEx_PLLSAI1_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800640c:	4b4a      	ldr	r3, [pc, #296]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800641a:	4947      	ldr	r1, [pc, #284]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b42      	ldr	r3, [pc, #264]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a41      	ldr	r2, [pc, #260]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e011      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006442:	d10c      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f886 	bl	800655c <RCCEx_PLLSAI1_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01e      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646a:	4b33      	ldr	r3, [pc, #204]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006470:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647a:	492f      	ldr	r1, [pc, #188]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800648c:	d10c      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f861 	bl	800655c <RCCEx_PLLSAI1_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064b4:	4b20      	ldr	r3, [pc, #128]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064ba:	f023 0204 	bic.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064c4:	491c      	ldr	r1, [pc, #112]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064d8:	4b17      	ldr	r3, [pc, #92]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064de:	f023 0218 	bic.w	r2, r3, #24
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e8:	4913      	ldr	r1, [pc, #76]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800650c:	490a      	ldr	r1, [pc, #40]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800651a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800652c:	7cbb      	ldrb	r3, [r7, #18]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000

0800653c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a04      	ldr	r2, [pc, #16]	; (8006558 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006546:	f043 0304 	orr.w	r3, r3, #4
 800654a:	6013      	str	r3, [r2, #0]
}
 800654c:	bf00      	nop
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	40021000 	.word	0x40021000

0800655c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800656a:	4b72      	ldr	r3, [pc, #456]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00e      	beq.n	8006594 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006576:	4b6f      	ldr	r3, [pc, #444]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0203 	and.w	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d103      	bne.n	800658e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
       ||
 800658a:	2b00      	cmp	r3, #0
 800658c:	d142      	bne.n	8006614 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	e03f      	b.n	8006614 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d018      	beq.n	80065ce <RCCEx_PLLSAI1_Config+0x72>
 800659c:	2b03      	cmp	r3, #3
 800659e:	d825      	bhi.n	80065ec <RCCEx_PLLSAI1_Config+0x90>
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d002      	beq.n	80065aa <RCCEx_PLLSAI1_Config+0x4e>
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d009      	beq.n	80065bc <RCCEx_PLLSAI1_Config+0x60>
 80065a8:	e020      	b.n	80065ec <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80065aa:	4b62      	ldr	r3, [pc, #392]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0302 	and.w	r3, r3, #2
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d11d      	bne.n	80065f2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ba:	e01a      	b.n	80065f2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065bc:	4b5d      	ldr	r3, [pc, #372]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d116      	bne.n	80065f6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065cc:	e013      	b.n	80065f6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ce:	4b59      	ldr	r3, [pc, #356]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10f      	bne.n	80065fa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065da:	4b56      	ldr	r3, [pc, #344]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d109      	bne.n	80065fa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ea:	e006      	b.n	80065fa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
      break;
 80065f0:	e004      	b.n	80065fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006602:	4b4c      	ldr	r3, [pc, #304]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f023 0203 	bic.w	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4949      	ldr	r1, [pc, #292]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006610:	4313      	orrs	r3, r2
 8006612:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f040 8086 	bne.w	8006728 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800661c:	4b45      	ldr	r3, [pc, #276]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a44      	ldr	r2, [pc, #272]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006628:	f7fc fa0a 	bl	8002a40 <HAL_GetTick>
 800662c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800662e:	e009      	b.n	8006644 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006630:	f7fc fa06 	bl	8002a40 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d902      	bls.n	8006644 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	73fb      	strb	r3, [r7, #15]
        break;
 8006642:	e005      	b.n	8006650 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006644:	4b3b      	ldr	r3, [pc, #236]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1ef      	bne.n	8006630 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d168      	bne.n	8006728 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d113      	bne.n	8006684 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800665c:	4b35      	ldr	r3, [pc, #212]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	4b35      	ldr	r3, [pc, #212]	; (8006738 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006662:	4013      	ands	r3, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6892      	ldr	r2, [r2, #8]
 8006668:	0211      	lsls	r1, r2, #8
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	68d2      	ldr	r2, [r2, #12]
 800666e:	06d2      	lsls	r2, r2, #27
 8006670:	4311      	orrs	r1, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6852      	ldr	r2, [r2, #4]
 8006676:	3a01      	subs	r2, #1
 8006678:	0112      	lsls	r2, r2, #4
 800667a:	430a      	orrs	r2, r1
 800667c:	492d      	ldr	r1, [pc, #180]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800667e:	4313      	orrs	r3, r2
 8006680:	610b      	str	r3, [r1, #16]
 8006682:	e02d      	b.n	80066e0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d115      	bne.n	80066b6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	4b2b      	ldr	r3, [pc, #172]	; (800673c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006690:	4013      	ands	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6892      	ldr	r2, [r2, #8]
 8006696:	0211      	lsls	r1, r2, #8
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6912      	ldr	r2, [r2, #16]
 800669c:	0852      	lsrs	r2, r2, #1
 800669e:	3a01      	subs	r2, #1
 80066a0:	0552      	lsls	r2, r2, #21
 80066a2:	4311      	orrs	r1, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6852      	ldr	r2, [r2, #4]
 80066a8:	3a01      	subs	r2, #1
 80066aa:	0112      	lsls	r2, r2, #4
 80066ac:	430a      	orrs	r2, r1
 80066ae:	4921      	ldr	r1, [pc, #132]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	610b      	str	r3, [r1, #16]
 80066b4:	e014      	b.n	80066e0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80066b6:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	4b21      	ldr	r3, [pc, #132]	; (8006740 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066bc:	4013      	ands	r3, r2
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6892      	ldr	r2, [r2, #8]
 80066c2:	0211      	lsls	r1, r2, #8
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	6952      	ldr	r2, [r2, #20]
 80066c8:	0852      	lsrs	r2, r2, #1
 80066ca:	3a01      	subs	r2, #1
 80066cc:	0652      	lsls	r2, r2, #25
 80066ce:	4311      	orrs	r1, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6852      	ldr	r2, [r2, #4]
 80066d4:	3a01      	subs	r2, #1
 80066d6:	0112      	lsls	r2, r2, #4
 80066d8:	430a      	orrs	r2, r1
 80066da:	4916      	ldr	r1, [pc, #88]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066e0:	4b14      	ldr	r3, [pc, #80]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a13      	ldr	r2, [pc, #76]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fc f9a8 	bl	8002a40 <HAL_GetTick>
 80066f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066f2:	e009      	b.n	8006708 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066f4:	f7fc f9a4 	bl	8002a40 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d902      	bls.n	8006708 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	73fb      	strb	r3, [r7, #15]
          break;
 8006706:	e005      	b.n	8006714 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ef      	beq.n	80066f4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 800671c:	691a      	ldr	r2, [r3, #16]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	4904      	ldr	r1, [pc, #16]	; (8006734 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006724:	4313      	orrs	r3, r2
 8006726:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40021000 	.word	0x40021000
 8006738:	07ff800f 	.word	0x07ff800f
 800673c:	ff9f800f 	.word	0xff9f800f
 8006740:	f9ff800f 	.word	0xf9ff800f

08006744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006752:	4b72      	ldr	r3, [pc, #456]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800675e:	4b6f      	ldr	r3, [pc, #444]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0203 	and.w	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d103      	bne.n	8006776 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
       ||
 8006772:	2b00      	cmp	r3, #0
 8006774:	d142      	bne.n	80067fc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
 800677a:	e03f      	b.n	80067fc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b03      	cmp	r3, #3
 8006782:	d018      	beq.n	80067b6 <RCCEx_PLLSAI2_Config+0x72>
 8006784:	2b03      	cmp	r3, #3
 8006786:	d825      	bhi.n	80067d4 <RCCEx_PLLSAI2_Config+0x90>
 8006788:	2b01      	cmp	r3, #1
 800678a:	d002      	beq.n	8006792 <RCCEx_PLLSAI2_Config+0x4e>
 800678c:	2b02      	cmp	r3, #2
 800678e:	d009      	beq.n	80067a4 <RCCEx_PLLSAI2_Config+0x60>
 8006790:	e020      	b.n	80067d4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006792:	4b62      	ldr	r3, [pc, #392]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d11d      	bne.n	80067da <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067a2:	e01a      	b.n	80067da <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80067a4:	4b5d      	ldr	r3, [pc, #372]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d116      	bne.n	80067de <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067b4:	e013      	b.n	80067de <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80067b6:	4b59      	ldr	r3, [pc, #356]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067c2:	4b56      	ldr	r3, [pc, #344]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067d2:	e006      	b.n	80067e2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
      break;
 80067d8:	e004      	b.n	80067e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067da:	bf00      	nop
 80067dc:	e002      	b.n	80067e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067de:	bf00      	nop
 80067e0:	e000      	b.n	80067e4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d108      	bne.n	80067fc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80067ea:	4b4c      	ldr	r3, [pc, #304]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4949      	ldr	r1, [pc, #292]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 8086 	bne.w	8006910 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006804:	4b45      	ldr	r3, [pc, #276]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a44      	ldr	r2, [pc, #272]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 800680a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006810:	f7fc f916 	bl	8002a40 <HAL_GetTick>
 8006814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006816:	e009      	b.n	800682c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006818:	f7fc f912 	bl	8002a40 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d902      	bls.n	800682c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	73fb      	strb	r3, [r7, #15]
        break;
 800682a:	e005      	b.n	8006838 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1ef      	bne.n	8006818 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d168      	bne.n	8006910 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d113      	bne.n	800686c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006844:	4b35      	ldr	r3, [pc, #212]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006846:	695a      	ldr	r2, [r3, #20]
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <RCCEx_PLLSAI2_Config+0x1dc>)
 800684a:	4013      	ands	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6892      	ldr	r2, [r2, #8]
 8006850:	0211      	lsls	r1, r2, #8
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	06d2      	lsls	r2, r2, #27
 8006858:	4311      	orrs	r1, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6852      	ldr	r2, [r2, #4]
 800685e:	3a01      	subs	r2, #1
 8006860:	0112      	lsls	r2, r2, #4
 8006862:	430a      	orrs	r2, r1
 8006864:	492d      	ldr	r1, [pc, #180]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006866:	4313      	orrs	r3, r2
 8006868:	614b      	str	r3, [r1, #20]
 800686a:	e02d      	b.n	80068c8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d115      	bne.n	800689e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006872:	4b2a      	ldr	r3, [pc, #168]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006874:	695a      	ldr	r2, [r3, #20]
 8006876:	4b2b      	ldr	r3, [pc, #172]	; (8006924 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006878:	4013      	ands	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	0211      	lsls	r1, r2, #8
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6912      	ldr	r2, [r2, #16]
 8006884:	0852      	lsrs	r2, r2, #1
 8006886:	3a01      	subs	r2, #1
 8006888:	0552      	lsls	r2, r2, #21
 800688a:	4311      	orrs	r1, r2
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6852      	ldr	r2, [r2, #4]
 8006890:	3a01      	subs	r2, #1
 8006892:	0112      	lsls	r2, r2, #4
 8006894:	430a      	orrs	r2, r1
 8006896:	4921      	ldr	r1, [pc, #132]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006898:	4313      	orrs	r3, r2
 800689a:	614b      	str	r3, [r1, #20]
 800689c:	e014      	b.n	80068c8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800689e:	4b1f      	ldr	r3, [pc, #124]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	4b21      	ldr	r3, [pc, #132]	; (8006928 <RCCEx_PLLSAI2_Config+0x1e4>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6892      	ldr	r2, [r2, #8]
 80068aa:	0211      	lsls	r1, r2, #8
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	6952      	ldr	r2, [r2, #20]
 80068b0:	0852      	lsrs	r2, r2, #1
 80068b2:	3a01      	subs	r2, #1
 80068b4:	0652      	lsls	r2, r2, #25
 80068b6:	4311      	orrs	r1, r2
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6852      	ldr	r2, [r2, #4]
 80068bc:	3a01      	subs	r2, #1
 80068be:	0112      	lsls	r2, r2, #4
 80068c0:	430a      	orrs	r2, r1
 80068c2:	4916      	ldr	r1, [pc, #88]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068c8:	4b14      	ldr	r3, [pc, #80]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a13      	ldr	r2, [pc, #76]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d4:	f7fc f8b4 	bl	8002a40 <HAL_GetTick>
 80068d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068da:	e009      	b.n	80068f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068dc:	f7fc f8b0 	bl	8002a40 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d902      	bls.n	80068f0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	73fb      	strb	r3, [r7, #15]
          break;
 80068ee:	e005      	b.n	80068fc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068f0:	4b0a      	ldr	r3, [pc, #40]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ef      	beq.n	80068dc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006902:	4b06      	ldr	r3, [pc, #24]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006904:	695a      	ldr	r2, [r3, #20]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	4904      	ldr	r1, [pc, #16]	; (800691c <RCCEx_PLLSAI2_Config+0x1d8>)
 800690c:	4313      	orrs	r3, r2
 800690e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40021000 	.word	0x40021000
 8006920:	07ff800f 	.word	0x07ff800f
 8006924:	ff9f800f 	.word	0xff9f800f
 8006928:	f9ff800f 	.word	0xf9ff800f

0800692c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e095      	b.n	8006a6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d108      	bne.n	8006958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800694e:	d009      	beq.n	8006964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	61da      	str	r2, [r3, #28]
 8006956:	e005      	b.n	8006964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d106      	bne.n	8006984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fb fab4 	bl	8001eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800699a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069a4:	d902      	bls.n	80069ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	e002      	b.n	80069b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069ba:	d007      	beq.n	80069cc <HAL_SPI_Init+0xa0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	ea42 0103 	orr.w	r1, r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	0c1b      	lsrs	r3, r3, #16
 8006a28:	f003 0204 	and.w	r2, r3, #4
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a48:	ea42 0103 	orr.w	r1, r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b08a      	sub	sp, #40	; 0x28
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	60f8      	str	r0, [r7, #12]
 8006a7a:	60b9      	str	r1, [r7, #8]
 8006a7c:	607a      	str	r2, [r7, #4]
 8006a7e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a80:	2301      	movs	r3, #1
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_SPI_TransmitReceive+0x26>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e1fb      	b.n	8006e90 <HAL_SPI_TransmitReceive+0x41e>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aa0:	f7fb ffce 	bl	8002a40 <HAL_GetTick>
 8006aa4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ab4:	887b      	ldrh	r3, [r7, #2]
 8006ab6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ab8:	887b      	ldrh	r3, [r7, #2]
 8006aba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006abc:	7efb      	ldrb	r3, [r7, #27]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x6e>
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac8:	d106      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x66>
 8006ad2:	7efb      	ldrb	r3, [r7, #27]
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ade:	e1cd      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x80>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x80>
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006af8:	e1c0      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d003      	beq.n	8006b0e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	887a      	ldrh	r2, [r7, #2]
 8006b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	887a      	ldrh	r2, [r7, #2]
 8006b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b50:	d802      	bhi.n	8006b58 <HAL_SPI_TransmitReceive+0xe6>
 8006b52:	8a3b      	ldrh	r3, [r7, #16]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d908      	bls.n	8006b6a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685a      	ldr	r2, [r3, #4]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b66:	605a      	str	r2, [r3, #4]
 8006b68:	e007      	b.n	8006b7a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b78:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	d007      	beq.n	8006b98 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ba0:	d97c      	bls.n	8006c9c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_SPI_TransmitReceive+0x13e>
 8006baa:	8a7b      	ldrh	r3, [r7, #18]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d169      	bne.n	8006c84 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd4:	e056      	b.n	8006c84 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d11b      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x1aa>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d016      	beq.n	8006c1c <HAL_SPI_TransmitReceive+0x1aa>
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d113      	bne.n	8006c1c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d11c      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x1f2>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d016      	beq.n	8006c64 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	b292      	uxth	r2, r2
 8006c42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	1c9a      	adds	r2, r3, #2
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c64:	f7fb feec 	bl	8002a40 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d807      	bhi.n	8006c84 <HAL_SPI_TransmitReceive+0x212>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c82:	e0fb      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1a3      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x164>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d19d      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x164>
 8006c9a:	e0df      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_SPI_TransmitReceive+0x23a>
 8006ca4:	8a7b      	ldrh	r3, [r7, #18]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	f040 80cb 	bne.w	8006e42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d912      	bls.n	8006cdc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	1c9a      	adds	r2, r3, #2
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b02      	subs	r3, #2
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cda:	e0b2      	b.n	8006e42 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d02:	e09e      	b.n	8006e42 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d134      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x30a>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d02f      	beq.n	8006d7c <HAL_SPI_TransmitReceive+0x30a>
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d12c      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d912      	bls.n	8006d52 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	881a      	ldrh	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3c:	1c9a      	adds	r2, r3, #2
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b02      	subs	r3, #2
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d50:	e012      	b.n	8006d78 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d148      	bne.n	8006e1c <HAL_SPI_TransmitReceive+0x3aa>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d042      	beq.n	8006e1c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d923      	bls.n	8006dea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	b292      	uxth	r2, r2
 8006dae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db4:	1c9a      	adds	r2, r3, #2
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b02      	subs	r3, #2
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d81f      	bhi.n	8006e18 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006de6:	605a      	str	r2, [r3, #4]
 8006de8:	e016      	b.n	8006e18 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f103 020c 	add.w	r2, r3, #12
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	7812      	ldrb	r2, [r2, #0]
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e1c:	f7fb fe10 	bl	8002a40 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d803      	bhi.n	8006e34 <HAL_SPI_TransmitReceive+0x3c2>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e32:	d102      	bne.n	8006e3a <HAL_SPI_TransmitReceive+0x3c8>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e40:	e01c      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f af5b 	bne.w	8006d04 <HAL_SPI_TransmitReceive+0x292>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f af54 	bne.w	8006d04 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f941 	bl	80070e8 <SPI_EndRxTxTransaction>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	661a      	str	r2, [r3, #96]	; 0x60
 8006e78:	e000      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e7a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ea6:	b2db      	uxtb	r3, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b088      	sub	sp, #32
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ec4:	f7fb fdbc 	bl	8002a40 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	1a9b      	subs	r3, r3, r2
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ed4:	f7fb fdb4 	bl	8002a40 <HAL_GetTick>
 8006ed8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006eda:	4b39      	ldr	r3, [pc, #228]	; (8006fc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	015b      	lsls	r3, r3, #5
 8006ee0:	0d1b      	lsrs	r3, r3, #20
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	fb02 f303 	mul.w	r3, r2, r3
 8006ee8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eea:	e054      	b.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	d050      	beq.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ef4:	f7fb fda4 	bl	8002a40 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	69fa      	ldr	r2, [r7, #28]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d902      	bls.n	8006f0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d13d      	bne.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f22:	d111      	bne.n	8006f48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2c:	d004      	beq.n	8006f38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f36:	d107      	bne.n	8006f48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f50:	d10f      	bne.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e017      	b.n	8006fb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2301      	moveq	r3, #1
 8006fa8:	2300      	movne	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d19b      	bne.n	8006eec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000004 	.word	0x20000004

08006fc4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006fd2:	f7fb fd35 	bl	8002a40 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	1a9b      	subs	r3, r3, r2
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	4413      	add	r3, r2
 8006fe0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fe2:	f7fb fd2d 	bl	8002a40 <HAL_GetTick>
 8006fe6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006fe8:	4b3e      	ldr	r3, [pc, #248]	; (80070e4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	00da      	lsls	r2, r3, #3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	0d1b      	lsrs	r3, r3, #20
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	fb02 f303 	mul.w	r3, r2, r3
 8006ffe:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007000:	e062      	b.n	80070c8 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007008:	d109      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d106      	bne.n	800701e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800701c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d050      	beq.n	80070c8 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007026:	f7fb fd0b 	bl	8002a40 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	429a      	cmp	r2, r3
 8007034:	d902      	bls.n	800703c <SPI_WaitFifoStateUntilTimeout+0x78>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13d      	bne.n	80070b8 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800704a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007054:	d111      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800705e:	d004      	beq.n	800706a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007068:	d107      	bne.n	800707a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007078:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007082:	d10f      	bne.n	80070a4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e010      	b.n	80070da <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	4013      	ands	r3, r2
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d194      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000004 	.word	0x20000004

080070e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7ff ff5f 	bl	8006fc4 <SPI_WaitFifoStateUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007110:	f043 0220 	orr.w	r2, r3, #32
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e027      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	2180      	movs	r1, #128	; 0x80
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff fec4 	bl	8006eb4 <SPI_WaitFlagStateUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e014      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7ff ff38 	bl	8006fc4 <SPI_WaitFifoStateUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d007      	beq.n	800716a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e000      	b.n	800716c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e042      	b.n	800720c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718c:	2b00      	cmp	r3, #0
 800718e:	d106      	bne.n	800719e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fa fee9 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f8c4 	bl	8007344 <UART_SetConfig>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e022      	b.n	800720c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb82 	bl	80078d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0201 	orr.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fc09 	bl	8007a1c <UART_CheckIdleState>
 800720a:	4603      	mov	r3, r0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af02      	add	r7, sp, #8
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	4613      	mov	r3, r2
 8007222:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800722a:	2b20      	cmp	r3, #32
 800722c:	f040 8084 	bne.w	8007338 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <HAL_UART_Transmit+0x28>
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e07c      	b.n	800733a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_UART_Transmit+0x3a>
 800724a:	2302      	movs	r3, #2
 800724c:	e075      	b.n	800733a <HAL_UART_Transmit+0x126>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2221      	movs	r2, #33	; 0x21
 8007262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007266:	f7fb fbeb 	bl	8002a40 <HAL_GetTick>
 800726a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	88fa      	ldrh	r2, [r7, #6]
 8007278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007284:	d108      	bne.n	8007298 <HAL_UART_Transmit+0x84>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d104      	bne.n	8007298 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e003      	b.n	80072a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800729c:	2300      	movs	r3, #0
 800729e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80072a8:	e02d      	b.n	8007306 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2180      	movs	r1, #128	; 0x80
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fbfc 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e03a      	b.n	800733a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	881a      	ldrh	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d6:	b292      	uxth	r2, r2
 80072d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	3302      	adds	r3, #2
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e008      	b.n	80072f4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	781a      	ldrb	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	b292      	uxth	r2, r2
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	3301      	adds	r3, #1
 80072f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1cb      	bne.n	80072aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2200      	movs	r2, #0
 800731a:	2140      	movs	r1, #64	; 0x40
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fbc8 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e006      	b.n	800733a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007344:	b5b0      	push	{r4, r5, r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	4313      	orrs	r3, r2
 8007366:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	4bb1      	ldr	r3, [pc, #708]	; (8007634 <UART_SetConfig+0x2f0>)
 8007370:	4013      	ands	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6812      	ldr	r2, [r2, #0]
 8007376:	69f9      	ldr	r1, [r7, #28]
 8007378:	430b      	orrs	r3, r1
 800737a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4aa6      	ldr	r2, [pc, #664]	; (8007638 <UART_SetConfig+0x2f4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d004      	beq.n	80073ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80073b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6812      	ldr	r2, [r2, #0]
 80073be:	69f9      	ldr	r1, [r7, #28]
 80073c0:	430b      	orrs	r3, r1
 80073c2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f023 010f 	bic.w	r1, r3, #15
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a97      	ldr	r2, [pc, #604]	; (800763c <UART_SetConfig+0x2f8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d120      	bne.n	8007426 <UART_SetConfig+0xe2>
 80073e4:	4b96      	ldr	r3, [pc, #600]	; (8007640 <UART_SetConfig+0x2fc>)
 80073e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d816      	bhi.n	8007420 <UART_SetConfig+0xdc>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <UART_SetConfig+0xb4>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007415 	.word	0x08007415
 8007400:	0800740f 	.word	0x0800740f
 8007404:	0800741b 	.word	0x0800741b
 8007408:	2301      	movs	r3, #1
 800740a:	76fb      	strb	r3, [r7, #27]
 800740c:	e0e7      	b.n	80075de <UART_SetConfig+0x29a>
 800740e:	2302      	movs	r3, #2
 8007410:	76fb      	strb	r3, [r7, #27]
 8007412:	e0e4      	b.n	80075de <UART_SetConfig+0x29a>
 8007414:	2304      	movs	r3, #4
 8007416:	76fb      	strb	r3, [r7, #27]
 8007418:	e0e1      	b.n	80075de <UART_SetConfig+0x29a>
 800741a:	2308      	movs	r3, #8
 800741c:	76fb      	strb	r3, [r7, #27]
 800741e:	e0de      	b.n	80075de <UART_SetConfig+0x29a>
 8007420:	2310      	movs	r3, #16
 8007422:	76fb      	strb	r3, [r7, #27]
 8007424:	e0db      	b.n	80075de <UART_SetConfig+0x29a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a86      	ldr	r2, [pc, #536]	; (8007644 <UART_SetConfig+0x300>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d132      	bne.n	8007496 <UART_SetConfig+0x152>
 8007430:	4b83      	ldr	r3, [pc, #524]	; (8007640 <UART_SetConfig+0x2fc>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	f003 030c 	and.w	r3, r3, #12
 800743a:	2b0c      	cmp	r3, #12
 800743c:	d828      	bhi.n	8007490 <UART_SetConfig+0x14c>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x100>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007479 	.word	0x08007479
 8007448:	08007491 	.word	0x08007491
 800744c:	08007491 	.word	0x08007491
 8007450:	08007491 	.word	0x08007491
 8007454:	08007485 	.word	0x08007485
 8007458:	08007491 	.word	0x08007491
 800745c:	08007491 	.word	0x08007491
 8007460:	08007491 	.word	0x08007491
 8007464:	0800747f 	.word	0x0800747f
 8007468:	08007491 	.word	0x08007491
 800746c:	08007491 	.word	0x08007491
 8007470:	08007491 	.word	0x08007491
 8007474:	0800748b 	.word	0x0800748b
 8007478:	2300      	movs	r3, #0
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e0af      	b.n	80075de <UART_SetConfig+0x29a>
 800747e:	2302      	movs	r3, #2
 8007480:	76fb      	strb	r3, [r7, #27]
 8007482:	e0ac      	b.n	80075de <UART_SetConfig+0x29a>
 8007484:	2304      	movs	r3, #4
 8007486:	76fb      	strb	r3, [r7, #27]
 8007488:	e0a9      	b.n	80075de <UART_SetConfig+0x29a>
 800748a:	2308      	movs	r3, #8
 800748c:	76fb      	strb	r3, [r7, #27]
 800748e:	e0a6      	b.n	80075de <UART_SetConfig+0x29a>
 8007490:	2310      	movs	r3, #16
 8007492:	76fb      	strb	r3, [r7, #27]
 8007494:	e0a3      	b.n	80075de <UART_SetConfig+0x29a>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a6b      	ldr	r2, [pc, #428]	; (8007648 <UART_SetConfig+0x304>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d120      	bne.n	80074e2 <UART_SetConfig+0x19e>
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <UART_SetConfig+0x2fc>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074aa:	2b30      	cmp	r3, #48	; 0x30
 80074ac:	d013      	beq.n	80074d6 <UART_SetConfig+0x192>
 80074ae:	2b30      	cmp	r3, #48	; 0x30
 80074b0:	d814      	bhi.n	80074dc <UART_SetConfig+0x198>
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d009      	beq.n	80074ca <UART_SetConfig+0x186>
 80074b6:	2b20      	cmp	r3, #32
 80074b8:	d810      	bhi.n	80074dc <UART_SetConfig+0x198>
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <UART_SetConfig+0x180>
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d006      	beq.n	80074d0 <UART_SetConfig+0x18c>
 80074c2:	e00b      	b.n	80074dc <UART_SetConfig+0x198>
 80074c4:	2300      	movs	r3, #0
 80074c6:	76fb      	strb	r3, [r7, #27]
 80074c8:	e089      	b.n	80075de <UART_SetConfig+0x29a>
 80074ca:	2302      	movs	r3, #2
 80074cc:	76fb      	strb	r3, [r7, #27]
 80074ce:	e086      	b.n	80075de <UART_SetConfig+0x29a>
 80074d0:	2304      	movs	r3, #4
 80074d2:	76fb      	strb	r3, [r7, #27]
 80074d4:	e083      	b.n	80075de <UART_SetConfig+0x29a>
 80074d6:	2308      	movs	r3, #8
 80074d8:	76fb      	strb	r3, [r7, #27]
 80074da:	e080      	b.n	80075de <UART_SetConfig+0x29a>
 80074dc:	2310      	movs	r3, #16
 80074de:	76fb      	strb	r3, [r7, #27]
 80074e0:	e07d      	b.n	80075de <UART_SetConfig+0x29a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a59      	ldr	r2, [pc, #356]	; (800764c <UART_SetConfig+0x308>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d120      	bne.n	800752e <UART_SetConfig+0x1ea>
 80074ec:	4b54      	ldr	r3, [pc, #336]	; (8007640 <UART_SetConfig+0x2fc>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074f6:	2bc0      	cmp	r3, #192	; 0xc0
 80074f8:	d013      	beq.n	8007522 <UART_SetConfig+0x1de>
 80074fa:	2bc0      	cmp	r3, #192	; 0xc0
 80074fc:	d814      	bhi.n	8007528 <UART_SetConfig+0x1e4>
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d009      	beq.n	8007516 <UART_SetConfig+0x1d2>
 8007502:	2b80      	cmp	r3, #128	; 0x80
 8007504:	d810      	bhi.n	8007528 <UART_SetConfig+0x1e4>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <UART_SetConfig+0x1cc>
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d006      	beq.n	800751c <UART_SetConfig+0x1d8>
 800750e:	e00b      	b.n	8007528 <UART_SetConfig+0x1e4>
 8007510:	2300      	movs	r3, #0
 8007512:	76fb      	strb	r3, [r7, #27]
 8007514:	e063      	b.n	80075de <UART_SetConfig+0x29a>
 8007516:	2302      	movs	r3, #2
 8007518:	76fb      	strb	r3, [r7, #27]
 800751a:	e060      	b.n	80075de <UART_SetConfig+0x29a>
 800751c:	2304      	movs	r3, #4
 800751e:	76fb      	strb	r3, [r7, #27]
 8007520:	e05d      	b.n	80075de <UART_SetConfig+0x29a>
 8007522:	2308      	movs	r3, #8
 8007524:	76fb      	strb	r3, [r7, #27]
 8007526:	e05a      	b.n	80075de <UART_SetConfig+0x29a>
 8007528:	2310      	movs	r3, #16
 800752a:	76fb      	strb	r3, [r7, #27]
 800752c:	e057      	b.n	80075de <UART_SetConfig+0x29a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a47      	ldr	r2, [pc, #284]	; (8007650 <UART_SetConfig+0x30c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d125      	bne.n	8007584 <UART_SetConfig+0x240>
 8007538:	4b41      	ldr	r3, [pc, #260]	; (8007640 <UART_SetConfig+0x2fc>)
 800753a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007546:	d017      	beq.n	8007578 <UART_SetConfig+0x234>
 8007548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754c:	d817      	bhi.n	800757e <UART_SetConfig+0x23a>
 800754e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007552:	d00b      	beq.n	800756c <UART_SetConfig+0x228>
 8007554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007558:	d811      	bhi.n	800757e <UART_SetConfig+0x23a>
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <UART_SetConfig+0x222>
 800755e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007562:	d006      	beq.n	8007572 <UART_SetConfig+0x22e>
 8007564:	e00b      	b.n	800757e <UART_SetConfig+0x23a>
 8007566:	2300      	movs	r3, #0
 8007568:	76fb      	strb	r3, [r7, #27]
 800756a:	e038      	b.n	80075de <UART_SetConfig+0x29a>
 800756c:	2302      	movs	r3, #2
 800756e:	76fb      	strb	r3, [r7, #27]
 8007570:	e035      	b.n	80075de <UART_SetConfig+0x29a>
 8007572:	2304      	movs	r3, #4
 8007574:	76fb      	strb	r3, [r7, #27]
 8007576:	e032      	b.n	80075de <UART_SetConfig+0x29a>
 8007578:	2308      	movs	r3, #8
 800757a:	76fb      	strb	r3, [r7, #27]
 800757c:	e02f      	b.n	80075de <UART_SetConfig+0x29a>
 800757e:	2310      	movs	r3, #16
 8007580:	76fb      	strb	r3, [r7, #27]
 8007582:	e02c      	b.n	80075de <UART_SetConfig+0x29a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a2b      	ldr	r2, [pc, #172]	; (8007638 <UART_SetConfig+0x2f4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d125      	bne.n	80075da <UART_SetConfig+0x296>
 800758e:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <UART_SetConfig+0x2fc>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800759c:	d017      	beq.n	80075ce <UART_SetConfig+0x28a>
 800759e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075a2:	d817      	bhi.n	80075d4 <UART_SetConfig+0x290>
 80075a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a8:	d00b      	beq.n	80075c2 <UART_SetConfig+0x27e>
 80075aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ae:	d811      	bhi.n	80075d4 <UART_SetConfig+0x290>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d003      	beq.n	80075bc <UART_SetConfig+0x278>
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d006      	beq.n	80075c8 <UART_SetConfig+0x284>
 80075ba:	e00b      	b.n	80075d4 <UART_SetConfig+0x290>
 80075bc:	2300      	movs	r3, #0
 80075be:	76fb      	strb	r3, [r7, #27]
 80075c0:	e00d      	b.n	80075de <UART_SetConfig+0x29a>
 80075c2:	2302      	movs	r3, #2
 80075c4:	76fb      	strb	r3, [r7, #27]
 80075c6:	e00a      	b.n	80075de <UART_SetConfig+0x29a>
 80075c8:	2304      	movs	r3, #4
 80075ca:	76fb      	strb	r3, [r7, #27]
 80075cc:	e007      	b.n	80075de <UART_SetConfig+0x29a>
 80075ce:	2308      	movs	r3, #8
 80075d0:	76fb      	strb	r3, [r7, #27]
 80075d2:	e004      	b.n	80075de <UART_SetConfig+0x29a>
 80075d4:	2310      	movs	r3, #16
 80075d6:	76fb      	strb	r3, [r7, #27]
 80075d8:	e001      	b.n	80075de <UART_SetConfig+0x29a>
 80075da:	2310      	movs	r3, #16
 80075dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a15      	ldr	r2, [pc, #84]	; (8007638 <UART_SetConfig+0x2f4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	f040 809f 	bne.w	8007728 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075ea:	7efb      	ldrb	r3, [r7, #27]
 80075ec:	2b08      	cmp	r3, #8
 80075ee:	d837      	bhi.n	8007660 <UART_SetConfig+0x31c>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x2b4>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	0800761d 	.word	0x0800761d
 80075fc:	08007661 	.word	0x08007661
 8007600:	08007625 	.word	0x08007625
 8007604:	08007661 	.word	0x08007661
 8007608:	0800762b 	.word	0x0800762b
 800760c:	08007661 	.word	0x08007661
 8007610:	08007661 	.word	0x08007661
 8007614:	08007661 	.word	0x08007661
 8007618:	08007659 	.word	0x08007659
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800761c:	f7fe fb70 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007620:	6178      	str	r0, [r7, #20]
        break;
 8007622:	e022      	b.n	800766a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007624:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <UART_SetConfig+0x310>)
 8007626:	617b      	str	r3, [r7, #20]
        break;
 8007628:	e01f      	b.n	800766a <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762a:	f7fe fad1 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800762e:	6178      	str	r0, [r7, #20]
        break;
 8007630:	e01b      	b.n	800766a <UART_SetConfig+0x326>
 8007632:	bf00      	nop
 8007634:	cfff69f3 	.word	0xcfff69f3
 8007638:	40008000 	.word	0x40008000
 800763c:	40013800 	.word	0x40013800
 8007640:	40021000 	.word	0x40021000
 8007644:	40004400 	.word	0x40004400
 8007648:	40004800 	.word	0x40004800
 800764c:	40004c00 	.word	0x40004c00
 8007650:	40005000 	.word	0x40005000
 8007654:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007658:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765c:	617b      	str	r3, [r7, #20]
        break;
 800765e:	e004      	b.n	800766a <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	76bb      	strb	r3, [r7, #26]
        break;
 8007668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 811b 	beq.w	80078a8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	4a96      	ldr	r2, [pc, #600]	; (80078d0 <UART_SetConfig+0x58c>)
 8007678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800767c:	461a      	mov	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	fbb3 f3f2 	udiv	r3, r3, r2
 8007684:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d305      	bcc.n	80076a2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d902      	bls.n	80076a8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	76bb      	strb	r3, [r7, #26]
 80076a6:	e0ff      	b.n	80078a8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f04f 0100 	mov.w	r1, #0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	4a86      	ldr	r2, [pc, #536]	; (80078d0 <UART_SetConfig+0x58c>)
 80076b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	f7f8 fdee 	bl	80002a0 <__aeabi_uldivmod>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4610      	mov	r0, r2
 80076ca:	4619      	mov	r1, r3
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	020b      	lsls	r3, r1, #8
 80076d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076da:	0202      	lsls	r2, r0, #8
 80076dc:	6879      	ldr	r1, [r7, #4]
 80076de:	6849      	ldr	r1, [r1, #4]
 80076e0:	0849      	lsrs	r1, r1, #1
 80076e2:	4608      	mov	r0, r1
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	1814      	adds	r4, r2, r0
 80076ea:	eb43 0501 	adc.w	r5, r3, r1
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	4620      	mov	r0, r4
 80076fa:	4629      	mov	r1, r5
 80076fc:	f7f8 fdd0 	bl	80002a0 <__aeabi_uldivmod>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4613      	mov	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770e:	d308      	bcc.n	8007722 <UART_SetConfig+0x3de>
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007716:	d204      	bcs.n	8007722 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	60da      	str	r2, [r3, #12]
 8007720:	e0c2      	b.n	80078a8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	76bb      	strb	r3, [r7, #26]
 8007726:	e0bf      	b.n	80078a8 <UART_SetConfig+0x564>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007730:	d165      	bne.n	80077fe <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8007732:	7efb      	ldrb	r3, [r7, #27]
 8007734:	2b08      	cmp	r3, #8
 8007736:	d828      	bhi.n	800778a <UART_SetConfig+0x446>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <UART_SetConfig+0x3fc>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	0800778b 	.word	0x0800778b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800778b 	.word	0x0800778b
 8007758:	0800778b 	.word	0x0800778b
 800775c:	0800778b 	.word	0x0800778b
 8007760:	08007783 	.word	0x08007783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007764:	f7fe facc 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007768:	6178      	str	r0, [r7, #20]
        break;
 800776a:	e013      	b.n	8007794 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800776c:	f7fe fade 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 8007770:	6178      	str	r0, [r7, #20]
        break;
 8007772:	e00f      	b.n	8007794 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007774:	4b57      	ldr	r3, [pc, #348]	; (80078d4 <UART_SetConfig+0x590>)
 8007776:	617b      	str	r3, [r7, #20]
        break;
 8007778:	e00c      	b.n	8007794 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800777a:	f7fe fa29 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800777e:	6178      	str	r0, [r7, #20]
        break;
 8007780:	e008      	b.n	8007794 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007786:	617b      	str	r3, [r7, #20]
        break;
 8007788:	e004      	b.n	8007794 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	76bb      	strb	r3, [r7, #26]
        break;
 8007792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 8086 	beq.w	80078a8 <UART_SetConfig+0x564>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	4a4b      	ldr	r2, [pc, #300]	; (80078d0 <UART_SetConfig+0x58c>)
 80077a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077a6:	461a      	mov	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80077ae:	005a      	lsls	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	085b      	lsrs	r3, r3, #1
 80077b6:	441a      	add	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d916      	bls.n	80077f8 <UART_SetConfig+0x4b4>
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077d0:	d212      	bcs.n	80077f8 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f023 030f 	bic.w	r3, r3, #15
 80077da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	085b      	lsrs	r3, r3, #1
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	89fb      	ldrh	r3, [r7, #14]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	89fa      	ldrh	r2, [r7, #14]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	e057      	b.n	80078a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	76bb      	strb	r3, [r7, #26]
 80077fc:	e054      	b.n	80078a8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077fe:	7efb      	ldrb	r3, [r7, #27]
 8007800:	2b08      	cmp	r3, #8
 8007802:	d828      	bhi.n	8007856 <UART_SetConfig+0x512>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0x4c8>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007831 	.word	0x08007831
 8007810:	08007839 	.word	0x08007839
 8007814:	08007841 	.word	0x08007841
 8007818:	08007857 	.word	0x08007857
 800781c:	08007847 	.word	0x08007847
 8007820:	08007857 	.word	0x08007857
 8007824:	08007857 	.word	0x08007857
 8007828:	08007857 	.word	0x08007857
 800782c:	0800784f 	.word	0x0800784f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007830:	f7fe fa66 	bl	8005d00 <HAL_RCC_GetPCLK1Freq>
 8007834:	6178      	str	r0, [r7, #20]
        break;
 8007836:	e013      	b.n	8007860 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007838:	f7fe fa78 	bl	8005d2c <HAL_RCC_GetPCLK2Freq>
 800783c:	6178      	str	r0, [r7, #20]
        break;
 800783e:	e00f      	b.n	8007860 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007840:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <UART_SetConfig+0x590>)
 8007842:	617b      	str	r3, [r7, #20]
        break;
 8007844:	e00c      	b.n	8007860 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007846:	f7fe f9c3 	bl	8005bd0 <HAL_RCC_GetSysClockFreq>
 800784a:	6178      	str	r0, [r7, #20]
        break;
 800784c:	e008      	b.n	8007860 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007852:	617b      	str	r3, [r7, #20]
        break;
 8007854:	e004      	b.n	8007860 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	76bb      	strb	r3, [r7, #26]
        break;
 800785e:	bf00      	nop
    }

    if (pclk != 0U)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d020      	beq.n	80078a8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <UART_SetConfig+0x58c>)
 800786c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007870:	461a      	mov	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	fbb3 f2f2 	udiv	r2, r3, r2
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	085b      	lsrs	r3, r3, #1
 800787e:	441a      	add	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	b29b      	uxth	r3, r3
 800788a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d908      	bls.n	80078a4 <UART_SetConfig+0x560>
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d204      	bcs.n	80078a4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	e001      	b.n	80078a8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078c4:	7ebb      	ldrb	r3, [r7, #26]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3720      	adds	r7, #32
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bdb0      	pop	{r4, r5, r7, pc}
 80078ce:	bf00      	nop
 80078d0:	0800a754 	.word	0x0800a754
 80078d4:	00f42400 	.word	0x00f42400

080078d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00a      	beq.n	800798a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01a      	beq.n	80079ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d6:	d10a      	bne.n	80079ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	605a      	str	r2, [r3, #4]
  }
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a2c:	f7fb f808 	bl	8002a40 <HAL_GetTick>
 8007a30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d10e      	bne.n	8007a5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f82f 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e025      	b.n	8007aaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b04      	cmp	r3, #4
 8007a6a:	d10e      	bne.n	8007a8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f819 	bl	8007ab2 <UART_WaitOnFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e00f      	b.n	8007aaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac2:	e062      	b.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aca:	d05e      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007acc:	f7fa ffb8 	bl	8002a40 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	69ba      	ldr	r2, [r7, #24]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d302      	bcc.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d11d      	bne.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007af0:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0201 	bic.w	r2, r2, #1
 8007b00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2220      	movs	r2, #32
 8007b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e045      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d02e      	beq.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b3a:	d126      	bne.n	8007b8a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b54:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b86:	2303      	movs	r3, #3
 8007b88:	e00f      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69da      	ldr	r2, [r3, #28]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	bf0c      	ite	eq
 8007b9a:	2301      	moveq	r3, #1
 8007b9c:	2300      	movne	r3, #0
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d08d      	beq.n	8007ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b085      	sub	sp, #20
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d101      	bne.n	8007bc8 <HAL_UARTEx_DisableFifoMode+0x16>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e027      	b.n	8007c18 <HAL_UARTEx_DisableFifoMode+0x66>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2224      	movs	r2, #36	; 0x24
 8007bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0201 	bic.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e02d      	b.n	8007c98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2224      	movs	r2, #36	; 0x24
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0201 	bic.w	r2, r2, #1
 8007c62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f84f 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e02d      	b.n	8007d14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2224      	movs	r2, #36	; 0x24
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	683a      	ldr	r2, [r7, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f811 	bl	8007d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d108      	bne.n	8007d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007d3c:	e031      	b.n	8007da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007d3e:	2308      	movs	r3, #8
 8007d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007d42:	2308      	movs	r3, #8
 8007d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	0e5b      	lsrs	r3, r3, #25
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0307 	and.w	r3, r3, #7
 8007d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	0f5b      	lsrs	r3, r3, #29
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	7b3a      	ldrb	r2, [r7, #12]
 8007d6a:	4911      	ldr	r1, [pc, #68]	; (8007db0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d6c:	5c8a      	ldrb	r2, [r1, r2]
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d72:	7b3a      	ldrb	r2, [r7, #12]
 8007d74:	490f      	ldr	r1, [pc, #60]	; (8007db4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	7b7a      	ldrb	r2, [r7, #13]
 8007d88:	4909      	ldr	r1, [pc, #36]	; (8007db0 <UARTEx_SetNbDataToProcess+0x94>)
 8007d8a:	5c8a      	ldrb	r2, [r1, r2]
 8007d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d90:	7b7a      	ldrb	r2, [r7, #13]
 8007d92:	4908      	ldr	r1, [pc, #32]	; (8007db4 <UARTEx_SetNbDataToProcess+0x98>)
 8007d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	0800a76c 	.word	0x0800a76c
 8007db4:	0800a774 	.word	0x0800a774

08007db8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	; 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	71fb      	strb	r3, [r7, #7]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	71bb      	strb	r3, [r7, #6]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8007dd0:	79bb      	ldrb	r3, [r7, #6]
 8007dd2:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8007dd4:	797b      	ldrb	r3, [r7, #5]
 8007dd6:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	2207      	movs	r2, #7
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fcf6 	bl	80097d2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007de6:	f107 0318 	add.w	r3, r7, #24
 8007dea:	2218      	movs	r2, #24
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fcef 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007df4:	233f      	movs	r3, #63	; 0x3f
 8007df6:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 8007df8:	238a      	movs	r3, #138	; 0x8a
 8007dfa:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 8007dfc:	f107 0314 	add.w	r3, r7, #20
 8007e00:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8007e02:	2303      	movs	r3, #3
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 8007e0c:	2307      	movs	r3, #7
 8007e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007e10:	f107 0318 	add.w	r3, r7, #24
 8007e14:	2100      	movs	r1, #0
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 f82c 	bl	8008e74 <hci_send_req>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	da01      	bge.n	8007e26 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8007e22:	23ff      	movs	r3, #255	; 0xff
 8007e24:	e014      	b.n	8007e50 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8007e26:	7b3b      	ldrb	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d001      	beq.n	8007e30 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 8007e2c:	7b3b      	ldrb	r3, [r7, #12]
 8007e2e:	e00f      	b.n	8007e50 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007e30:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007e3a:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007e44:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e4c:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3730      	adds	r7, #48	; 0x30
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	2207      	movs	r2, #7
 8007e72:	2100      	movs	r1, #0
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fcac 	bl	80097d2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8007e7a:	f107 0320 	add.w	r3, r7, #32
 8007e7e:	2218      	movs	r2, #24
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fca5 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8007e88:	233f      	movs	r3, #63	; 0x3f
 8007e8a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8007e8c:	238a      	movs	r3, #138	; 0x8a
 8007e8e:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8007e90:	f107 031c 	add.w	r3, r7, #28
 8007e94:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 8007e96:	2301      	movs	r3, #1
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8007e9a:	f107 0314 	add.w	r3, r7, #20
 8007e9e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8007ea0:	2307      	movs	r3, #7
 8007ea2:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8007ea4:	f107 0320 	add.w	r3, r7, #32
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ffe2 	bl	8008e74 <hci_send_req>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da01      	bge.n	8007eba <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 8007eb6:	23ff      	movs	r3, #255	; 0xff
 8007eb8:	e014      	b.n	8007ee4 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 8007eba:	7d3b      	ldrb	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8007ec0:	7d3b      	ldrb	r3, [r7, #20]
 8007ec2:	e00f      	b.n	8007ee4 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8007ec4:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8007ece:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8007ed8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3738      	adds	r7, #56	; 0x38
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8007eec:	b590      	push	{r4, r7, lr}
 8007eee:	b095      	sub	sp, #84	; 0x54
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4623      	mov	r3, r4
 8007efc:	71fb      	strb	r3, [r7, #7]
 8007efe:	4603      	mov	r3, r0
 8007f00:	80bb      	strh	r3, [r7, #4]
 8007f02:	460b      	mov	r3, r1
 8007f04:	807b      	strh	r3, [r7, #2]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8007f10:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007f14:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8007f18:	4413      	add	r3, r2
 8007f1a:	330e      	adds	r3, #14
 8007f1c:	2b28      	cmp	r3, #40	; 0x28
 8007f1e:	d901      	bls.n	8007f24 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 8007f20:	2342      	movs	r3, #66	; 0x42
 8007f22:	e0ce      	b.n	80080c2 <aci_gap_set_discoverable+0x1d6>

  buffer[indx] = AdvType;
 8007f24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f2c:	4413      	add	r3, r2
 8007f2e:	79fa      	ldrb	r2, [r7, #7]
 8007f30:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007f34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8007f3e:	88bb      	ldrh	r3, [r7, #4]
 8007f40:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8007f42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f46:	f107 0208 	add.w	r2, r7, #8
 8007f4a:	4413      	add	r3, r2
 8007f4c:	88ba      	ldrh	r2, [r7, #4]
 8007f4e:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007f50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f54:	3302      	adds	r3, #2
 8007f56:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8007f5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	4413      	add	r3, r2
 8007f68:	887a      	ldrh	r2, [r7, #2]
 8007f6a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8007f6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f70:	3302      	adds	r3, #2
 8007f72:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8007f76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f7a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f7e:	4413      	add	r3, r2
 8007f80:	79ba      	ldrb	r2, [r7, #6]
 8007f82:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007f86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8007f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007f94:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007f98:	4413      	add	r3, r2
 8007f9a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8007f9e:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007fa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 8007fac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007fba:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007fbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8007fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007fcc:	f107 0208 	add.w	r2, r7, #8
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8007fd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 fbec 	bl	80097b6 <memcpy>
  indx +=  LocalNameLen;
 8007fde:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007fe2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 8007fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007ff0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8007ffa:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8007ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008002:	3301      	adds	r3, #1
 8008004:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8008008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800800c:	f107 0208 	add.w	r2, r7, #8
 8008010:	4413      	add	r3, r2
 8008012:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8008016:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8008018:	4618      	mov	r0, r3
 800801a:	f001 fbcc 	bl	80097b6 <memcpy>
  indx +=  ServiceUUIDLen;  
 800801e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8008022:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8008026:	4413      	add	r3, r2
 8008028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 800802c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8008030:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008034:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008038:	f107 0208 	add.w	r2, r7, #8
 800803c:	4413      	add	r3, r2
 800803e:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8008042:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008044:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008048:	3302      	adds	r3, #2
 800804a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 800804e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8008052:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8008056:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800805a:	f107 0208 	add.w	r2, r7, #8
 800805e:	4413      	add	r3, r2
 8008060:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8008064:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8008066:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800806a:	3302      	adds	r3, #2
 800806c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008070:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008074:	2218      	movs	r2, #24
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f001 fbaa 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800807e:	233f      	movs	r3, #63	; 0x3f
 8008080:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008082:	2383      	movs	r3, #131	; 0x83
 8008084:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8008086:	f107 0308 	add.w	r3, r7, #8
 800808a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 800808c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008090:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 8008092:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8008096:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8008098:	2301      	movs	r3, #1
 800809a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 800809c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80080a0:	2100      	movs	r1, #0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f000 fee6 	bl	8008e74 <hci_send_req>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da01      	bge.n	80080b2 <aci_gap_set_discoverable+0x1c6>
    return BLE_STATUS_TIMEOUT;
 80080ae:	23ff      	movs	r3, #255	; 0xff
 80080b0:	e007      	b.n	80080c2 <aci_gap_set_discoverable+0x1d6>

  if (status) {
 80080b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <aci_gap_set_discoverable+0x1d4>
    return status;
 80080ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80080be:	e000      	b.n	80080c2 <aci_gap_set_discoverable+0x1d6>
  }

  return 0;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3754      	adds	r7, #84	; 0x54
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd90      	pop	{r4, r7, pc}

080080ca <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80080ca:	b590      	push	{r4, r7, lr}
 80080cc:	b091      	sub	sp, #68	; 0x44
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	603a      	str	r2, [r7, #0]
 80080d2:	461a      	mov	r2, r3
 80080d4:	4603      	mov	r3, r0
 80080d6:	71fb      	strb	r3, [r7, #7]
 80080d8:	460b      	mov	r3, r1
 80080da:	71bb      	strb	r3, [r7, #6]
 80080dc:	4613      	mov	r3, r2
 80080de:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80080e4:	79bb      	ldrb	r3, [r7, #6]
 80080e6:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80080e8:	79bb      	ldrb	r3, [r7, #6]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	f107 030e 	add.w	r3, r7, #14
 80080f4:	6814      	ldr	r4, [r2, #0]
 80080f6:	6850      	ldr	r0, [r2, #4]
 80080f8:	6891      	ldr	r1, [r2, #8]
 80080fa:	68d2      	ldr	r2, [r2, #12]
 80080fc:	601c      	str	r4, [r3, #0]
 80080fe:	6058      	str	r0, [r3, #4]
 8008100:	6099      	str	r1, [r3, #8]
 8008102:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 8008104:	797b      	ldrb	r3, [r7, #5]
 8008106:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 8008108:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800810c:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 800810e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008112:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 8008116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008118:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 800811c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008120:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008128:	2218      	movs	r2, #24
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f001 fb50 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008132:	233f      	movs	r3, #63	; 0x3f
 8008134:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8008136:	2386      	movs	r3, #134	; 0x86
 8008138:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 800813a:	f107 030c 	add.w	r3, r7, #12
 800813e:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 8008140:	231a      	movs	r3, #26
 8008142:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 8008144:	f107 030b 	add.w	r3, r7, #11
 8008148:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 800814a:	2301      	movs	r3, #1
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 800814e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fe8d 	bl	8008e74 <hci_send_req>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	da01      	bge.n	8008164 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008160:	23ff      	movs	r3, #255	; 0xff
 8008162:	e005      	b.n	8008170 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <aci_gap_set_auth_requirement+0xa4>
    return status;
 800816a:	7afb      	ldrb	r3, [r7, #11]
 800816c:	e000      	b.n	8008170 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3744      	adds	r7, #68	; 0x44
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}

08008178 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b092      	sub	sp, #72	; 0x48
 800817c:	af00      	add	r7, sp, #0
 800817e:	607b      	str	r3, [r7, #4]
 8008180:	4603      	mov	r3, r0
 8008182:	81fb      	strh	r3, [r7, #14]
 8008184:	460b      	mov	r3, r1
 8008186:	81bb      	strh	r3, [r7, #12]
 8008188:	4613      	mov	r3, r2
 800818a:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 800818c:	89fb      	ldrh	r3, [r7, #14]
 800818e:	833b      	strh	r3, [r7, #24]
  cp.scanWindow = htobs(scanWindow);
 8008190:	89bb      	ldrh	r3, [r7, #12]
 8008192:	837b      	strh	r3, [r7, #26]
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8008194:	7afb      	ldrb	r3, [r7, #11]
 8008196:	773b      	strb	r3, [r7, #28]
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	f107 031d 	add.w	r3, r7, #29
 800819e:	6811      	ldr	r1, [r2, #0]
 80081a0:	6019      	str	r1, [r3, #0]
 80081a2:	8892      	ldrh	r2, [r2, #4]
 80081a4:	809a      	strh	r2, [r3, #4]
  cp.own_bdaddr_type = own_bdaddr_type;
 80081a6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80081aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  cp.conn_min_interval = htobs(conn_min_interval);
 80081ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  cp.conn_max_interval = htobs(conn_max_interval);
 80081b4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80081b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  cp.conn_latency = htobs(conn_latency);
 80081ba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80081be:	853b      	strh	r3, [r7, #40]	; 0x28
  cp.supervision_timeout = htobs(supervision_timeout);
 80081c0:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80081c4:	857b      	strh	r3, [r7, #42]	; 0x2a
  cp.min_conn_length = htobs(min_conn_length);
 80081c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80081ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  cp.max_conn_length = htobs(max_conn_length);
 80081cc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80081d0:	85fb      	strh	r3, [r7, #46]	; 0x2e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80081d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80081d6:	2218      	movs	r2, #24
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 faf9 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80081e0:	233f      	movs	r3, #63	; 0x3f
 80081e2:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 80081e4:	239c      	movs	r3, #156	; 0x9c
 80081e6:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 80081e8:	f107 0318 	add.w	r3, r7, #24
 80081ec:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = sizeof(cp);
 80081ee:	2318      	movs	r3, #24
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.event = EVT_CMD_STATUS;
 80081f2:	230f      	movs	r3, #15
 80081f4:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80081f6:	f107 0317 	add.w	r3, r7, #23
 80081fa:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80081fc:	2301      	movs	r3, #1
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008204:	2100      	movs	r1, #0
 8008206:	4618      	mov	r0, r3
 8008208:	f000 fe34 	bl	8008e74 <hci_send_req>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	da01      	bge.n	8008216 <aci_gap_create_connection+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008212:	23ff      	movs	r3, #255	; 0xff
 8008214:	e000      	b.n	8008218 <aci_gap_create_connection+0xa0>

  return status;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3748      	adds	r7, #72	; 0x48
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <aci_gap_start_observation_procedure>:
  return status;
}

tBleStatus aci_gap_start_observation_procedure(uint16_t scan_interval, uint16_t scan_window, uint8_t scan_type,
						 uint8_t own_address_type, uint8_t filter_duplicates)
{
 8008220:	b590      	push	{r4, r7, lr}
 8008222:	b08d      	sub	sp, #52	; 0x34
 8008224:	af00      	add	r7, sp, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	461a      	mov	r2, r3
 800822e:	4623      	mov	r3, r4
 8008230:	80fb      	strh	r3, [r7, #6]
 8008232:	4603      	mov	r3, r0
 8008234:	80bb      	strh	r3, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	70fb      	strb	r3, [r7, #3]
 800823a:	4613      	mov	r3, r2
 800823c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  gap_start_observation_proc_cp cp;
  uint8_t status;
  
  cp.scan_interval = scan_interval;
 800823e:	88fb      	ldrh	r3, [r7, #6]
 8008240:	823b      	strh	r3, [r7, #16]
  cp.scan_window = scan_window;
 8008242:	88bb      	ldrh	r3, [r7, #4]
 8008244:	827b      	strh	r3, [r7, #18]
  cp.scan_type = scan_type;
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	753b      	strb	r3, [r7, #20]
  cp.own_address_type = own_address_type;
 800824a:	78bb      	ldrb	r3, [r7, #2]
 800824c:	757b      	strb	r3, [r7, #21]
  cp.filter_duplicates = filter_duplicates;
 800824e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008252:	75bb      	strb	r3, [r7, #22]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008254:	f107 0318 	add.w	r3, r7, #24
 8008258:	2218      	movs	r2, #24
 800825a:	2100      	movs	r1, #0
 800825c:	4618      	mov	r0, r3
 800825e:	f001 fab8 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008262:	233f      	movs	r3, #63	; 0x3f
 8008264:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_START_OBSERVATION_PROC;
 8008266:	23a2      	movs	r3, #162	; 0xa2
 8008268:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 800826a:	f107 0310 	add.w	r3, r7, #16
 800826e:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008270:	2307      	movs	r3, #7
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
  rq.event = EVT_CMD_STATUS;
 8008274:	230f      	movs	r3, #15
 8008276:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008278:	f107 030f 	add.w	r3, r7, #15
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = 1;
 800827e:	2301      	movs	r3, #1
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008282:	f107 0318 	add.w	r3, r7, #24
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fdf3 	bl	8008e74 <hci_send_req>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	da01      	bge.n	8008298 <aci_gap_start_observation_procedure+0x78>
    return BLE_STATUS_TIMEOUT;
 8008294:	23ff      	movs	r3, #255	; 0xff
 8008296:	e000      	b.n	800829a <aci_gap_start_observation_procedure+0x7a>

  return status;
 8008298:	7bfb      	ldrb	r3, [r7, #15]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3734      	adds	r7, #52	; 0x34
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}

080082a2 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b088      	sub	sp, #32
 80082a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80082a8:	f107 0308 	add.w	r3, r7, #8
 80082ac:	2218      	movs	r2, #24
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fa8e 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80082b6:	233f      	movs	r3, #63	; 0x3f
 80082b8:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 80082ba:	f240 1301 	movw	r3, #257	; 0x101
 80082be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80082c0:	1dfb      	adds	r3, r7, #7
 80082c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80082c4:	2301      	movs	r3, #1
 80082c6:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80082c8:	f107 0308 	add.w	r3, r7, #8
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fdd0 	bl	8008e74 <hci_send_req>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	da01      	bge.n	80082de <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 80082da:	23ff      	movs	r3, #255	; 0xff
 80082dc:	e000      	b.n	80082e0 <aci_gatt_init+0x3e>

  return status;
 80082de:	79fb      	ldrb	r3, [r7, #7]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b090      	sub	sp, #64	; 0x40
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6039      	str	r1, [r7, #0]
 80082f0:	4611      	mov	r1, r2
 80082f2:	461a      	mov	r2, r3
 80082f4:	4603      	mov	r3, r0
 80082f6:	71fb      	strb	r3, [r7, #7]
 80082f8:	460b      	mov	r3, r1
 80082fa:	71bb      	strb	r3, [r7, #6]
 80082fc:	4613      	mov	r3, r2
 80082fe:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8008306:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800830a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800830e:	4413      	add	r3, r2
 8008310:	79fa      	ldrb	r2, [r7, #7]
 8008312:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008316:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800831a:	3301      	adds	r3, #1
 800831c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008320:	79fb      	ldrb	r3, [r7, #7]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d103      	bne.n	800832e <aci_gatt_add_serv+0x46>
    uuid_len = 2;
 8008326:	2302      	movs	r3, #2
 8008328:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800832c:	e002      	b.n	8008334 <aci_gatt_add_serv+0x4c>
  }
  else {
    uuid_len = 16;
 800832e:	2310      	movs	r3, #16
 8008330:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008334:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008338:	f107 020c 	add.w	r2, r7, #12
 800833c:	4413      	add	r3, r2
 800833e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	4618      	mov	r0, r3
 8008346:	f001 fa36 	bl	80097b6 <memcpy>
  indx +=  uuid_len;
 800834a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800834e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008352:	4413      	add	r3, r2
 8008354:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 8008358:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800835c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008360:	4413      	add	r3, r2
 8008362:	79ba      	ldrb	r2, [r7, #6]
 8008364:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008368:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800836c:	3301      	adds	r3, #1
 800836e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 8008372:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008376:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800837a:	4413      	add	r3, r2
 800837c:	797a      	ldrb	r2, [r7, #5]
 800837e:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008382:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008386:	3301      	adds	r3, #1
 8008388:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800838c:	f107 0320 	add.w	r3, r7, #32
 8008390:	2203      	movs	r2, #3
 8008392:	2100      	movs	r1, #0
 8008394:	4618      	mov	r0, r3
 8008396:	f001 fa1c 	bl	80097d2 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800839a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800839e:	2218      	movs	r2, #24
 80083a0:	2100      	movs	r1, #0
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fa15 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80083a8:	233f      	movs	r3, #63	; 0x3f
 80083aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 80083ac:	f44f 7381 	mov.w	r3, #258	; 0x102
 80083b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80083b2:	f107 030c 	add.w	r3, r7, #12
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80083b8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80083bc:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 80083be:	f107 0320 	add.w	r3, r7, #32
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80083c4:	2303      	movs	r3, #3
 80083c6:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80083c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 fd50 	bl	8008e74 <hci_send_req>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da01      	bge.n	80083de <aci_gatt_add_serv+0xf6>
    return BLE_STATUS_TIMEOUT;
 80083da:	23ff      	movs	r3, #255	; 0xff
 80083dc:	e00c      	b.n	80083f8 <aci_gatt_add_serv+0x110>

  if (resp.status) {
 80083de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <aci_gatt_add_serv+0x104>
    return resp.status;
 80083e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083ea:	e005      	b.n	80083f8 <aci_gatt_add_serv+0x110>
  }
    
  *serviceHandle = btohs(resp.handle);
 80083ec:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f4:	801a      	strh	r2, [r3, #0]

  return 0;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3740      	adds	r7, #64	; 0x40
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b092      	sub	sp, #72	; 0x48
 8008404:	af00      	add	r7, sp, #0
 8008406:	603a      	str	r2, [r7, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	4603      	mov	r3, r0
 800840c:	80fb      	strh	r3, [r7, #6]
 800840e:	460b      	mov	r3, r1
 8008410:	717b      	strb	r3, [r7, #5]
 8008412:	4613      	mov	r3, r2
 8008414:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008420:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008424:	f107 020c 	add.w	r2, r7, #12
 8008428:	4413      	add	r3, r2
 800842a:	88fa      	ldrh	r2, [r7, #6]
 800842c:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800842e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008432:	3302      	adds	r3, #2
 8008434:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 8008438:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800843c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008440:	4413      	add	r3, r2
 8008442:	797a      	ldrb	r2, [r7, #5]
 8008444:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008448:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800844c:	3301      	adds	r3, #1
 800844e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008452:	797b      	ldrb	r3, [r7, #5]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d103      	bne.n	8008460 <aci_gatt_add_char+0x60>
    uuid_len = 2;
 8008458:	2302      	movs	r3, #2
 800845a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800845e:	e002      	b.n	8008466 <aci_gatt_add_char+0x66>
  }
  else {
    uuid_len = 16;
 8008460:	2310      	movs	r3, #16
 8008462:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008466:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800846a:	f107 020c 	add.w	r2, r7, #12
 800846e:	4413      	add	r3, r2
 8008470:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	4618      	mov	r0, r3
 8008478:	f001 f99d 	bl	80097b6 <memcpy>
  indx +=  uuid_len;
 800847c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008480:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008484:	4413      	add	r3, r2
 8008486:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 800848a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800848e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008492:	4413      	add	r3, r2
 8008494:	793a      	ldrb	r2, [r7, #4]
 8008496:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800849a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800849e:	3301      	adds	r3, #1
 80084a0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 80084a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084ac:	4413      	add	r3, r2
 80084ae:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80084b2:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084ba:	3301      	adds	r3, #1
 80084bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 80084c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084c8:	4413      	add	r3, r2
 80084ca:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80084ce:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084d6:	3301      	adds	r3, #1
 80084d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 80084dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80084e4:	4413      	add	r3, r2
 80084e6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80084ea:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80084ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084f2:	3301      	adds	r3, #1
 80084f4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 80084f8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80084fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008500:	4413      	add	r3, r2
 8008502:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8008506:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800850a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800850e:	3301      	adds	r3, #1
 8008510:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8008514:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008518:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800851c:	4413      	add	r3, r2
 800851e:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8008522:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008526:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800852a:	3301      	adds	r3, #1
 800852c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008534:	2203      	movs	r2, #3
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f94a 	bl	80097d2 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800853e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008542:	2218      	movs	r2, #24
 8008544:	2100      	movs	r1, #0
 8008546:	4618      	mov	r0, r3
 8008548:	f001 f943 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800854c:	233f      	movs	r3, #63	; 0x3f
 800854e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008550:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008554:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 8008556:	f107 030c 	add.w	r3, r7, #12
 800855a:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 800855c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008560:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 8008562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008566:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008568:	2303      	movs	r3, #3
 800856a:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 800856c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fc7e 	bl	8008e74 <hci_send_req>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	da01      	bge.n	8008582 <aci_gatt_add_char+0x182>
    return BLE_STATUS_TIMEOUT;
 800857e:	23ff      	movs	r3, #255	; 0xff
 8008580:	e00c      	b.n	800859c <aci_gatt_add_char+0x19c>

  if (resp.status) {
 8008582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <aci_gatt_add_char+0x190>
    return resp.status;
 800858a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800858e:	e005      	b.n	800859c <aci_gatt_add_char+0x19c>
  }
    
  *charHandle = btohs(resp.handle);
 8008590:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8008594:	b29a      	uxth	r2, r3
 8008596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008598:	801a      	strh	r2, [r3, #0]

  return 0;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3748      	adds	r7, #72	; 0x48
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80085a4:	b590      	push	{r4, r7, lr}
 80085a6:	b0ab      	sub	sp, #172	; 0xac
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4604      	mov	r4, r0
 80085ac:	4608      	mov	r0, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	461a      	mov	r2, r3
 80085b2:	4623      	mov	r3, r4
 80085b4:	80fb      	strh	r3, [r7, #6]
 80085b6:	4603      	mov	r3, r0
 80085b8:	80bb      	strh	r3, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
 80085be:	4613      	mov	r3, r2
 80085c0:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 80085c8:	78bb      	ldrb	r3, [r7, #2]
 80085ca:	2b7a      	cmp	r3, #122	; 0x7a
 80085cc:	d901      	bls.n	80085d2 <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 80085ce:	2342      	movs	r3, #66	; 0x42
 80085d0:	e076      	b.n	80086c0 <aci_gatt_update_char_value+0x11c>

  servHandle = htobs(servHandle);
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 80085d6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80085da:	f107 0208 	add.w	r2, r7, #8
 80085de:	4413      	add	r3, r2
 80085e0:	88fa      	ldrh	r2, [r7, #6]
 80085e2:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80085e4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80085e8:	3302      	adds	r3, #2
 80085ea:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 80085ee:	88bb      	ldrh	r3, [r7, #4]
 80085f0:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 80085f2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80085f6:	f107 0208 	add.w	r2, r7, #8
 80085fa:	4413      	add	r3, r2
 80085fc:	88ba      	ldrh	r2, [r7, #4]
 80085fe:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008600:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008604:	3302      	adds	r3, #2
 8008606:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 800860a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800860e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008612:	4413      	add	r3, r2
 8008614:	78fa      	ldrb	r2, [r7, #3]
 8008616:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 800861a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800861e:	3301      	adds	r3, #1
 8008620:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 8008624:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008628:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800862c:	4413      	add	r3, r2
 800862e:	78ba      	ldrb	r2, [r7, #2]
 8008630:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008634:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008638:	3301      	adds	r3, #1
 800863a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800863e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008642:	f107 0208 	add.w	r2, r7, #8
 8008646:	4413      	add	r3, r2
 8008648:	78ba      	ldrb	r2, [r7, #2]
 800864a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800864e:	4618      	mov	r0, r3
 8008650:	f001 f8b1 	bl	80097b6 <memcpy>
  indx +=  charValueLen;
 8008654:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8008658:	78bb      	ldrb	r3, [r7, #2]
 800865a:	4413      	add	r3, r2
 800865c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008660:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008664:	2218      	movs	r2, #24
 8008666:	2100      	movs	r1, #0
 8008668:	4618      	mov	r0, r3
 800866a:	f001 f8b2 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800866e:	233f      	movs	r3, #63	; 0x3f
 8008670:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008674:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008678:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8008684:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 800868c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8008690:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8008694:	2301      	movs	r3, #1
 8008696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 800869a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800869e:	2100      	movs	r1, #0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 fbe7 	bl	8008e74 <hci_send_req>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	da01      	bge.n	80086b0 <aci_gatt_update_char_value+0x10c>
    return BLE_STATUS_TIMEOUT;
 80086ac:	23ff      	movs	r3, #255	; 0xff
 80086ae:	e007      	b.n	80086c0 <aci_gatt_update_char_value+0x11c>

  if (status) {
 80086b0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <aci_gatt_update_char_value+0x11a>
    return status;
 80086b8:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80086bc:	e000      	b.n	80086c0 <aci_gatt_update_char_value+0x11c>
  }

  return 0;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	37ac      	adds	r7, #172	; 0xac
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd90      	pop	{r4, r7, pc}

080086c8 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80086c8:	b590      	push	{r4, r7, lr}
 80086ca:	b091      	sub	sp, #68	; 0x44
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	4623      	mov	r3, r4
 80086d8:	80fb      	strh	r3, [r7, #6]
 80086da:	4603      	mov	r3, r0
 80086dc:	80bb      	strh	r3, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	807b      	strh	r3, [r7, #2]
 80086e2:	4613      	mov	r3, r2
 80086e4:	707b      	strb	r3, [r7, #1]
  struct hci_request rq;
  uint8_t status;
  
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  conn_handle = htobs(conn_handle);
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80086f0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80086f4:	f107 020c 	add.w	r2, r7, #12
 80086f8:	4413      	add	r3, r2
 80086fa:	88fa      	ldrh	r2, [r7, #6]
 80086fc:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80086fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008702:	3302      	adds	r3, #2
 8008704:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  start_handle = htobs(start_handle);
 8008708:	88bb      	ldrh	r3, [r7, #4]
 800870a:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800870c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008710:	f107 020c 	add.w	r2, r7, #12
 8008714:	4413      	add	r3, r2
 8008716:	88ba      	ldrh	r2, [r7, #4]
 8008718:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800871a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800871e:	3302      	adds	r3, #2
 8008720:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  end_handle = htobs(end_handle);
 8008724:	887b      	ldrh	r3, [r7, #2]
 8008726:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8008728:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800872c:	f107 020c 	add.w	r2, r7, #12
 8008730:	4413      	add	r3, r2
 8008732:	887a      	ldrh	r2, [r7, #2]
 8008734:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008736:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800873a:	3302      	adds	r3, #2
 800873c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  
  buffer[indx] = charUuidType;
 8008740:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008744:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008748:	4413      	add	r3, r2
 800874a:	787a      	ldrb	r2, [r7, #1]
 800874c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008750:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008754:	3301      	adds	r3, #1
 8008756:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(charUuidType == 0x01){
 800875a:	787b      	ldrb	r3, [r7, #1]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d103      	bne.n	8008768 <aci_gatt_disc_charac_by_uuid+0xa0>
    uuid_len = 2;
 8008760:	2302      	movs	r3, #2
 8008762:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008766:	e002      	b.n	800876e <aci_gatt_disc_charac_by_uuid+0xa6>
  }
  else {
    uuid_len = 16;
 8008768:	2310      	movs	r3, #16
 800876a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800876e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008772:	f107 020c 	add.w	r2, r7, #12
 8008776:	4413      	add	r3, r2
 8008778:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800877c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800877e:	4618      	mov	r0, r3
 8008780:	f001 f819 	bl	80097b6 <memcpy>
  indx +=  uuid_len;
 8008784:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008788:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800878c:	4413      	add	r3, r2
 800878e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008796:	2218      	movs	r2, #24
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f001 f819 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80087a0:	233f      	movs	r3, #63	; 0x3f
 80087a2:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80087a4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80087a8:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 80087aa:	f107 030c 	add.w	r3, r7, #12
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 80087b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80087b4:	633b      	str	r3, [r7, #48]	; 0x30
  rq.event = EVT_CMD_STATUS;
 80087b6:	230f      	movs	r3, #15
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rparam = &status;
 80087ba:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = 1;
 80087c0:	2301      	movs	r3, #1
 80087c2:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 80087c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087c8:	2100      	movs	r1, #0
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fb52 	bl	8008e74 <hci_send_req>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	da01      	bge.n	80087da <aci_gatt_disc_charac_by_uuid+0x112>
    return BLE_STATUS_TIMEOUT;
 80087d6:	23ff      	movs	r3, #255	; 0xff
 80087d8:	e001      	b.n	80087de <aci_gatt_disc_charac_by_uuid+0x116>

  return status;
 80087da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3744      	adds	r7, #68	; 0x44
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd90      	pop	{r4, r7, pc}

080087e6 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b0ac      	sub	sp, #176	; 0xb0
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	607b      	str	r3, [r7, #4]
 80087ee:	4603      	mov	r3, r0
 80087f0:	81fb      	strh	r3, [r7, #14]
 80087f2:	460b      	mov	r3, r1
 80087f4:	81bb      	strh	r3, [r7, #12]
 80087f6:	4613      	mov	r3, r2
 80087f8:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8008800:	7afb      	ldrb	r3, [r7, #11]
 8008802:	2b7b      	cmp	r3, #123	; 0x7b
 8008804:	d901      	bls.n	800880a <aci_gatt_write_charac_descriptor+0x24>
    return BLE_STATUS_INVALID_PARAMS;
 8008806:	2342      	movs	r3, #66	; 0x42
 8008808:	e065      	b.n	80088d6 <aci_gatt_write_charac_descriptor+0xf0>

  conn_handle = htobs(conn_handle);
 800880a:	89fb      	ldrh	r3, [r7, #14]
 800880c:	81fb      	strh	r3, [r7, #14]
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800880e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008812:	f107 0210 	add.w	r2, r7, #16
 8008816:	4413      	add	r3, r2
 8008818:	89fa      	ldrh	r2, [r7, #14]
 800881a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800881c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008820:	3302      	adds	r3, #2
 8008822:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
    
  attr_handle = htobs(attr_handle);
 8008826:	89bb      	ldrh	r3, [r7, #12]
 8008828:	81bb      	strh	r3, [r7, #12]
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800882a:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800882e:	f107 0210 	add.w	r2, r7, #16
 8008832:	4413      	add	r3, r2
 8008834:	89ba      	ldrh	r2, [r7, #12]
 8008836:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008838:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800883c:	3302      	adds	r3, #2
 800883e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  buffer[indx] = value_len;
 8008842:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008846:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800884a:	4413      	add	r3, r2
 800884c:	7afa      	ldrb	r2, [r7, #11]
 800884e:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008852:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008856:	3301      	adds	r3, #1
 8008858:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800885c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8008860:	f107 0210 	add.w	r2, r7, #16
 8008864:	4413      	add	r3, r2
 8008866:	7afa      	ldrb	r2, [r7, #11]
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	f000 ffa3 	bl	80097b6 <memcpy>
  indx +=  value_len;
 8008870:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	4413      	add	r3, r2
 8008878:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800887c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008880:	2218      	movs	r2, #24
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f000 ffa4 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800888a:	233f      	movs	r3, #63	; 0x3f
 800888c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8008890:	f240 1321 	movw	r3, #289	; 0x121
 8008894:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
  rq.cparam = (void *)buffer;
 8008898:	f107 0310 	add.w	r3, r7, #16
 800889c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.clen = indx;
 80088a0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80088a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  rq.event = EVT_CMD_STATUS; 
 80088a8:	230f      	movs	r3, #15
 80088aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 80088ae:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80088b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  rq.rlen = 1;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (hci_send_req(&rq, FALSE) < 0)
 80088bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 fad6 	bl	8008e74 <hci_send_req>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da01      	bge.n	80088d2 <aci_gatt_write_charac_descriptor+0xec>
    return BLE_STATUS_TIMEOUT;
 80088ce:	23ff      	movs	r3, #255	; 0xff
 80088d0:	e001      	b.n	80088d6 <aci_gatt_write_charac_descriptor+0xf0>

  return status;
 80088d2:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	37b0      	adds	r7, #176	; 0xb0
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b092      	sub	sp, #72	; 0x48
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	607b      	str	r3, [r7, #4]
 80088e6:	4603      	mov	r3, r0
 80088e8:	81fb      	strh	r3, [r7, #14]
 80088ea:	460b      	mov	r3, r1
 80088ec:	81bb      	strh	r3, [r7, #12]
 80088ee:	4613      	mov	r3, r2
 80088f0:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	2b14      	cmp	r3, #20
 80088f6:	d901      	bls.n	80088fc <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 80088f8:	2342      	movs	r3, #66	; 0x42
 80088fa:	e031      	b.n	8008960 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 80088fc:	89fb      	ldrh	r3, [r7, #14]
 80088fe:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8008900:	89bb      	ldrh	r3, [r7, #12]
 8008902:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8008908:	7afa      	ldrb	r2, [r7, #11]
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	3305      	adds	r3, #5
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 ff4f 	bl	80097b6 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800891c:	2218      	movs	r2, #24
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f000 ff56 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008926:	233f      	movs	r3, #63	; 0x3f
 8008928:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800892a:	f240 1323 	movw	r3, #291	; 0x123
 800892e:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8008930:	f107 0314 	add.w	r3, r7, #20
 8008934:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	3305      	adds	r3, #5
 800893a:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800893c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008940:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008942:	2301      	movs	r3, #1
 8008944:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 8008946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fa91 	bl	8008e74 <hci_send_req>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	da01      	bge.n	800895c <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 8008958:	23ff      	movs	r3, #255	; 0xff
 800895a:	e001      	b.n	8008960 <aci_gatt_write_without_response+0x82>

  return status;
 800895c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008960:	4618      	mov	r0, r3
 8008962:	3748      	adds	r7, #72	; 0x48
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b0aa      	sub	sp, #168	; 0xa8
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	603a      	str	r2, [r7, #0]
 8008972:	71fb      	strb	r3, [r7, #7]
 8008974:	460b      	mov	r3, r1
 8008976:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800897e:	79bb      	ldrb	r3, [r7, #6]
 8008980:	2b7e      	cmp	r3, #126	; 0x7e
 8008982:	d901      	bls.n	8008988 <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 8008984:	2342      	movs	r3, #66	; 0x42
 8008986:	e052      	b.n	8008a2e <aci_hal_write_config_data+0xc6>

  buffer[indx] = offset;
 8008988:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800898c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8008990:	4413      	add	r3, r2
 8008992:	79fa      	ldrb	r2, [r7, #7]
 8008994:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008998:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800899c:	3301      	adds	r3, #1
 800899e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 80089a2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80089aa:	4413      	add	r3, r2
 80089ac:	79ba      	ldrb	r2, [r7, #6]
 80089ae:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80089b2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089b6:	3301      	adds	r3, #1
 80089b8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 80089bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80089c0:	f107 0208 	add.w	r2, r7, #8
 80089c4:	4413      	add	r3, r2
 80089c6:	79ba      	ldrb	r2, [r7, #6]
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fef3 	bl	80097b6 <memcpy>
  indx +=  len;
 80089d0:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80089d4:	79bb      	ldrb	r3, [r7, #6]
 80089d6:	4413      	add	r3, r2
 80089d8:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80089e0:	2218      	movs	r2, #24
 80089e2:	2100      	movs	r1, #0
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fef4 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089ea:	233f      	movs	r3, #63	; 0x3f
 80089ec:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80089f0:	230c      	movs	r3, #12
 80089f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80089fe:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8008a06:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8008a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008a14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a18:	2100      	movs	r1, #0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fa2a 	bl	8008e74 <hci_send_req>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	da01      	bge.n	8008a2a <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008a26:	23ff      	movs	r3, #255	; 0xff
 8008a28:	e001      	b.n	8008a2e <aci_hal_write_config_data+0xc6>

  return status;
 8008a2a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	37a8      	adds	r7, #168	; 0xa8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b08a      	sub	sp, #40	; 0x28
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	460a      	mov	r2, r1
 8008a40:	71fb      	strb	r3, [r7, #7]
 8008a42:	4613      	mov	r3, r2
 8008a44:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008a46:	79fb      	ldrb	r3, [r7, #7]
 8008a48:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008a4a:	79bb      	ldrb	r3, [r7, #6]
 8008a4c:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	2218      	movs	r2, #24
 8008a54:	2100      	movs	r1, #0
 8008a56:	4618      	mov	r0, r3
 8008a58:	f000 febb 	bl	80097d2 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a5c:	233f      	movs	r3, #63	; 0x3f
 8008a5e:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008a60:	230f      	movs	r3, #15
 8008a62:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008a64:	f107 030c 	add.w	r3, r7, #12
 8008a68:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008a6e:	f107 030b 	add.w	r3, r7, #11
 8008a72:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008a74:	2301      	movs	r3, #1
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008a78:	f107 0310 	add.w	r3, r7, #16
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f9f8 	bl	8008e74 <hci_send_req>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da01      	bge.n	8008a8e <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008a8a:	23ff      	movs	r3, #255	; 0xff
 8008a8c:	e000      	b.n	8008a90 <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3728      	adds	r7, #40	; 0x28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b089      	sub	sp, #36	; 0x24
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008aa2:	f107 0410 	add.w	r4, r7, #16
 8008aa6:	f107 0215 	add.w	r2, r7, #21
 8008aaa:	f107 0112 	add.w	r1, r7, #18
 8008aae:	f107 0016 	add.w	r0, r7, #22
 8008ab2:	f107 030e 	add.w	r3, r7, #14
 8008ab6:	9300      	str	r3, [sp, #0]
 8008ab8:	4623      	mov	r3, r4
 8008aba:	f000 f853 	bl	8008b64 <hci_le_read_local_version>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d126      	bne.n	8008b16 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008ac8:	8a7b      	ldrh	r3, [r7, #18]
 8008aca:	0a1b      	lsrs	r3, r3, #8
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008ad4:	8a7b      	ldrh	r3, [r7, #18]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b21a      	sxth	r2, r3
 8008ae4:	89fb      	ldrh	r3, [r7, #14]
 8008ae6:	091b      	lsrs	r3, r3, #4
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	b21b      	sxth	r3, r3
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	b21b      	sxth	r3, r3
 8008af2:	4313      	orrs	r3, r2
 8008af4:	b21b      	sxth	r3, r3
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b21a      	sxth	r2, r3
 8008b02:	89fb      	ldrh	r3, [r7, #14]
 8008b04:	b21b      	sxth	r3, r3
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd90      	pop	{r4, r7, pc}

08008b20 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b26:	f107 0308 	add.w	r3, r7, #8
 8008b2a:	2218      	movs	r2, #24
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fe4f 	bl	80097d2 <memset>
  rq.ogf = OGF_HOST_CTL;
 8008b34:	2303      	movs	r3, #3
 8008b36:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b3c:	1dfb      	adds	r3, r7, #7
 8008b3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b40:	2301      	movs	r3, #1
 8008b42:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008b44:	f107 0308 	add.w	r3, r7, #8
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f992 	bl	8008e74 <hci_send_req>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	da01      	bge.n	8008b5a <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8008b56:	23ff      	movs	r3, #255	; 0xff
 8008b58:	e000      	b.n	8008b5c <hci_reset+0x3c>
  
  return status;  
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3720      	adds	r7, #32
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008b72:	f107 0314 	add.w	r3, r7, #20
 8008b76:	2209      	movs	r2, #9
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fe29 	bl	80097d2 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b80:	f107 0320 	add.w	r3, r7, #32
 8008b84:	2218      	movs	r2, #24
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 fe22 	bl	80097d2 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8008b8e:	2304      	movs	r3, #4
 8008b90:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8008b92:	2301      	movs	r3, #1
 8008b94:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8008b9e:	f107 0314 	add.w	r3, r7, #20
 8008ba2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8008ba4:	2309      	movs	r3, #9
 8008ba6:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ba8:	f107 0320 	add.w	r3, r7, #32
 8008bac:	2100      	movs	r1, #0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f960 	bl	8008e74 <hci_send_req>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da01      	bge.n	8008bbe <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8008bba:	23ff      	movs	r3, #255	; 0xff
 8008bbc:	e018      	b.n	8008bf0 <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8008bbe:	7d3b      	ldrb	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d001      	beq.n	8008bc8 <hci_le_read_local_version+0x64>
    return resp.status;
 8008bc4:	7d3b      	ldrb	r3, [r7, #20]
 8008bc6:	e013      	b.n	8008bf0 <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8008bc8:	7d7a      	ldrb	r2, [r7, #21]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8008bce:	8afa      	ldrh	r2, [r7, #22]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8008bd4:	7e3a      	ldrb	r2, [r7, #24]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8008bda:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8008be4:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bec:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3738      	adds	r7, #56	; 0x38
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b092      	sub	sp, #72	; 0x48
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6039      	str	r1, [r7, #0]
 8008c02:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8008c04:	f107 0310 	add.w	r3, r7, #16
 8008c08:	2220      	movs	r2, #32
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fde0 	bl	80097d2 <memset>
  scan_resp_cp.length = length;
 8008c12:	79fb      	ldrb	r3, [r7, #7]
 8008c14:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	2b1f      	cmp	r3, #31
 8008c1a:	bf28      	it	cs
 8008c1c:	231f      	movcs	r3, #31
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	f107 0310 	add.w	r3, r7, #16
 8008c26:	3301      	adds	r3, #1
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fdc3 	bl	80097b6 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c34:	2218      	movs	r2, #24
 8008c36:	2100      	movs	r1, #0
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fdca 	bl	80097d2 <memset>
  rq.ogf = OGF_LE_CTL;
 8008c3e:	2308      	movs	r3, #8
 8008c40:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8008c42:	2309      	movs	r3, #9
 8008c44:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8008c46:	f107 0310 	add.w	r3, r7, #16
 8008c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8008c50:	f107 030f 	add.w	r3, r7, #15
 8008c54:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f000 f907 	bl	8008e74 <hci_send_req>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	da01      	bge.n	8008c70 <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8008c6c:	23ff      	movs	r3, #255	; 0xff
 8008c6e:	e000      	b.n	8008c72 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8008c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3748      	adds	r7, #72	; 0x48
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3308      	adds	r3, #8
 8008c86:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d001      	beq.n	8008c94 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8008c90:	2301      	movs	r3, #1
 8008c92:	e00c      	b.n	8008cae <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3302      	adds	r3, #2
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008ca2:	3b03      	subs	r3, #3
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d001      	beq.n	8008cac <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e000      	b.n	8008cae <verify_packet+0x34>
  
  return 0;      
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
	...

08008cbc <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b0a6      	sub	sp, #152	; 0x98
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	81fb      	strh	r3, [r7, #14]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	81bb      	strh	r3, [r7, #12]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8008cd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cd8:	b21a      	sxth	r2, r3
 8008cda:	89fb      	ldrh	r3, [r7, #14]
 8008cdc:	029b      	lsls	r3, r3, #10
 8008cde:	b21b      	sxth	r3, r3
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8008ce8:	7afb      	ldrb	r3, [r7, #11]
 8008cea:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8008cec:	2301      	movs	r3, #1
 8008cee:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8008cf0:	f107 0318 	add.w	r3, r7, #24
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	8819      	ldrh	r1, [r3, #0]
 8008cfe:	789b      	ldrb	r3, [r3, #2]
 8008d00:	8011      	strh	r1, [r2, #0]
 8008d02:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8008d04:	f107 0318 	add.w	r3, r7, #24
 8008d08:	3304      	adds	r3, #4
 8008d0a:	7afa      	ldrb	r2, [r7, #11]
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fd51 	bl	80097b6 <memcpy>
  
  if (hciContext.io.Send)
 8008d14:	4b08      	ldr	r3, [pc, #32]	; (8008d38 <send_cmd+0x7c>)
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8008d1c:	4b06      	ldr	r3, [pc, #24]	; (8008d38 <send_cmd+0x7c>)
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	7afa      	ldrb	r2, [r7, #11]
 8008d22:	b292      	uxth	r2, r2
 8008d24:	3204      	adds	r2, #4
 8008d26:	b291      	uxth	r1, r2
 8008d28:	f107 0218 	add.w	r2, r7, #24
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4798      	blx	r3
  }
}
 8008d30:	bf00      	nop
 8008d32:	3798      	adds	r7, #152	; 0x98
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	200004a4 	.word	0x200004a4

08008d3c <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8008d46:	e00a      	b.n	8008d5e <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8008d48:	f107 030c 	add.w	r3, r7, #12
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6838      	ldr	r0, [r7, #0]
 8008d50:	f000 faea 	bl	8009328 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa51 	bl	8009200 <list_insert_head>
  while (!list_is_empty(src_list))
 8008d5e:	6838      	ldr	r0, [r7, #0]
 8008d60:	f000 fa2c 	bl	80091bc <list_is_empty>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ee      	beq.n	8008d48 <move_list+0xc>
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008d7a:	e009      	b.n	8008d90 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8008d7c:	1d3b      	adds	r3, r7, #4
 8008d7e:	4619      	mov	r1, r3
 8008d80:	4809      	ldr	r0, [pc, #36]	; (8008da8 <free_event_list+0x34>)
 8008d82:	f000 faaa 	bl	80092da <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4808      	ldr	r0, [pc, #32]	; (8008dac <free_event_list+0x38>)
 8008d8c:	f000 fa5e 	bl	800924c <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8008d90:	4806      	ldr	r0, [pc, #24]	; (8008dac <free_event_list+0x38>)
 8008d92:	f000 faf0 	bl	8009376 <list_get_size>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	ddef      	ble.n	8008d7c <free_event_list+0x8>
  }
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	200008ec 	.word	0x200008ec
 8008dac:	200008e4 	.word	0x200008e4

08008db0 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8008dc0:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <hci_init+0x74>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8008dc6:	4818      	ldr	r0, [pc, #96]	; (8008e28 <hci_init+0x78>)
 8008dc8:	f000 f9e8 	bl	800919c <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8008dcc:	4817      	ldr	r0, [pc, #92]	; (8008e2c <hci_init+0x7c>)
 8008dce:	f000 f9e5 	bl	800919c <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8008dd2:	f7f8 fa61 	bl	8001298 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e00c      	b.n	8008df6 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	228c      	movs	r2, #140	; 0x8c
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	4a12      	ldr	r2, [pc, #72]	; (8008e30 <hci_init+0x80>)
 8008de6:	4413      	add	r3, r2
 8008de8:	4619      	mov	r1, r3
 8008dea:	480f      	ldr	r0, [pc, #60]	; (8008e28 <hci_init+0x78>)
 8008dec:	f000 fa2e 	bl	800924c <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	3301      	adds	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d9ef      	bls.n	8008ddc <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <hci_init+0x74>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d003      	beq.n	8008e0c <hci_init+0x5c>
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <hci_init+0x74>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2000      	movs	r0, #0
 8008e0a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <hci_init+0x74>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <hci_init+0x6a>
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <hci_init+0x74>)
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	4798      	blx	r3
}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	200004a4 	.word	0x200004a4
 8008e28:	200008e4 	.word	0x200008e4
 8008e2c:	200008ec 	.word	0x200008ec
 8008e30:	200001e8 	.word	0x200001e8

08008e34 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a0b      	ldr	r2, [pc, #44]	; (8008e70 <hci_register_io_bus+0x3c>)
 8008e42:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	4a09      	ldr	r2, [pc, #36]	; (8008e70 <hci_register_io_bus+0x3c>)
 8008e4a:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <hci_register_io_bus+0x3c>)
 8008e52:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	4a05      	ldr	r2, [pc, #20]	; (8008e70 <hci_register_io_bus+0x3c>)
 8008e5a:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	4a03      	ldr	r2, [pc, #12]	; (8008e70 <hci_register_io_bus+0x3c>)
 8008e62:	6093      	str	r3, [r2, #8]
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr
 8008e70:	200004a4 	.word	0x200004a4

08008e74 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b08e      	sub	sp, #56	; 0x38
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	885b      	ldrh	r3, [r3, #2]
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e8a:	b21a      	sxth	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	029b      	lsls	r3, r3, #10
 8008e92:	b21b      	sxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b21b      	sxth	r3, r3
 8008e98:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8008e9e:	f107 0308 	add.w	r3, r7, #8
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f97a 	bl	800919c <list_init_head>

  free_event_list();
 8008ea8:	f7ff ff64 	bl	8008d74 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	8818      	ldrh	r0, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	8859      	ldrh	r1, [r3, #2]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	b2da      	uxtb	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f7ff fefd 	bl	8008cbc <send_cmd>
  
  if (async)
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <hci_send_req+0x58>
  {
    return 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e0e5      	b.n	8009098 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8008ecc:	f7f9 fdb8 	bl	8002a40 <HAL_GetTick>
 8008ed0:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008ed2:	f7f9 fdb5 	bl	8002a40 <HAL_GetTick>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ee0:	f200 80b6 	bhi.w	8009050 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8008ee4:	486e      	ldr	r0, [pc, #440]	; (80090a0 <hci_send_req+0x22c>)
 8008ee6:	f000 f969 	bl	80091bc <list_is_empty>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d000      	beq.n	8008ef2 <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8008ef0:	e7ef      	b.n	8008ed2 <hci_send_req+0x5e>
      {
        break;
 8008ef2:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8008ef4:	f107 0310 	add.w	r3, r7, #16
 8008ef8:	4619      	mov	r1, r3
 8008efa:	4869      	ldr	r0, [pc, #420]	; (80090a0 <hci_send_req+0x22c>)
 8008efc:	f000 f9ed 	bl	80092da <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3308      	adds	r3, #8
 8008f04:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d17b      	bne.n	8009006 <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	3301      	adds	r3, #1
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	3308      	adds	r3, #8
 8008f18:	3303      	adds	r3, #3
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008f22:	3b03      	subs	r3, #3
 8008f24:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f2c:	d04d      	beq.n	8008fca <hci_send_req+0x156>
 8008f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f30:	dc6b      	bgt.n	800900a <hci_send_req+0x196>
 8008f32:	2b10      	cmp	r3, #16
 8008f34:	f000 808e 	beq.w	8009054 <hci_send_req+0x1e0>
 8008f38:	2b10      	cmp	r3, #16
 8008f3a:	dc66      	bgt.n	800900a <hci_send_req+0x196>
 8008f3c:	2b0e      	cmp	r3, #14
 8008f3e:	d024      	beq.n	8008f8a <hci_send_req+0x116>
 8008f40:	2b0f      	cmp	r3, #15
 8008f42:	d162      	bne.n	800900a <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	885b      	ldrh	r3, [r3, #2]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f50:	429a      	cmp	r2, r3
 8008f52:	f040 8081 	bne.w	8009058 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b0f      	cmp	r3, #15
 8008f5c:	d004      	beq.n	8008f68 <hci_send_req+0xf4>
          if (cs->status) {
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d053      	beq.n	800900e <hci_send_req+0x19a>
            goto failed;
 8008f66:	e07a      	b.n	800905e <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695a      	ldr	r2, [r3, #20]
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	bf28      	it	cs
 8008f72:	461a      	movcs	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6918      	ldr	r0, [r3, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	461a      	mov	r2, r3
 8008f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f84:	f000 fc17 	bl	80097b6 <memcpy>
        goto done;
 8008f88:	e07a      	b.n	8009080 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d15f      	bne.n	800905c <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9e:	3303      	adds	r3, #3
 8008fa0:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	3b03      	subs	r3, #3
 8008fa6:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	695a      	ldr	r2, [r3, #20]
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	bf28      	it	cs
 8008fb2:	461a      	movcs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6918      	ldr	r0, [r3, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	695b      	ldr	r3, [r3, #20]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fc4:	f000 fbf7 	bl	80097b6 <memcpy>
        goto done;
 8008fc8:	e05a      	b.n	8009080 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d11a      	bne.n	8009012 <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	6a3b      	ldr	r3, [r7, #32]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	bf28      	it	cs
 8008fec:	461a      	movcs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6918      	ldr	r0, [r3, #16]
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	1c59      	adds	r1, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f000 fbd9 	bl	80097b6 <memcpy>
        goto done;
 8009004:	e03c      	b.n	8009080 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 8009006:	bf00      	nop
 8009008:	e004      	b.n	8009014 <hci_send_req+0x1a0>
        break;
 800900a:	bf00      	nop
 800900c:	e002      	b.n	8009014 <hci_send_req+0x1a0>
          break;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <hci_send_req+0x1a0>
          break;
 8009012:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8009014:	4823      	ldr	r0, [pc, #140]	; (80090a4 <hci_send_req+0x230>)
 8009016:	f000 f8d1 	bl	80091bc <list_is_empty>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00d      	beq.n	800903c <hci_send_req+0x1c8>
 8009020:	481f      	ldr	r0, [pc, #124]	; (80090a0 <hci_send_req+0x22c>)
 8009022:	f000 f8cb 	bl	80091bc <list_is_empty>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	4619      	mov	r1, r3
 8009030:	481c      	ldr	r0, [pc, #112]	; (80090a4 <hci_send_req+0x230>)
 8009032:	f000 f90b 	bl	800924c <list_insert_tail>
      hciReadPacket=NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]
 800903a:	e008      	b.n	800904e <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	4611      	mov	r1, r2
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f901 	bl	800924c <list_insert_tail>
      hciReadPacket=NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	613b      	str	r3, [r7, #16]
  {
 800904e:	e73d      	b.n	8008ecc <hci_send_req+0x58>
        goto failed;
 8009050:	bf00      	nop
 8009052:	e004      	b.n	800905e <hci_send_req+0x1ea>
        goto failed;
 8009054:	bf00      	nop
 8009056:	e002      	b.n	800905e <hci_send_req+0x1ea>
          goto failed;
 8009058:	bf00      	nop
 800905a:	e000      	b.n	800905e <hci_send_req+0x1ea>
          goto failed;
 800905c:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d004      	beq.n	800906e <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	4619      	mov	r1, r3
 8009068:	480e      	ldr	r0, [pc, #56]	; (80090a4 <hci_send_req+0x230>)
 800906a:	f000 f8c9 	bl	8009200 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800906e:	f107 0308 	add.w	r3, r7, #8
 8009072:	4619      	mov	r1, r3
 8009074:	480a      	ldr	r0, [pc, #40]	; (80090a0 <hci_send_req+0x22c>)
 8009076:	f7ff fe61 	bl	8008d3c <move_list>

  return -1;
 800907a:	f04f 33ff 	mov.w	r3, #4294967295
 800907e:	e00b      	b.n	8009098 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	4619      	mov	r1, r3
 8009084:	4807      	ldr	r0, [pc, #28]	; (80090a4 <hci_send_req+0x230>)
 8009086:	f000 f8bb 	bl	8009200 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800908a:	f107 0308 	add.w	r3, r7, #8
 800908e:	4619      	mov	r1, r3
 8009090:	4803      	ldr	r0, [pc, #12]	; (80090a0 <hci_send_req+0x22c>)
 8009092:	f7ff fe53 	bl	8008d3c <move_list>

  return 0;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3738      	adds	r7, #56	; 0x38
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	200008ec 	.word	0x200008ec
 80090a4:	200008e4 	.word	0x200008e4

080090a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80090b2:	e013      	b.n	80090dc <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 80090b4:	1d3b      	adds	r3, r7, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	480e      	ldr	r0, [pc, #56]	; (80090f4 <hci_user_evt_proc+0x4c>)
 80090ba:	f000 f90e 	bl	80092da <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <hci_user_evt_proc+0x50>)
 80090c0:	69db      	ldr	r3, [r3, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <hci_user_evt_proc+0x50>)
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	3208      	adds	r2, #8
 80090ce:	4610      	mov	r0, r2
 80090d0:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4619      	mov	r1, r3
 80090d6:	4809      	ldr	r0, [pc, #36]	; (80090fc <hci_user_evt_proc+0x54>)
 80090d8:	f000 f8b8 	bl	800924c <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 80090dc:	4805      	ldr	r0, [pc, #20]	; (80090f4 <hci_user_evt_proc+0x4c>)
 80090de:	f000 f86d 	bl	80091bc <list_is_empty>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0e5      	beq.n	80090b4 <hci_user_evt_proc+0xc>
  }
}
 80090e8:	bf00      	nop
 80090ea:	bf00      	nop
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200008ec 	.word	0x200008ec
 80090f8:	200004a4 	.word	0x200004a4
 80090fc:	200008e4 	.word	0x200008e4

08009100 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009110:	481f      	ldr	r0, [pc, #124]	; (8009190 <hci_notify_asynch_evt+0x90>)
 8009112:	f000 f853 	bl	80091bc <list_is_empty>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d132      	bne.n	8009182 <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800911c:	f107 030c 	add.w	r3, r7, #12
 8009120:	4619      	mov	r1, r3
 8009122:	481b      	ldr	r0, [pc, #108]	; (8009190 <hci_notify_asynch_evt+0x90>)
 8009124:	f000 f8d9 	bl	80092da <list_remove_head>
    
    if (hciContext.io.Receive)
 8009128:	4b1a      	ldr	r3, [pc, #104]	; (8009194 <hci_notify_asynch_evt+0x94>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02a      	beq.n	8009186 <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009130:	4b18      	ldr	r3, [pc, #96]	; (8009194 <hci_notify_asynch_evt+0x94>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	3208      	adds	r2, #8
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	4610      	mov	r0, r2
 800913c:	4798      	blx	r3
 800913e:	4603      	mov	r3, r0
 8009140:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8009142:	7cfb      	ldrb	r3, [r7, #19]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d016      	beq.n	8009176 <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	7cfa      	ldrb	r2, [r7, #19]
 800914c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fd91 	bl	8008c7a <verify_packet>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	4619      	mov	r1, r3
 8009162:	480d      	ldr	r0, [pc, #52]	; (8009198 <hci_notify_asynch_evt+0x98>)
 8009164:	f000 f872 	bl	800924c <list_insert_tail>
 8009168:	e00d      	b.n	8009186 <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4619      	mov	r1, r3
 800916e:	4808      	ldr	r0, [pc, #32]	; (8009190 <hci_notify_asynch_evt+0x90>)
 8009170:	f000 f846 	bl	8009200 <list_insert_head>
 8009174:	e007      	b.n	8009186 <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	4619      	mov	r1, r3
 800917a:	4805      	ldr	r0, [pc, #20]	; (8009190 <hci_notify_asynch_evt+0x90>)
 800917c:	f000 f840 	bl	8009200 <list_insert_head>
 8009180:	e001      	b.n	8009186 <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8009182:	2301      	movs	r3, #1
 8009184:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009186:	697b      	ldr	r3, [r7, #20]

}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	200008e4 	.word	0x200008e4
 8009194:	200004a4 	.word	0x200004a4
 8009198:	200008ec 	.word	0x200008ec

0800919c <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	605a      	str	r2, [r3, #4]
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091c4:	f3ef 8310 	mrs	r3, PRIMASK
 80091c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091ca:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80091ce:	b672      	cpsid	i
}
 80091d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d102      	bne.n	80091e2 <list_is_empty+0x26>
  {
    return_value = 1;
 80091dc:	2301      	movs	r3, #1
 80091de:	75fb      	strb	r3, [r7, #23]
 80091e0:	e001      	b.n	80091e6 <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 80091e2:	2300      	movs	r3, #0
 80091e4:	75fb      	strb	r3, [r7, #23]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f383 8810 	msr	PRIMASK, r3
}
 80091f0:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	371c      	adds	r7, #28
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800920a:	f3ef 8310 	mrs	r3, PRIMASK
 800920e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009210:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009214:	b672      	cpsid	i
}
 8009216:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	605a      	str	r2, [r3, #4]
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f383 8810 	msr	PRIMASK, r3
}
 800923e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009240:	bf00      	nop
 8009242:	371c      	adds	r7, #28
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009256:	f3ef 8310 	mrs	r3, PRIMASK
 800925a:	60fb      	str	r3, [r7, #12]
  return(result);
 800925c:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800925e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009260:	b672      	cpsid	i
}
 8009262:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	f383 8810 	msr	PRIMASK, r3
}
 800928a:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800928c:	bf00      	nop
 800928e:	371c      	adds	r7, #28
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009298:	b480      	push	{r7}
 800929a:	b087      	sub	sp, #28
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a0:	f3ef 8310 	mrs	r3, PRIMASK
 80092a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80092a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092aa:	b672      	cpsid	i
}
 80092ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6852      	ldr	r2, [r2, #4]
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	f383 8810 	msr	PRIMASK, r3
}
 80092cc:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b086      	sub	sp, #24
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e4:	f3ef 8310 	mrs	r3, PRIMASK
 80092e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80092ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092ee:	b672      	cpsid	i
}
 80092f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff ffca 	bl	8009298 <list_remove_node>
  (*node)->next = NULL;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2200      	movs	r2, #0
 8009312:	605a      	str	r2, [r3, #4]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f383 8810 	msr	PRIMASK, r3
}
 800931e:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009320:	bf00      	nop
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009332:	f3ef 8310 	mrs	r3, PRIMASK
 8009336:	60fb      	str	r3, [r7, #12]
  return(result);
 8009338:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800933a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800933c:	b672      	cpsid	i
}
 800933e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ffa3 	bl	8009298 <list_remove_node>
  (*node)->next = NULL;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2200      	movs	r2, #0
 8009360:	605a      	str	r2, [r3, #4]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f383 8810 	msr	PRIMASK, r3
}
 800936c:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8009376:	b480      	push	{r7}
 8009378:	b089      	sub	sp, #36	; 0x24
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  int size = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009382:	f3ef 8310 	mrs	r3, PRIMASK
 8009386:	613b      	str	r3, [r7, #16]
  return(result);
 8009388:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800938a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800938c:	b672      	cpsid	i
}
 800938e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8009396:	e005      	b.n	80093a4 <list_get_size+0x2e>
  {
    size++;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	3301      	adds	r3, #1
 800939c:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d1f5      	bne.n	8009398 <list_get_size+0x22>
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f383 8810 	msr	PRIMASK, r3
}
 80093b6:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 80093b8:	69fb      	ldr	r3, [r7, #28]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3724      	adds	r7, #36	; 0x24
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
	...

080093c8 <__errno>:
 80093c8:	4b01      	ldr	r3, [pc, #4]	; (80093d0 <__errno+0x8>)
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20000024 	.word	0x20000024

080093d4 <__sflush_r>:
 80093d4:	898a      	ldrh	r2, [r1, #12]
 80093d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093da:	4605      	mov	r5, r0
 80093dc:	0710      	lsls	r0, r2, #28
 80093de:	460c      	mov	r4, r1
 80093e0:	d458      	bmi.n	8009494 <__sflush_r+0xc0>
 80093e2:	684b      	ldr	r3, [r1, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc05      	bgt.n	80093f4 <__sflush_r+0x20>
 80093e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	dc02      	bgt.n	80093f4 <__sflush_r+0x20>
 80093ee:	2000      	movs	r0, #0
 80093f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	d0f9      	beq.n	80093ee <__sflush_r+0x1a>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009400:	682f      	ldr	r7, [r5, #0]
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	d032      	beq.n	800946c <__sflush_r+0x98>
 8009406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	075a      	lsls	r2, r3, #29
 800940c:	d505      	bpl.n	800941a <__sflush_r+0x46>
 800940e:	6863      	ldr	r3, [r4, #4]
 8009410:	1ac0      	subs	r0, r0, r3
 8009412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009414:	b10b      	cbz	r3, 800941a <__sflush_r+0x46>
 8009416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009418:	1ac0      	subs	r0, r0, r3
 800941a:	2300      	movs	r3, #0
 800941c:	4602      	mov	r2, r0
 800941e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009420:	6a21      	ldr	r1, [r4, #32]
 8009422:	4628      	mov	r0, r5
 8009424:	47b0      	blx	r6
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	d106      	bne.n	800943a <__sflush_r+0x66>
 800942c:	6829      	ldr	r1, [r5, #0]
 800942e:	291d      	cmp	r1, #29
 8009430:	d82c      	bhi.n	800948c <__sflush_r+0xb8>
 8009432:	4a2a      	ldr	r2, [pc, #168]	; (80094dc <__sflush_r+0x108>)
 8009434:	40ca      	lsrs	r2, r1
 8009436:	07d6      	lsls	r6, r2, #31
 8009438:	d528      	bpl.n	800948c <__sflush_r+0xb8>
 800943a:	2200      	movs	r2, #0
 800943c:	6062      	str	r2, [r4, #4]
 800943e:	04d9      	lsls	r1, r3, #19
 8009440:	6922      	ldr	r2, [r4, #16]
 8009442:	6022      	str	r2, [r4, #0]
 8009444:	d504      	bpl.n	8009450 <__sflush_r+0x7c>
 8009446:	1c42      	adds	r2, r0, #1
 8009448:	d101      	bne.n	800944e <__sflush_r+0x7a>
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	b903      	cbnz	r3, 8009450 <__sflush_r+0x7c>
 800944e:	6560      	str	r0, [r4, #84]	; 0x54
 8009450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009452:	602f      	str	r7, [r5, #0]
 8009454:	2900      	cmp	r1, #0
 8009456:	d0ca      	beq.n	80093ee <__sflush_r+0x1a>
 8009458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800945c:	4299      	cmp	r1, r3
 800945e:	d002      	beq.n	8009466 <__sflush_r+0x92>
 8009460:	4628      	mov	r0, r5
 8009462:	f000 f9bf 	bl	80097e4 <_free_r>
 8009466:	2000      	movs	r0, #0
 8009468:	6360      	str	r0, [r4, #52]	; 0x34
 800946a:	e7c1      	b.n	80093f0 <__sflush_r+0x1c>
 800946c:	6a21      	ldr	r1, [r4, #32]
 800946e:	2301      	movs	r3, #1
 8009470:	4628      	mov	r0, r5
 8009472:	47b0      	blx	r6
 8009474:	1c41      	adds	r1, r0, #1
 8009476:	d1c7      	bne.n	8009408 <__sflush_r+0x34>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0c4      	beq.n	8009408 <__sflush_r+0x34>
 800947e:	2b1d      	cmp	r3, #29
 8009480:	d001      	beq.n	8009486 <__sflush_r+0xb2>
 8009482:	2b16      	cmp	r3, #22
 8009484:	d101      	bne.n	800948a <__sflush_r+0xb6>
 8009486:	602f      	str	r7, [r5, #0]
 8009488:	e7b1      	b.n	80093ee <__sflush_r+0x1a>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	e7ad      	b.n	80093f0 <__sflush_r+0x1c>
 8009494:	690f      	ldr	r7, [r1, #16]
 8009496:	2f00      	cmp	r7, #0
 8009498:	d0a9      	beq.n	80093ee <__sflush_r+0x1a>
 800949a:	0793      	lsls	r3, r2, #30
 800949c:	680e      	ldr	r6, [r1, #0]
 800949e:	bf08      	it	eq
 80094a0:	694b      	ldreq	r3, [r1, #20]
 80094a2:	600f      	str	r7, [r1, #0]
 80094a4:	bf18      	it	ne
 80094a6:	2300      	movne	r3, #0
 80094a8:	eba6 0807 	sub.w	r8, r6, r7
 80094ac:	608b      	str	r3, [r1, #8]
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	dd9c      	ble.n	80093ee <__sflush_r+0x1a>
 80094b4:	6a21      	ldr	r1, [r4, #32]
 80094b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80094b8:	4643      	mov	r3, r8
 80094ba:	463a      	mov	r2, r7
 80094bc:	4628      	mov	r0, r5
 80094be:	47b0      	blx	r6
 80094c0:	2800      	cmp	r0, #0
 80094c2:	dc06      	bgt.n	80094d2 <__sflush_r+0xfe>
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ca:	81a3      	strh	r3, [r4, #12]
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	e78e      	b.n	80093f0 <__sflush_r+0x1c>
 80094d2:	4407      	add	r7, r0
 80094d4:	eba8 0800 	sub.w	r8, r8, r0
 80094d8:	e7e9      	b.n	80094ae <__sflush_r+0xda>
 80094da:	bf00      	nop
 80094dc:	20400001 	.word	0x20400001

080094e0 <_fflush_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	690b      	ldr	r3, [r1, #16]
 80094e4:	4605      	mov	r5, r0
 80094e6:	460c      	mov	r4, r1
 80094e8:	b913      	cbnz	r3, 80094f0 <_fflush_r+0x10>
 80094ea:	2500      	movs	r5, #0
 80094ec:	4628      	mov	r0, r5
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	b118      	cbz	r0, 80094fa <_fflush_r+0x1a>
 80094f2:	6983      	ldr	r3, [r0, #24]
 80094f4:	b90b      	cbnz	r3, 80094fa <_fflush_r+0x1a>
 80094f6:	f000 f899 	bl	800962c <__sinit>
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <_fflush_r+0x6c>)
 80094fc:	429c      	cmp	r4, r3
 80094fe:	d11b      	bne.n	8009538 <_fflush_r+0x58>
 8009500:	686c      	ldr	r4, [r5, #4]
 8009502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0ef      	beq.n	80094ea <_fflush_r+0xa>
 800950a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800950c:	07d0      	lsls	r0, r2, #31
 800950e:	d404      	bmi.n	800951a <_fflush_r+0x3a>
 8009510:	0599      	lsls	r1, r3, #22
 8009512:	d402      	bmi.n	800951a <_fflush_r+0x3a>
 8009514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009516:	f000 f94c 	bl	80097b2 <__retarget_lock_acquire_recursive>
 800951a:	4628      	mov	r0, r5
 800951c:	4621      	mov	r1, r4
 800951e:	f7ff ff59 	bl	80093d4 <__sflush_r>
 8009522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009524:	07da      	lsls	r2, r3, #31
 8009526:	4605      	mov	r5, r0
 8009528:	d4e0      	bmi.n	80094ec <_fflush_r+0xc>
 800952a:	89a3      	ldrh	r3, [r4, #12]
 800952c:	059b      	lsls	r3, r3, #22
 800952e:	d4dd      	bmi.n	80094ec <_fflush_r+0xc>
 8009530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009532:	f000 f93f 	bl	80097b4 <__retarget_lock_release_recursive>
 8009536:	e7d9      	b.n	80094ec <_fflush_r+0xc>
 8009538:	4b05      	ldr	r3, [pc, #20]	; (8009550 <_fflush_r+0x70>)
 800953a:	429c      	cmp	r4, r3
 800953c:	d101      	bne.n	8009542 <_fflush_r+0x62>
 800953e:	68ac      	ldr	r4, [r5, #8]
 8009540:	e7df      	b.n	8009502 <_fflush_r+0x22>
 8009542:	4b04      	ldr	r3, [pc, #16]	; (8009554 <_fflush_r+0x74>)
 8009544:	429c      	cmp	r4, r3
 8009546:	bf08      	it	eq
 8009548:	68ec      	ldreq	r4, [r5, #12]
 800954a:	e7da      	b.n	8009502 <_fflush_r+0x22>
 800954c:	0800a79c 	.word	0x0800a79c
 8009550:	0800a7bc 	.word	0x0800a7bc
 8009554:	0800a77c 	.word	0x0800a77c

08009558 <fflush>:
 8009558:	4601      	mov	r1, r0
 800955a:	b920      	cbnz	r0, 8009566 <fflush+0xe>
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <fflush+0x18>)
 800955e:	4905      	ldr	r1, [pc, #20]	; (8009574 <fflush+0x1c>)
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	f000 b8e1 	b.w	8009728 <_fwalk_reent>
 8009566:	4b04      	ldr	r3, [pc, #16]	; (8009578 <fflush+0x20>)
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f7ff bfb9 	b.w	80094e0 <_fflush_r>
 800956e:	bf00      	nop
 8009570:	0800a7dc 	.word	0x0800a7dc
 8009574:	080094e1 	.word	0x080094e1
 8009578:	20000024 	.word	0x20000024

0800957c <std>:
 800957c:	2300      	movs	r3, #0
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	e9c0 3300 	strd	r3, r3, [r0]
 8009586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800958a:	6083      	str	r3, [r0, #8]
 800958c:	8181      	strh	r1, [r0, #12]
 800958e:	6643      	str	r3, [r0, #100]	; 0x64
 8009590:	81c2      	strh	r2, [r0, #14]
 8009592:	6183      	str	r3, [r0, #24]
 8009594:	4619      	mov	r1, r3
 8009596:	2208      	movs	r2, #8
 8009598:	305c      	adds	r0, #92	; 0x5c
 800959a:	f000 f91a 	bl	80097d2 <memset>
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <std+0x38>)
 80095a0:	6263      	str	r3, [r4, #36]	; 0x24
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x3c>)
 80095a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <std+0x40>)
 80095a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x44>)
 80095ac:	6224      	str	r4, [r4, #32]
 80095ae:	6323      	str	r3, [r4, #48]	; 0x30
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	08009aa1 	.word	0x08009aa1
 80095b8:	08009ac3 	.word	0x08009ac3
 80095bc:	08009afb 	.word	0x08009afb
 80095c0:	08009b1f 	.word	0x08009b1f

080095c4 <_cleanup_r>:
 80095c4:	4901      	ldr	r1, [pc, #4]	; (80095cc <_cleanup_r+0x8>)
 80095c6:	f000 b8af 	b.w	8009728 <_fwalk_reent>
 80095ca:	bf00      	nop
 80095cc:	080094e1 	.word	0x080094e1

080095d0 <__sfmoreglue>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	1e4a      	subs	r2, r1, #1
 80095d4:	2568      	movs	r5, #104	; 0x68
 80095d6:	4355      	muls	r5, r2
 80095d8:	460e      	mov	r6, r1
 80095da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095de:	f000 f951 	bl	8009884 <_malloc_r>
 80095e2:	4604      	mov	r4, r0
 80095e4:	b140      	cbz	r0, 80095f8 <__sfmoreglue+0x28>
 80095e6:	2100      	movs	r1, #0
 80095e8:	e9c0 1600 	strd	r1, r6, [r0]
 80095ec:	300c      	adds	r0, #12
 80095ee:	60a0      	str	r0, [r4, #8]
 80095f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095f4:	f000 f8ed 	bl	80097d2 <memset>
 80095f8:	4620      	mov	r0, r4
 80095fa:	bd70      	pop	{r4, r5, r6, pc}

080095fc <__sfp_lock_acquire>:
 80095fc:	4801      	ldr	r0, [pc, #4]	; (8009604 <__sfp_lock_acquire+0x8>)
 80095fe:	f000 b8d8 	b.w	80097b2 <__retarget_lock_acquire_recursive>
 8009602:	bf00      	nop
 8009604:	200008fc 	.word	0x200008fc

08009608 <__sfp_lock_release>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__sfp_lock_release+0x8>)
 800960a:	f000 b8d3 	b.w	80097b4 <__retarget_lock_release_recursive>
 800960e:	bf00      	nop
 8009610:	200008fc 	.word	0x200008fc

08009614 <__sinit_lock_acquire>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__sinit_lock_acquire+0x8>)
 8009616:	f000 b8cc 	b.w	80097b2 <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	200008f7 	.word	0x200008f7

08009620 <__sinit_lock_release>:
 8009620:	4801      	ldr	r0, [pc, #4]	; (8009628 <__sinit_lock_release+0x8>)
 8009622:	f000 b8c7 	b.w	80097b4 <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	200008f7 	.word	0x200008f7

0800962c <__sinit>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	f7ff fff0 	bl	8009614 <__sinit_lock_acquire>
 8009634:	69a3      	ldr	r3, [r4, #24]
 8009636:	b11b      	cbz	r3, 8009640 <__sinit+0x14>
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f7ff bff0 	b.w	8009620 <__sinit_lock_release>
 8009640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009644:	6523      	str	r3, [r4, #80]	; 0x50
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <__sinit+0x68>)
 8009648:	4a13      	ldr	r2, [pc, #76]	; (8009698 <__sinit+0x6c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	62a2      	str	r2, [r4, #40]	; 0x28
 800964e:	42a3      	cmp	r3, r4
 8009650:	bf04      	itt	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	61a3      	streq	r3, [r4, #24]
 8009656:	4620      	mov	r0, r4
 8009658:	f000 f820 	bl	800969c <__sfp>
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f81c 	bl	800969c <__sfp>
 8009664:	60a0      	str	r0, [r4, #8]
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f818 	bl	800969c <__sfp>
 800966c:	2200      	movs	r2, #0
 800966e:	60e0      	str	r0, [r4, #12]
 8009670:	2104      	movs	r1, #4
 8009672:	6860      	ldr	r0, [r4, #4]
 8009674:	f7ff ff82 	bl	800957c <std>
 8009678:	68a0      	ldr	r0, [r4, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	2109      	movs	r1, #9
 800967e:	f7ff ff7d 	bl	800957c <std>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	2202      	movs	r2, #2
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff ff78 	bl	800957c <std>
 800968c:	2301      	movs	r3, #1
 800968e:	61a3      	str	r3, [r4, #24]
 8009690:	e7d2      	b.n	8009638 <__sinit+0xc>
 8009692:	bf00      	nop
 8009694:	0800a7dc 	.word	0x0800a7dc
 8009698:	080095c5 	.word	0x080095c5

0800969c <__sfp>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	4607      	mov	r7, r0
 80096a0:	f7ff ffac 	bl	80095fc <__sfp_lock_acquire>
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <__sfp+0x84>)
 80096a6:	681e      	ldr	r6, [r3, #0]
 80096a8:	69b3      	ldr	r3, [r6, #24]
 80096aa:	b913      	cbnz	r3, 80096b2 <__sfp+0x16>
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff ffbd 	bl	800962c <__sinit>
 80096b2:	3648      	adds	r6, #72	; 0x48
 80096b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	d503      	bpl.n	80096c4 <__sfp+0x28>
 80096bc:	6833      	ldr	r3, [r6, #0]
 80096be:	b30b      	cbz	r3, 8009704 <__sfp+0x68>
 80096c0:	6836      	ldr	r6, [r6, #0]
 80096c2:	e7f7      	b.n	80096b4 <__sfp+0x18>
 80096c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096c8:	b9d5      	cbnz	r5, 8009700 <__sfp+0x64>
 80096ca:	4b16      	ldr	r3, [pc, #88]	; (8009724 <__sfp+0x88>)
 80096cc:	60e3      	str	r3, [r4, #12]
 80096ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096d2:	6665      	str	r5, [r4, #100]	; 0x64
 80096d4:	f000 f86c 	bl	80097b0 <__retarget_lock_init_recursive>
 80096d8:	f7ff ff96 	bl	8009608 <__sfp_lock_release>
 80096dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096e4:	6025      	str	r5, [r4, #0]
 80096e6:	61a5      	str	r5, [r4, #24]
 80096e8:	2208      	movs	r2, #8
 80096ea:	4629      	mov	r1, r5
 80096ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f0:	f000 f86f 	bl	80097d2 <memset>
 80096f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096fc:	4620      	mov	r0, r4
 80096fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009700:	3468      	adds	r4, #104	; 0x68
 8009702:	e7d9      	b.n	80096b8 <__sfp+0x1c>
 8009704:	2104      	movs	r1, #4
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff ff62 	bl	80095d0 <__sfmoreglue>
 800970c:	4604      	mov	r4, r0
 800970e:	6030      	str	r0, [r6, #0]
 8009710:	2800      	cmp	r0, #0
 8009712:	d1d5      	bne.n	80096c0 <__sfp+0x24>
 8009714:	f7ff ff78 	bl	8009608 <__sfp_lock_release>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	e7ee      	b.n	80096fc <__sfp+0x60>
 800971e:	bf00      	nop
 8009720:	0800a7dc 	.word	0x0800a7dc
 8009724:	ffff0001 	.word	0xffff0001

08009728 <_fwalk_reent>:
 8009728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800972c:	4606      	mov	r6, r0
 800972e:	4688      	mov	r8, r1
 8009730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009734:	2700      	movs	r7, #0
 8009736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973a:	f1b9 0901 	subs.w	r9, r9, #1
 800973e:	d505      	bpl.n	800974c <_fwalk_reent+0x24>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1f7      	bne.n	8009736 <_fwalk_reent+0xe>
 8009746:	4638      	mov	r0, r7
 8009748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d907      	bls.n	8009762 <_fwalk_reent+0x3a>
 8009752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009756:	3301      	adds	r3, #1
 8009758:	d003      	beq.n	8009762 <_fwalk_reent+0x3a>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	47c0      	blx	r8
 8009760:	4307      	orrs	r7, r0
 8009762:	3568      	adds	r5, #104	; 0x68
 8009764:	e7e9      	b.n	800973a <_fwalk_reent+0x12>
	...

08009768 <__libc_init_array>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4d0d      	ldr	r5, [pc, #52]	; (80097a0 <__libc_init_array+0x38>)
 800976c:	4c0d      	ldr	r4, [pc, #52]	; (80097a4 <__libc_init_array+0x3c>)
 800976e:	1b64      	subs	r4, r4, r5
 8009770:	10a4      	asrs	r4, r4, #2
 8009772:	2600      	movs	r6, #0
 8009774:	42a6      	cmp	r6, r4
 8009776:	d109      	bne.n	800978c <__libc_init_array+0x24>
 8009778:	4d0b      	ldr	r5, [pc, #44]	; (80097a8 <__libc_init_array+0x40>)
 800977a:	4c0c      	ldr	r4, [pc, #48]	; (80097ac <__libc_init_array+0x44>)
 800977c:	f000 fea2 	bl	800a4c4 <_init>
 8009780:	1b64      	subs	r4, r4, r5
 8009782:	10a4      	asrs	r4, r4, #2
 8009784:	2600      	movs	r6, #0
 8009786:	42a6      	cmp	r6, r4
 8009788:	d105      	bne.n	8009796 <__libc_init_array+0x2e>
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009790:	4798      	blx	r3
 8009792:	3601      	adds	r6, #1
 8009794:	e7ee      	b.n	8009774 <__libc_init_array+0xc>
 8009796:	f855 3b04 	ldr.w	r3, [r5], #4
 800979a:	4798      	blx	r3
 800979c:	3601      	adds	r6, #1
 800979e:	e7f2      	b.n	8009786 <__libc_init_array+0x1e>
 80097a0:	0800a81c 	.word	0x0800a81c
 80097a4:	0800a81c 	.word	0x0800a81c
 80097a8:	0800a81c 	.word	0x0800a81c
 80097ac:	0800a820 	.word	0x0800a820

080097b0 <__retarget_lock_init_recursive>:
 80097b0:	4770      	bx	lr

080097b2 <__retarget_lock_acquire_recursive>:
 80097b2:	4770      	bx	lr

080097b4 <__retarget_lock_release_recursive>:
 80097b4:	4770      	bx	lr

080097b6 <memcpy>:
 80097b6:	440a      	add	r2, r1
 80097b8:	4291      	cmp	r1, r2
 80097ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80097be:	d100      	bne.n	80097c2 <memcpy+0xc>
 80097c0:	4770      	bx	lr
 80097c2:	b510      	push	{r4, lr}
 80097c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097cc:	4291      	cmp	r1, r2
 80097ce:	d1f9      	bne.n	80097c4 <memcpy+0xe>
 80097d0:	bd10      	pop	{r4, pc}

080097d2 <memset>:
 80097d2:	4402      	add	r2, r0
 80097d4:	4603      	mov	r3, r0
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d100      	bne.n	80097dc <memset+0xa>
 80097da:	4770      	bx	lr
 80097dc:	f803 1b01 	strb.w	r1, [r3], #1
 80097e0:	e7f9      	b.n	80097d6 <memset+0x4>
	...

080097e4 <_free_r>:
 80097e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d048      	beq.n	800987c <_free_r+0x98>
 80097ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f1a1 0404 	sub.w	r4, r1, #4
 80097f6:	bfb8      	it	lt
 80097f8:	18e4      	addlt	r4, r4, r3
 80097fa:	f000 faed 	bl	8009dd8 <__malloc_lock>
 80097fe:	4a20      	ldr	r2, [pc, #128]	; (8009880 <_free_r+0x9c>)
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	4615      	mov	r5, r2
 8009806:	b933      	cbnz	r3, 8009816 <_free_r+0x32>
 8009808:	6063      	str	r3, [r4, #4]
 800980a:	6014      	str	r4, [r2, #0]
 800980c:	b003      	add	sp, #12
 800980e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009812:	f000 bae7 	b.w	8009de4 <__malloc_unlock>
 8009816:	42a3      	cmp	r3, r4
 8009818:	d90b      	bls.n	8009832 <_free_r+0x4e>
 800981a:	6821      	ldr	r1, [r4, #0]
 800981c:	1862      	adds	r2, r4, r1
 800981e:	4293      	cmp	r3, r2
 8009820:	bf04      	itt	eq
 8009822:	681a      	ldreq	r2, [r3, #0]
 8009824:	685b      	ldreq	r3, [r3, #4]
 8009826:	6063      	str	r3, [r4, #4]
 8009828:	bf04      	itt	eq
 800982a:	1852      	addeq	r2, r2, r1
 800982c:	6022      	streq	r2, [r4, #0]
 800982e:	602c      	str	r4, [r5, #0]
 8009830:	e7ec      	b.n	800980c <_free_r+0x28>
 8009832:	461a      	mov	r2, r3
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	b10b      	cbz	r3, 800983c <_free_r+0x58>
 8009838:	42a3      	cmp	r3, r4
 800983a:	d9fa      	bls.n	8009832 <_free_r+0x4e>
 800983c:	6811      	ldr	r1, [r2, #0]
 800983e:	1855      	adds	r5, r2, r1
 8009840:	42a5      	cmp	r5, r4
 8009842:	d10b      	bne.n	800985c <_free_r+0x78>
 8009844:	6824      	ldr	r4, [r4, #0]
 8009846:	4421      	add	r1, r4
 8009848:	1854      	adds	r4, r2, r1
 800984a:	42a3      	cmp	r3, r4
 800984c:	6011      	str	r1, [r2, #0]
 800984e:	d1dd      	bne.n	800980c <_free_r+0x28>
 8009850:	681c      	ldr	r4, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	6053      	str	r3, [r2, #4]
 8009856:	4421      	add	r1, r4
 8009858:	6011      	str	r1, [r2, #0]
 800985a:	e7d7      	b.n	800980c <_free_r+0x28>
 800985c:	d902      	bls.n	8009864 <_free_r+0x80>
 800985e:	230c      	movs	r3, #12
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	e7d3      	b.n	800980c <_free_r+0x28>
 8009864:	6825      	ldr	r5, [r4, #0]
 8009866:	1961      	adds	r1, r4, r5
 8009868:	428b      	cmp	r3, r1
 800986a:	bf04      	itt	eq
 800986c:	6819      	ldreq	r1, [r3, #0]
 800986e:	685b      	ldreq	r3, [r3, #4]
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	bf04      	itt	eq
 8009874:	1949      	addeq	r1, r1, r5
 8009876:	6021      	streq	r1, [r4, #0]
 8009878:	6054      	str	r4, [r2, #4]
 800987a:	e7c7      	b.n	800980c <_free_r+0x28>
 800987c:	b003      	add	sp, #12
 800987e:	bd30      	pop	{r4, r5, pc}
 8009880:	200004c4 	.word	0x200004c4

08009884 <_malloc_r>:
 8009884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009886:	1ccd      	adds	r5, r1, #3
 8009888:	f025 0503 	bic.w	r5, r5, #3
 800988c:	3508      	adds	r5, #8
 800988e:	2d0c      	cmp	r5, #12
 8009890:	bf38      	it	cc
 8009892:	250c      	movcc	r5, #12
 8009894:	2d00      	cmp	r5, #0
 8009896:	4606      	mov	r6, r0
 8009898:	db01      	blt.n	800989e <_malloc_r+0x1a>
 800989a:	42a9      	cmp	r1, r5
 800989c:	d903      	bls.n	80098a6 <_malloc_r+0x22>
 800989e:	230c      	movs	r3, #12
 80098a0:	6033      	str	r3, [r6, #0]
 80098a2:	2000      	movs	r0, #0
 80098a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a6:	f000 fa97 	bl	8009dd8 <__malloc_lock>
 80098aa:	4921      	ldr	r1, [pc, #132]	; (8009930 <_malloc_r+0xac>)
 80098ac:	680a      	ldr	r2, [r1, #0]
 80098ae:	4614      	mov	r4, r2
 80098b0:	b99c      	cbnz	r4, 80098da <_malloc_r+0x56>
 80098b2:	4f20      	ldr	r7, [pc, #128]	; (8009934 <_malloc_r+0xb0>)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	b923      	cbnz	r3, 80098c2 <_malloc_r+0x3e>
 80098b8:	4621      	mov	r1, r4
 80098ba:	4630      	mov	r0, r6
 80098bc:	f000 f8e0 	bl	8009a80 <_sbrk_r>
 80098c0:	6038      	str	r0, [r7, #0]
 80098c2:	4629      	mov	r1, r5
 80098c4:	4630      	mov	r0, r6
 80098c6:	f000 f8db 	bl	8009a80 <_sbrk_r>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d123      	bne.n	8009916 <_malloc_r+0x92>
 80098ce:	230c      	movs	r3, #12
 80098d0:	6033      	str	r3, [r6, #0]
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 fa86 	bl	8009de4 <__malloc_unlock>
 80098d8:	e7e3      	b.n	80098a2 <_malloc_r+0x1e>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	1b5b      	subs	r3, r3, r5
 80098de:	d417      	bmi.n	8009910 <_malloc_r+0x8c>
 80098e0:	2b0b      	cmp	r3, #11
 80098e2:	d903      	bls.n	80098ec <_malloc_r+0x68>
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	441c      	add	r4, r3
 80098e8:	6025      	str	r5, [r4, #0]
 80098ea:	e004      	b.n	80098f6 <_malloc_r+0x72>
 80098ec:	6863      	ldr	r3, [r4, #4]
 80098ee:	42a2      	cmp	r2, r4
 80098f0:	bf0c      	ite	eq
 80098f2:	600b      	streq	r3, [r1, #0]
 80098f4:	6053      	strne	r3, [r2, #4]
 80098f6:	4630      	mov	r0, r6
 80098f8:	f000 fa74 	bl	8009de4 <__malloc_unlock>
 80098fc:	f104 000b 	add.w	r0, r4, #11
 8009900:	1d23      	adds	r3, r4, #4
 8009902:	f020 0007 	bic.w	r0, r0, #7
 8009906:	1ac2      	subs	r2, r0, r3
 8009908:	d0cc      	beq.n	80098a4 <_malloc_r+0x20>
 800990a:	1a1b      	subs	r3, r3, r0
 800990c:	50a3      	str	r3, [r4, r2]
 800990e:	e7c9      	b.n	80098a4 <_malloc_r+0x20>
 8009910:	4622      	mov	r2, r4
 8009912:	6864      	ldr	r4, [r4, #4]
 8009914:	e7cc      	b.n	80098b0 <_malloc_r+0x2c>
 8009916:	1cc4      	adds	r4, r0, #3
 8009918:	f024 0403 	bic.w	r4, r4, #3
 800991c:	42a0      	cmp	r0, r4
 800991e:	d0e3      	beq.n	80098e8 <_malloc_r+0x64>
 8009920:	1a21      	subs	r1, r4, r0
 8009922:	4630      	mov	r0, r6
 8009924:	f000 f8ac 	bl	8009a80 <_sbrk_r>
 8009928:	3001      	adds	r0, #1
 800992a:	d1dd      	bne.n	80098e8 <_malloc_r+0x64>
 800992c:	e7cf      	b.n	80098ce <_malloc_r+0x4a>
 800992e:	bf00      	nop
 8009930:	200004c4 	.word	0x200004c4
 8009934:	200004c8 	.word	0x200004c8

08009938 <iprintf>:
 8009938:	b40f      	push	{r0, r1, r2, r3}
 800993a:	4b0a      	ldr	r3, [pc, #40]	; (8009964 <iprintf+0x2c>)
 800993c:	b513      	push	{r0, r1, r4, lr}
 800993e:	681c      	ldr	r4, [r3, #0]
 8009940:	b124      	cbz	r4, 800994c <iprintf+0x14>
 8009942:	69a3      	ldr	r3, [r4, #24]
 8009944:	b913      	cbnz	r3, 800994c <iprintf+0x14>
 8009946:	4620      	mov	r0, r4
 8009948:	f7ff fe70 	bl	800962c <__sinit>
 800994c:	ab05      	add	r3, sp, #20
 800994e:	9a04      	ldr	r2, [sp, #16]
 8009950:	68a1      	ldr	r1, [r4, #8]
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	4620      	mov	r0, r4
 8009956:	f000 fa75 	bl	8009e44 <_vfiprintf_r>
 800995a:	b002      	add	sp, #8
 800995c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009960:	b004      	add	sp, #16
 8009962:	4770      	bx	lr
 8009964:	20000024 	.word	0x20000024

08009968 <putchar>:
 8009968:	4b09      	ldr	r3, [pc, #36]	; (8009990 <putchar+0x28>)
 800996a:	b513      	push	{r0, r1, r4, lr}
 800996c:	681c      	ldr	r4, [r3, #0]
 800996e:	4601      	mov	r1, r0
 8009970:	b134      	cbz	r4, 8009980 <putchar+0x18>
 8009972:	69a3      	ldr	r3, [r4, #24]
 8009974:	b923      	cbnz	r3, 8009980 <putchar+0x18>
 8009976:	9001      	str	r0, [sp, #4]
 8009978:	4620      	mov	r0, r4
 800997a:	f7ff fe57 	bl	800962c <__sinit>
 800997e:	9901      	ldr	r1, [sp, #4]
 8009980:	68a2      	ldr	r2, [r4, #8]
 8009982:	4620      	mov	r0, r4
 8009984:	b002      	add	sp, #8
 8009986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998a:	f000 bd1f 	b.w	800a3cc <_putc_r>
 800998e:	bf00      	nop
 8009990:	20000024 	.word	0x20000024

08009994 <_puts_r>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	460e      	mov	r6, r1
 8009998:	4605      	mov	r5, r0
 800999a:	b118      	cbz	r0, 80099a4 <_puts_r+0x10>
 800999c:	6983      	ldr	r3, [r0, #24]
 800999e:	b90b      	cbnz	r3, 80099a4 <_puts_r+0x10>
 80099a0:	f7ff fe44 	bl	800962c <__sinit>
 80099a4:	69ab      	ldr	r3, [r5, #24]
 80099a6:	68ac      	ldr	r4, [r5, #8]
 80099a8:	b913      	cbnz	r3, 80099b0 <_puts_r+0x1c>
 80099aa:	4628      	mov	r0, r5
 80099ac:	f7ff fe3e 	bl	800962c <__sinit>
 80099b0:	4b2c      	ldr	r3, [pc, #176]	; (8009a64 <_puts_r+0xd0>)
 80099b2:	429c      	cmp	r4, r3
 80099b4:	d120      	bne.n	80099f8 <_puts_r+0x64>
 80099b6:	686c      	ldr	r4, [r5, #4]
 80099b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099ba:	07db      	lsls	r3, r3, #31
 80099bc:	d405      	bmi.n	80099ca <_puts_r+0x36>
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	0598      	lsls	r0, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_puts_r+0x36>
 80099c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c6:	f7ff fef4 	bl	80097b2 <__retarget_lock_acquire_recursive>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	0719      	lsls	r1, r3, #28
 80099ce:	d51d      	bpl.n	8009a0c <_puts_r+0x78>
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b1db      	cbz	r3, 8009a0c <_puts_r+0x78>
 80099d4:	3e01      	subs	r6, #1
 80099d6:	68a3      	ldr	r3, [r4, #8]
 80099d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099dc:	3b01      	subs	r3, #1
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	bb39      	cbnz	r1, 8009a32 <_puts_r+0x9e>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	da38      	bge.n	8009a58 <_puts_r+0xc4>
 80099e6:	4622      	mov	r2, r4
 80099e8:	210a      	movs	r1, #10
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 f89c 	bl	8009b28 <__swbuf_r>
 80099f0:	3001      	adds	r0, #1
 80099f2:	d011      	beq.n	8009a18 <_puts_r+0x84>
 80099f4:	250a      	movs	r5, #10
 80099f6:	e011      	b.n	8009a1c <_puts_r+0x88>
 80099f8:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <_puts_r+0xd4>)
 80099fa:	429c      	cmp	r4, r3
 80099fc:	d101      	bne.n	8009a02 <_puts_r+0x6e>
 80099fe:	68ac      	ldr	r4, [r5, #8]
 8009a00:	e7da      	b.n	80099b8 <_puts_r+0x24>
 8009a02:	4b1a      	ldr	r3, [pc, #104]	; (8009a6c <_puts_r+0xd8>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	bf08      	it	eq
 8009a08:	68ec      	ldreq	r4, [r5, #12]
 8009a0a:	e7d5      	b.n	80099b8 <_puts_r+0x24>
 8009a0c:	4621      	mov	r1, r4
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f8ee 	bl	8009bf0 <__swsetup_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0dd      	beq.n	80099d4 <_puts_r+0x40>
 8009a18:	f04f 35ff 	mov.w	r5, #4294967295
 8009a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a1e:	07da      	lsls	r2, r3, #31
 8009a20:	d405      	bmi.n	8009a2e <_puts_r+0x9a>
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	059b      	lsls	r3, r3, #22
 8009a26:	d402      	bmi.n	8009a2e <_puts_r+0x9a>
 8009a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a2a:	f7ff fec3 	bl	80097b4 <__retarget_lock_release_recursive>
 8009a2e:	4628      	mov	r0, r5
 8009a30:	bd70      	pop	{r4, r5, r6, pc}
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	da04      	bge.n	8009a40 <_puts_r+0xac>
 8009a36:	69a2      	ldr	r2, [r4, #24]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	dc06      	bgt.n	8009a4a <_puts_r+0xb6>
 8009a3c:	290a      	cmp	r1, #10
 8009a3e:	d004      	beq.n	8009a4a <_puts_r+0xb6>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	6022      	str	r2, [r4, #0]
 8009a46:	7019      	strb	r1, [r3, #0]
 8009a48:	e7c5      	b.n	80099d6 <_puts_r+0x42>
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f000 f86b 	bl	8009b28 <__swbuf_r>
 8009a52:	3001      	adds	r0, #1
 8009a54:	d1bf      	bne.n	80099d6 <_puts_r+0x42>
 8009a56:	e7df      	b.n	8009a18 <_puts_r+0x84>
 8009a58:	6823      	ldr	r3, [r4, #0]
 8009a5a:	250a      	movs	r5, #10
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	701d      	strb	r5, [r3, #0]
 8009a62:	e7db      	b.n	8009a1c <_puts_r+0x88>
 8009a64:	0800a79c 	.word	0x0800a79c
 8009a68:	0800a7bc 	.word	0x0800a7bc
 8009a6c:	0800a77c 	.word	0x0800a77c

08009a70 <puts>:
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <puts+0xc>)
 8009a72:	4601      	mov	r1, r0
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	f7ff bf8d 	b.w	8009994 <_puts_r>
 8009a7a:	bf00      	nop
 8009a7c:	20000024 	.word	0x20000024

08009a80 <_sbrk_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d06      	ldr	r5, [pc, #24]	; (8009a9c <_sbrk_r+0x1c>)
 8009a84:	2300      	movs	r3, #0
 8009a86:	4604      	mov	r4, r0
 8009a88:	4608      	mov	r0, r1
 8009a8a:	602b      	str	r3, [r5, #0]
 8009a8c:	f7f8 fbb6 	bl	80021fc <_sbrk>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_sbrk_r+0x1a>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_sbrk_r+0x1a>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	20000900 	.word	0x20000900

08009aa0 <__sread>:
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	460c      	mov	r4, r1
 8009aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa8:	f000 fcd8 	bl	800a45c <_read_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	bfab      	itete	ge
 8009ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ab4:	181b      	addge	r3, r3, r0
 8009ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009aba:	bfac      	ite	ge
 8009abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009abe:	81a3      	strhlt	r3, [r4, #12]
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <__swrite>:
 8009ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	461f      	mov	r7, r3
 8009ac8:	898b      	ldrh	r3, [r1, #12]
 8009aca:	05db      	lsls	r3, r3, #23
 8009acc:	4605      	mov	r5, r0
 8009ace:	460c      	mov	r4, r1
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	d505      	bpl.n	8009ae0 <__swrite+0x1e>
 8009ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad8:	2302      	movs	r3, #2
 8009ada:	2200      	movs	r2, #0
 8009adc:	f000 f906 	bl	8009cec <_lseek_r>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	4632      	mov	r2, r6
 8009aee:	463b      	mov	r3, r7
 8009af0:	4628      	mov	r0, r5
 8009af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af6:	f000 b869 	b.w	8009bcc <_write_r>

08009afa <__sseek>:
 8009afa:	b510      	push	{r4, lr}
 8009afc:	460c      	mov	r4, r1
 8009afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b02:	f000 f8f3 	bl	8009cec <_lseek_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	89a3      	ldrh	r3, [r4, #12]
 8009b0a:	bf15      	itete	ne
 8009b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b16:	81a3      	strheq	r3, [r4, #12]
 8009b18:	bf18      	it	ne
 8009b1a:	81a3      	strhne	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__sclose>:
 8009b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b22:	f000 b8d3 	b.w	8009ccc <_close_r>
	...

08009b28 <__swbuf_r>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	460e      	mov	r6, r1
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	4605      	mov	r5, r0
 8009b30:	b118      	cbz	r0, 8009b3a <__swbuf_r+0x12>
 8009b32:	6983      	ldr	r3, [r0, #24]
 8009b34:	b90b      	cbnz	r3, 8009b3a <__swbuf_r+0x12>
 8009b36:	f7ff fd79 	bl	800962c <__sinit>
 8009b3a:	4b21      	ldr	r3, [pc, #132]	; (8009bc0 <__swbuf_r+0x98>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	d12b      	bne.n	8009b98 <__swbuf_r+0x70>
 8009b40:	686c      	ldr	r4, [r5, #4]
 8009b42:	69a3      	ldr	r3, [r4, #24]
 8009b44:	60a3      	str	r3, [r4, #8]
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	071a      	lsls	r2, r3, #28
 8009b4a:	d52f      	bpl.n	8009bac <__swbuf_r+0x84>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	b36b      	cbz	r3, 8009bac <__swbuf_r+0x84>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	1ac0      	subs	r0, r0, r3
 8009b56:	6963      	ldr	r3, [r4, #20]
 8009b58:	b2f6      	uxtb	r6, r6
 8009b5a:	4283      	cmp	r3, r0
 8009b5c:	4637      	mov	r7, r6
 8009b5e:	dc04      	bgt.n	8009b6a <__swbuf_r+0x42>
 8009b60:	4621      	mov	r1, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f7ff fcbc 	bl	80094e0 <_fflush_r>
 8009b68:	bb30      	cbnz	r0, 8009bb8 <__swbuf_r+0x90>
 8009b6a:	68a3      	ldr	r3, [r4, #8]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	60a3      	str	r3, [r4, #8]
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	6022      	str	r2, [r4, #0]
 8009b76:	701e      	strb	r6, [r3, #0]
 8009b78:	6963      	ldr	r3, [r4, #20]
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	4283      	cmp	r3, r0
 8009b7e:	d004      	beq.n	8009b8a <__swbuf_r+0x62>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	07db      	lsls	r3, r3, #31
 8009b84:	d506      	bpl.n	8009b94 <__swbuf_r+0x6c>
 8009b86:	2e0a      	cmp	r6, #10
 8009b88:	d104      	bne.n	8009b94 <__swbuf_r+0x6c>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	f7ff fca7 	bl	80094e0 <_fflush_r>
 8009b92:	b988      	cbnz	r0, 8009bb8 <__swbuf_r+0x90>
 8009b94:	4638      	mov	r0, r7
 8009b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <__swbuf_r+0x9c>)
 8009b9a:	429c      	cmp	r4, r3
 8009b9c:	d101      	bne.n	8009ba2 <__swbuf_r+0x7a>
 8009b9e:	68ac      	ldr	r4, [r5, #8]
 8009ba0:	e7cf      	b.n	8009b42 <__swbuf_r+0x1a>
 8009ba2:	4b09      	ldr	r3, [pc, #36]	; (8009bc8 <__swbuf_r+0xa0>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	bf08      	it	eq
 8009ba8:	68ec      	ldreq	r4, [r5, #12]
 8009baa:	e7ca      	b.n	8009b42 <__swbuf_r+0x1a>
 8009bac:	4621      	mov	r1, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 f81e 	bl	8009bf0 <__swsetup_r>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d0cb      	beq.n	8009b50 <__swbuf_r+0x28>
 8009bb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009bbc:	e7ea      	b.n	8009b94 <__swbuf_r+0x6c>
 8009bbe:	bf00      	nop
 8009bc0:	0800a79c 	.word	0x0800a79c
 8009bc4:	0800a7bc 	.word	0x0800a7bc
 8009bc8:	0800a77c 	.word	0x0800a77c

08009bcc <_write_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d07      	ldr	r5, [pc, #28]	; (8009bec <_write_r+0x20>)
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	4608      	mov	r0, r1
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	602a      	str	r2, [r5, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f7f8 fabd 	bl	800215a <_write>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d102      	bne.n	8009bea <_write_r+0x1e>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	b103      	cbz	r3, 8009bea <_write_r+0x1e>
 8009be8:	6023      	str	r3, [r4, #0]
 8009bea:	bd38      	pop	{r3, r4, r5, pc}
 8009bec:	20000900 	.word	0x20000900

08009bf0 <__swsetup_r>:
 8009bf0:	4b32      	ldr	r3, [pc, #200]	; (8009cbc <__swsetup_r+0xcc>)
 8009bf2:	b570      	push	{r4, r5, r6, lr}
 8009bf4:	681d      	ldr	r5, [r3, #0]
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	b125      	cbz	r5, 8009c06 <__swsetup_r+0x16>
 8009bfc:	69ab      	ldr	r3, [r5, #24]
 8009bfe:	b913      	cbnz	r3, 8009c06 <__swsetup_r+0x16>
 8009c00:	4628      	mov	r0, r5
 8009c02:	f7ff fd13 	bl	800962c <__sinit>
 8009c06:	4b2e      	ldr	r3, [pc, #184]	; (8009cc0 <__swsetup_r+0xd0>)
 8009c08:	429c      	cmp	r4, r3
 8009c0a:	d10f      	bne.n	8009c2c <__swsetup_r+0x3c>
 8009c0c:	686c      	ldr	r4, [r5, #4]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c14:	0719      	lsls	r1, r3, #28
 8009c16:	d42c      	bmi.n	8009c72 <__swsetup_r+0x82>
 8009c18:	06dd      	lsls	r5, r3, #27
 8009c1a:	d411      	bmi.n	8009c40 <__swsetup_r+0x50>
 8009c1c:	2309      	movs	r3, #9
 8009c1e:	6033      	str	r3, [r6, #0]
 8009c20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2a:	e03e      	b.n	8009caa <__swsetup_r+0xba>
 8009c2c:	4b25      	ldr	r3, [pc, #148]	; (8009cc4 <__swsetup_r+0xd4>)
 8009c2e:	429c      	cmp	r4, r3
 8009c30:	d101      	bne.n	8009c36 <__swsetup_r+0x46>
 8009c32:	68ac      	ldr	r4, [r5, #8]
 8009c34:	e7eb      	b.n	8009c0e <__swsetup_r+0x1e>
 8009c36:	4b24      	ldr	r3, [pc, #144]	; (8009cc8 <__swsetup_r+0xd8>)
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	bf08      	it	eq
 8009c3c:	68ec      	ldreq	r4, [r5, #12]
 8009c3e:	e7e6      	b.n	8009c0e <__swsetup_r+0x1e>
 8009c40:	0758      	lsls	r0, r3, #29
 8009c42:	d512      	bpl.n	8009c6a <__swsetup_r+0x7a>
 8009c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c46:	b141      	cbz	r1, 8009c5a <__swsetup_r+0x6a>
 8009c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c4c:	4299      	cmp	r1, r3
 8009c4e:	d002      	beq.n	8009c56 <__swsetup_r+0x66>
 8009c50:	4630      	mov	r0, r6
 8009c52:	f7ff fdc7 	bl	80097e4 <_free_r>
 8009c56:	2300      	movs	r3, #0
 8009c58:	6363      	str	r3, [r4, #52]	; 0x34
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c60:	81a3      	strh	r3, [r4, #12]
 8009c62:	2300      	movs	r3, #0
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6923      	ldr	r3, [r4, #16]
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0308 	orr.w	r3, r3, #8
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	b94b      	cbnz	r3, 8009c8a <__swsetup_r+0x9a>
 8009c76:	89a3      	ldrh	r3, [r4, #12]
 8009c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c80:	d003      	beq.n	8009c8a <__swsetup_r+0x9a>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4630      	mov	r0, r6
 8009c86:	f000 f867 	bl	8009d58 <__smakebuf_r>
 8009c8a:	89a0      	ldrh	r0, [r4, #12]
 8009c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c90:	f010 0301 	ands.w	r3, r0, #1
 8009c94:	d00a      	beq.n	8009cac <__swsetup_r+0xbc>
 8009c96:	2300      	movs	r3, #0
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	6963      	ldr	r3, [r4, #20]
 8009c9c:	425b      	negs	r3, r3
 8009c9e:	61a3      	str	r3, [r4, #24]
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	b943      	cbnz	r3, 8009cb6 <__swsetup_r+0xc6>
 8009ca4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ca8:	d1ba      	bne.n	8009c20 <__swsetup_r+0x30>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0781      	lsls	r1, r0, #30
 8009cae:	bf58      	it	pl
 8009cb0:	6963      	ldrpl	r3, [r4, #20]
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	e7f4      	b.n	8009ca0 <__swsetup_r+0xb0>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e7f7      	b.n	8009caa <__swsetup_r+0xba>
 8009cba:	bf00      	nop
 8009cbc:	20000024 	.word	0x20000024
 8009cc0:	0800a79c 	.word	0x0800a79c
 8009cc4:	0800a7bc 	.word	0x0800a7bc
 8009cc8:	0800a77c 	.word	0x0800a77c

08009ccc <_close_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d06      	ldr	r5, [pc, #24]	; (8009ce8 <_close_r+0x1c>)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4604      	mov	r4, r0
 8009cd4:	4608      	mov	r0, r1
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	f7f8 fa5b 	bl	8002192 <_close>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_close_r+0x1a>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_close_r+0x1a>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20000900 	.word	0x20000900

08009cec <_lseek_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	; (8009d0c <_lseek_r+0x20>)
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7f8 fa70 	bl	80021e0 <_lseek>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_lseek_r+0x1e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_lseek_r+0x1e>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20000900 	.word	0x20000900

08009d10 <__swhatbuf_r>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	460e      	mov	r6, r1
 8009d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	b096      	sub	sp, #88	; 0x58
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	461d      	mov	r5, r3
 8009d20:	da07      	bge.n	8009d32 <__swhatbuf_r+0x22>
 8009d22:	2300      	movs	r3, #0
 8009d24:	602b      	str	r3, [r5, #0]
 8009d26:	89b3      	ldrh	r3, [r6, #12]
 8009d28:	061a      	lsls	r2, r3, #24
 8009d2a:	d410      	bmi.n	8009d4e <__swhatbuf_r+0x3e>
 8009d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d30:	e00e      	b.n	8009d50 <__swhatbuf_r+0x40>
 8009d32:	466a      	mov	r2, sp
 8009d34:	f000 fba4 	bl	800a480 <_fstat_r>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dbf2      	blt.n	8009d22 <__swhatbuf_r+0x12>
 8009d3c:	9a01      	ldr	r2, [sp, #4]
 8009d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d46:	425a      	negs	r2, r3
 8009d48:	415a      	adcs	r2, r3
 8009d4a:	602a      	str	r2, [r5, #0]
 8009d4c:	e7ee      	b.n	8009d2c <__swhatbuf_r+0x1c>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	2000      	movs	r0, #0
 8009d52:	6023      	str	r3, [r4, #0]
 8009d54:	b016      	add	sp, #88	; 0x58
 8009d56:	bd70      	pop	{r4, r5, r6, pc}

08009d58 <__smakebuf_r>:
 8009d58:	898b      	ldrh	r3, [r1, #12]
 8009d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d5c:	079d      	lsls	r5, r3, #30
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d507      	bpl.n	8009d74 <__smakebuf_r+0x1c>
 8009d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	6163      	str	r3, [r4, #20]
 8009d70:	b002      	add	sp, #8
 8009d72:	bd70      	pop	{r4, r5, r6, pc}
 8009d74:	ab01      	add	r3, sp, #4
 8009d76:	466a      	mov	r2, sp
 8009d78:	f7ff ffca 	bl	8009d10 <__swhatbuf_r>
 8009d7c:	9900      	ldr	r1, [sp, #0]
 8009d7e:	4605      	mov	r5, r0
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff fd7f 	bl	8009884 <_malloc_r>
 8009d86:	b948      	cbnz	r0, 8009d9c <__smakebuf_r+0x44>
 8009d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d8c:	059a      	lsls	r2, r3, #22
 8009d8e:	d4ef      	bmi.n	8009d70 <__smakebuf_r+0x18>
 8009d90:	f023 0303 	bic.w	r3, r3, #3
 8009d94:	f043 0302 	orr.w	r3, r3, #2
 8009d98:	81a3      	strh	r3, [r4, #12]
 8009d9a:	e7e3      	b.n	8009d64 <__smakebuf_r+0xc>
 8009d9c:	4b0d      	ldr	r3, [pc, #52]	; (8009dd4 <__smakebuf_r+0x7c>)
 8009d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	6020      	str	r0, [r4, #0]
 8009da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	6163      	str	r3, [r4, #20]
 8009dae:	9b01      	ldr	r3, [sp, #4]
 8009db0:	6120      	str	r0, [r4, #16]
 8009db2:	b15b      	cbz	r3, 8009dcc <__smakebuf_r+0x74>
 8009db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 fb73 	bl	800a4a4 <_isatty_r>
 8009dbe:	b128      	cbz	r0, 8009dcc <__smakebuf_r+0x74>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f023 0303 	bic.w	r3, r3, #3
 8009dc6:	f043 0301 	orr.w	r3, r3, #1
 8009dca:	81a3      	strh	r3, [r4, #12]
 8009dcc:	89a0      	ldrh	r0, [r4, #12]
 8009dce:	4305      	orrs	r5, r0
 8009dd0:	81a5      	strh	r5, [r4, #12]
 8009dd2:	e7cd      	b.n	8009d70 <__smakebuf_r+0x18>
 8009dd4:	080095c5 	.word	0x080095c5

08009dd8 <__malloc_lock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_lock+0x8>)
 8009dda:	f7ff bcea 	b.w	80097b2 <__retarget_lock_acquire_recursive>
 8009dde:	bf00      	nop
 8009de0:	200008f8 	.word	0x200008f8

08009de4 <__malloc_unlock>:
 8009de4:	4801      	ldr	r0, [pc, #4]	; (8009dec <__malloc_unlock+0x8>)
 8009de6:	f7ff bce5 	b.w	80097b4 <__retarget_lock_release_recursive>
 8009dea:	bf00      	nop
 8009dec:	200008f8 	.word	0x200008f8

08009df0 <__sfputc_r>:
 8009df0:	6893      	ldr	r3, [r2, #8]
 8009df2:	3b01      	subs	r3, #1
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	b410      	push	{r4}
 8009df8:	6093      	str	r3, [r2, #8]
 8009dfa:	da08      	bge.n	8009e0e <__sfputc_r+0x1e>
 8009dfc:	6994      	ldr	r4, [r2, #24]
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	db01      	blt.n	8009e06 <__sfputc_r+0x16>
 8009e02:	290a      	cmp	r1, #10
 8009e04:	d103      	bne.n	8009e0e <__sfputc_r+0x1e>
 8009e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e0a:	f7ff be8d 	b.w	8009b28 <__swbuf_r>
 8009e0e:	6813      	ldr	r3, [r2, #0]
 8009e10:	1c58      	adds	r0, r3, #1
 8009e12:	6010      	str	r0, [r2, #0]
 8009e14:	7019      	strb	r1, [r3, #0]
 8009e16:	4608      	mov	r0, r1
 8009e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <__sfputs_r>:
 8009e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	4614      	mov	r4, r2
 8009e26:	18d5      	adds	r5, r2, r3
 8009e28:	42ac      	cmp	r4, r5
 8009e2a:	d101      	bne.n	8009e30 <__sfputs_r+0x12>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e007      	b.n	8009e40 <__sfputs_r+0x22>
 8009e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e34:	463a      	mov	r2, r7
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff ffda 	bl	8009df0 <__sfputc_r>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d1f3      	bne.n	8009e28 <__sfputs_r+0xa>
 8009e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e44 <_vfiprintf_r>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	460d      	mov	r5, r1
 8009e4a:	b09d      	sub	sp, #116	; 0x74
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	4698      	mov	r8, r3
 8009e50:	4606      	mov	r6, r0
 8009e52:	b118      	cbz	r0, 8009e5c <_vfiprintf_r+0x18>
 8009e54:	6983      	ldr	r3, [r0, #24]
 8009e56:	b90b      	cbnz	r3, 8009e5c <_vfiprintf_r+0x18>
 8009e58:	f7ff fbe8 	bl	800962c <__sinit>
 8009e5c:	4b89      	ldr	r3, [pc, #548]	; (800a084 <_vfiprintf_r+0x240>)
 8009e5e:	429d      	cmp	r5, r3
 8009e60:	d11b      	bne.n	8009e9a <_vfiprintf_r+0x56>
 8009e62:	6875      	ldr	r5, [r6, #4]
 8009e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e66:	07d9      	lsls	r1, r3, #31
 8009e68:	d405      	bmi.n	8009e76 <_vfiprintf_r+0x32>
 8009e6a:	89ab      	ldrh	r3, [r5, #12]
 8009e6c:	059a      	lsls	r2, r3, #22
 8009e6e:	d402      	bmi.n	8009e76 <_vfiprintf_r+0x32>
 8009e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e72:	f7ff fc9e 	bl	80097b2 <__retarget_lock_acquire_recursive>
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	071b      	lsls	r3, r3, #28
 8009e7a:	d501      	bpl.n	8009e80 <_vfiprintf_r+0x3c>
 8009e7c:	692b      	ldr	r3, [r5, #16]
 8009e7e:	b9eb      	cbnz	r3, 8009ebc <_vfiprintf_r+0x78>
 8009e80:	4629      	mov	r1, r5
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff feb4 	bl	8009bf0 <__swsetup_r>
 8009e88:	b1c0      	cbz	r0, 8009ebc <_vfiprintf_r+0x78>
 8009e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e8c:	07dc      	lsls	r4, r3, #31
 8009e8e:	d50e      	bpl.n	8009eae <_vfiprintf_r+0x6a>
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	b01d      	add	sp, #116	; 0x74
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	4b7b      	ldr	r3, [pc, #492]	; (800a088 <_vfiprintf_r+0x244>)
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	d101      	bne.n	8009ea4 <_vfiprintf_r+0x60>
 8009ea0:	68b5      	ldr	r5, [r6, #8]
 8009ea2:	e7df      	b.n	8009e64 <_vfiprintf_r+0x20>
 8009ea4:	4b79      	ldr	r3, [pc, #484]	; (800a08c <_vfiprintf_r+0x248>)
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	bf08      	it	eq
 8009eaa:	68f5      	ldreq	r5, [r6, #12]
 8009eac:	e7da      	b.n	8009e64 <_vfiprintf_r+0x20>
 8009eae:	89ab      	ldrh	r3, [r5, #12]
 8009eb0:	0598      	lsls	r0, r3, #22
 8009eb2:	d4ed      	bmi.n	8009e90 <_vfiprintf_r+0x4c>
 8009eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eb6:	f7ff fc7d 	bl	80097b4 <__retarget_lock_release_recursive>
 8009eba:	e7e9      	b.n	8009e90 <_vfiprintf_r+0x4c>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec0:	2320      	movs	r3, #32
 8009ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eca:	2330      	movs	r3, #48	; 0x30
 8009ecc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a090 <_vfiprintf_r+0x24c>
 8009ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed4:	f04f 0901 	mov.w	r9, #1
 8009ed8:	4623      	mov	r3, r4
 8009eda:	469a      	mov	sl, r3
 8009edc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee0:	b10a      	cbz	r2, 8009ee6 <_vfiprintf_r+0xa2>
 8009ee2:	2a25      	cmp	r2, #37	; 0x25
 8009ee4:	d1f9      	bne.n	8009eda <_vfiprintf_r+0x96>
 8009ee6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eea:	d00b      	beq.n	8009f04 <_vfiprintf_r+0xc0>
 8009eec:	465b      	mov	r3, fp
 8009eee:	4622      	mov	r2, r4
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7ff ff93 	bl	8009e1e <__sfputs_r>
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f000 80aa 	beq.w	800a052 <_vfiprintf_r+0x20e>
 8009efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f00:	445a      	add	r2, fp
 8009f02:	9209      	str	r2, [sp, #36]	; 0x24
 8009f04:	f89a 3000 	ldrb.w	r3, [sl]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 80a2 	beq.w	800a052 <_vfiprintf_r+0x20e>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f18:	f10a 0a01 	add.w	sl, sl, #1
 8009f1c:	9304      	str	r3, [sp, #16]
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f24:	931a      	str	r3, [sp, #104]	; 0x68
 8009f26:	4654      	mov	r4, sl
 8009f28:	2205      	movs	r2, #5
 8009f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2e:	4858      	ldr	r0, [pc, #352]	; (800a090 <_vfiprintf_r+0x24c>)
 8009f30:	f7f6 f966 	bl	8000200 <memchr>
 8009f34:	9a04      	ldr	r2, [sp, #16]
 8009f36:	b9d8      	cbnz	r0, 8009f70 <_vfiprintf_r+0x12c>
 8009f38:	06d1      	lsls	r1, r2, #27
 8009f3a:	bf44      	itt	mi
 8009f3c:	2320      	movmi	r3, #32
 8009f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f42:	0713      	lsls	r3, r2, #28
 8009f44:	bf44      	itt	mi
 8009f46:	232b      	movmi	r3, #43	; 0x2b
 8009f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f50:	2b2a      	cmp	r3, #42	; 0x2a
 8009f52:	d015      	beq.n	8009f80 <_vfiprintf_r+0x13c>
 8009f54:	9a07      	ldr	r2, [sp, #28]
 8009f56:	4654      	mov	r4, sl
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f04f 0c0a 	mov.w	ip, #10
 8009f5e:	4621      	mov	r1, r4
 8009f60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f64:	3b30      	subs	r3, #48	; 0x30
 8009f66:	2b09      	cmp	r3, #9
 8009f68:	d94e      	bls.n	800a008 <_vfiprintf_r+0x1c4>
 8009f6a:	b1b0      	cbz	r0, 8009f9a <_vfiprintf_r+0x156>
 8009f6c:	9207      	str	r2, [sp, #28]
 8009f6e:	e014      	b.n	8009f9a <_vfiprintf_r+0x156>
 8009f70:	eba0 0308 	sub.w	r3, r0, r8
 8009f74:	fa09 f303 	lsl.w	r3, r9, r3
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	9304      	str	r3, [sp, #16]
 8009f7c:	46a2      	mov	sl, r4
 8009f7e:	e7d2      	b.n	8009f26 <_vfiprintf_r+0xe2>
 8009f80:	9b03      	ldr	r3, [sp, #12]
 8009f82:	1d19      	adds	r1, r3, #4
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	9103      	str	r1, [sp, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	bfbb      	ittet	lt
 8009f8c:	425b      	neglt	r3, r3
 8009f8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f92:	9307      	strge	r3, [sp, #28]
 8009f94:	9307      	strlt	r3, [sp, #28]
 8009f96:	bfb8      	it	lt
 8009f98:	9204      	strlt	r2, [sp, #16]
 8009f9a:	7823      	ldrb	r3, [r4, #0]
 8009f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f9e:	d10c      	bne.n	8009fba <_vfiprintf_r+0x176>
 8009fa0:	7863      	ldrb	r3, [r4, #1]
 8009fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009fa4:	d135      	bne.n	800a012 <_vfiprintf_r+0x1ce>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d1a      	adds	r2, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9203      	str	r2, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfb8      	it	lt
 8009fb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb6:	3402      	adds	r4, #2
 8009fb8:	9305      	str	r3, [sp, #20]
 8009fba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0a0 <_vfiprintf_r+0x25c>
 8009fbe:	7821      	ldrb	r1, [r4, #0]
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	f7f6 f91c 	bl	8000200 <memchr>
 8009fc8:	b140      	cbz	r0, 8009fdc <_vfiprintf_r+0x198>
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	eba0 000a 	sub.w	r0, r0, sl
 8009fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4303      	orrs	r3, r0
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe0:	482c      	ldr	r0, [pc, #176]	; (800a094 <_vfiprintf_r+0x250>)
 8009fe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fe6:	2206      	movs	r2, #6
 8009fe8:	f7f6 f90a 	bl	8000200 <memchr>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d03f      	beq.n	800a070 <_vfiprintf_r+0x22c>
 8009ff0:	4b29      	ldr	r3, [pc, #164]	; (800a098 <_vfiprintf_r+0x254>)
 8009ff2:	bb1b      	cbnz	r3, 800a03c <_vfiprintf_r+0x1f8>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	3307      	adds	r3, #7
 8009ff8:	f023 0307 	bic.w	r3, r3, #7
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	443b      	add	r3, r7
 800a004:	9309      	str	r3, [sp, #36]	; 0x24
 800a006:	e767      	b.n	8009ed8 <_vfiprintf_r+0x94>
 800a008:	fb0c 3202 	mla	r2, ip, r2, r3
 800a00c:	460c      	mov	r4, r1
 800a00e:	2001      	movs	r0, #1
 800a010:	e7a5      	b.n	8009f5e <_vfiprintf_r+0x11a>
 800a012:	2300      	movs	r3, #0
 800a014:	3401      	adds	r4, #1
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	4619      	mov	r1, r3
 800a01a:	f04f 0c0a 	mov.w	ip, #10
 800a01e:	4620      	mov	r0, r4
 800a020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a024:	3a30      	subs	r2, #48	; 0x30
 800a026:	2a09      	cmp	r2, #9
 800a028:	d903      	bls.n	800a032 <_vfiprintf_r+0x1ee>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0c5      	beq.n	8009fba <_vfiprintf_r+0x176>
 800a02e:	9105      	str	r1, [sp, #20]
 800a030:	e7c3      	b.n	8009fba <_vfiprintf_r+0x176>
 800a032:	fb0c 2101 	mla	r1, ip, r1, r2
 800a036:	4604      	mov	r4, r0
 800a038:	2301      	movs	r3, #1
 800a03a:	e7f0      	b.n	800a01e <_vfiprintf_r+0x1da>
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	462a      	mov	r2, r5
 800a042:	4b16      	ldr	r3, [pc, #88]	; (800a09c <_vfiprintf_r+0x258>)
 800a044:	a904      	add	r1, sp, #16
 800a046:	4630      	mov	r0, r6
 800a048:	f3af 8000 	nop.w
 800a04c:	4607      	mov	r7, r0
 800a04e:	1c78      	adds	r0, r7, #1
 800a050:	d1d6      	bne.n	800a000 <_vfiprintf_r+0x1bc>
 800a052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	d405      	bmi.n	800a064 <_vfiprintf_r+0x220>
 800a058:	89ab      	ldrh	r3, [r5, #12]
 800a05a:	059a      	lsls	r2, r3, #22
 800a05c:	d402      	bmi.n	800a064 <_vfiprintf_r+0x220>
 800a05e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a060:	f7ff fba8 	bl	80097b4 <__retarget_lock_release_recursive>
 800a064:	89ab      	ldrh	r3, [r5, #12]
 800a066:	065b      	lsls	r3, r3, #25
 800a068:	f53f af12 	bmi.w	8009e90 <_vfiprintf_r+0x4c>
 800a06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a06e:	e711      	b.n	8009e94 <_vfiprintf_r+0x50>
 800a070:	ab03      	add	r3, sp, #12
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	462a      	mov	r2, r5
 800a076:	4b09      	ldr	r3, [pc, #36]	; (800a09c <_vfiprintf_r+0x258>)
 800a078:	a904      	add	r1, sp, #16
 800a07a:	4630      	mov	r0, r6
 800a07c:	f000 f880 	bl	800a180 <_printf_i>
 800a080:	e7e4      	b.n	800a04c <_vfiprintf_r+0x208>
 800a082:	bf00      	nop
 800a084:	0800a79c 	.word	0x0800a79c
 800a088:	0800a7bc 	.word	0x0800a7bc
 800a08c:	0800a77c 	.word	0x0800a77c
 800a090:	0800a7e0 	.word	0x0800a7e0
 800a094:	0800a7ea 	.word	0x0800a7ea
 800a098:	00000000 	.word	0x00000000
 800a09c:	08009e1f 	.word	0x08009e1f
 800a0a0:	0800a7e6 	.word	0x0800a7e6

0800a0a4 <_printf_common>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	4699      	mov	r9, r3
 800a0ac:	688a      	ldr	r2, [r1, #8]
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	bfb8      	it	lt
 800a0b8:	4613      	movlt	r3, r2
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_printf_common+0x26>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	0699      	lsls	r1, r3, #26
 800a0ce:	bf42      	ittt	mi
 800a0d0:	6833      	ldrmi	r3, [r6, #0]
 800a0d2:	3302      	addmi	r3, #2
 800a0d4:	6033      	strmi	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	f015 0506 	ands.w	r5, r5, #6
 800a0dc:	d106      	bne.n	800a0ec <_printf_common+0x48>
 800a0de:	f104 0a19 	add.w	sl, r4, #25
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	6832      	ldr	r2, [r6, #0]
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dc26      	bgt.n	800a13a <_printf_common+0x96>
 800a0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f0:	1e13      	subs	r3, r2, #0
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	bf18      	it	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	0692      	lsls	r2, r2, #26
 800a0fa:	d42b      	bmi.n	800a154 <_printf_common+0xb0>
 800a0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a100:	4649      	mov	r1, r9
 800a102:	4638      	mov	r0, r7
 800a104:	47c0      	blx	r8
 800a106:	3001      	adds	r0, #1
 800a108:	d01e      	beq.n	800a148 <_printf_common+0xa4>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	68e5      	ldr	r5, [r4, #12]
 800a10e:	6832      	ldr	r2, [r6, #0]
 800a110:	f003 0306 	and.w	r3, r3, #6
 800a114:	2b04      	cmp	r3, #4
 800a116:	bf08      	it	eq
 800a118:	1aad      	subeq	r5, r5, r2
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	6922      	ldr	r2, [r4, #16]
 800a11e:	bf0c      	ite	eq
 800a120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a124:	2500      	movne	r5, #0
 800a126:	4293      	cmp	r3, r2
 800a128:	bfc4      	itt	gt
 800a12a:	1a9b      	subgt	r3, r3, r2
 800a12c:	18ed      	addgt	r5, r5, r3
 800a12e:	2600      	movs	r6, #0
 800a130:	341a      	adds	r4, #26
 800a132:	42b5      	cmp	r5, r6
 800a134:	d11a      	bne.n	800a16c <_printf_common+0xc8>
 800a136:	2000      	movs	r0, #0
 800a138:	e008      	b.n	800a14c <_printf_common+0xa8>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	4649      	mov	r1, r9
 800a140:	4638      	mov	r0, r7
 800a142:	47c0      	blx	r8
 800a144:	3001      	adds	r0, #1
 800a146:	d103      	bne.n	800a150 <_printf_common+0xac>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	3501      	adds	r5, #1
 800a152:	e7c6      	b.n	800a0e2 <_printf_common+0x3e>
 800a154:	18e1      	adds	r1, r4, r3
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	2030      	movs	r0, #48	; 0x30
 800a15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a15e:	4422      	add	r2, r4
 800a160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a168:	3302      	adds	r3, #2
 800a16a:	e7c7      	b.n	800a0fc <_printf_common+0x58>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4622      	mov	r2, r4
 800a170:	4649      	mov	r1, r9
 800a172:	4638      	mov	r0, r7
 800a174:	47c0      	blx	r8
 800a176:	3001      	adds	r0, #1
 800a178:	d0e6      	beq.n	800a148 <_printf_common+0xa4>
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7d9      	b.n	800a132 <_printf_common+0x8e>
	...

0800a180 <_printf_i>:
 800a180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	4691      	mov	r9, r2
 800a188:	7e27      	ldrb	r7, [r4, #24]
 800a18a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a18c:	2f78      	cmp	r7, #120	; 0x78
 800a18e:	4680      	mov	r8, r0
 800a190:	469a      	mov	sl, r3
 800a192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a196:	d807      	bhi.n	800a1a8 <_printf_i+0x28>
 800a198:	2f62      	cmp	r7, #98	; 0x62
 800a19a:	d80a      	bhi.n	800a1b2 <_printf_i+0x32>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f000 80d8 	beq.w	800a352 <_printf_i+0x1d2>
 800a1a2:	2f58      	cmp	r7, #88	; 0x58
 800a1a4:	f000 80a3 	beq.w	800a2ee <_printf_i+0x16e>
 800a1a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b0:	e03a      	b.n	800a228 <_printf_i+0xa8>
 800a1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1b6:	2b15      	cmp	r3, #21
 800a1b8:	d8f6      	bhi.n	800a1a8 <_printf_i+0x28>
 800a1ba:	a001      	add	r0, pc, #4	; (adr r0, 800a1c0 <_printf_i+0x40>)
 800a1bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a1a9 	.word	0x0800a1a9
 800a1cc:	0800a1a9 	.word	0x0800a1a9
 800a1d0:	0800a1a9 	.word	0x0800a1a9
 800a1d4:	0800a1a9 	.word	0x0800a1a9
 800a1d8:	0800a22d 	.word	0x0800a22d
 800a1dc:	0800a1a9 	.word	0x0800a1a9
 800a1e0:	0800a1a9 	.word	0x0800a1a9
 800a1e4:	0800a1a9 	.word	0x0800a1a9
 800a1e8:	0800a1a9 	.word	0x0800a1a9
 800a1ec:	0800a339 	.word	0x0800a339
 800a1f0:	0800a25d 	.word	0x0800a25d
 800a1f4:	0800a31b 	.word	0x0800a31b
 800a1f8:	0800a1a9 	.word	0x0800a1a9
 800a1fc:	0800a1a9 	.word	0x0800a1a9
 800a200:	0800a35b 	.word	0x0800a35b
 800a204:	0800a1a9 	.word	0x0800a1a9
 800a208:	0800a25d 	.word	0x0800a25d
 800a20c:	0800a1a9 	.word	0x0800a1a9
 800a210:	0800a1a9 	.word	0x0800a1a9
 800a214:	0800a323 	.word	0x0800a323
 800a218:	680b      	ldr	r3, [r1, #0]
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	600a      	str	r2, [r1, #0]
 800a220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a228:	2301      	movs	r3, #1
 800a22a:	e0a3      	b.n	800a374 <_printf_i+0x1f4>
 800a22c:	6825      	ldr	r5, [r4, #0]
 800a22e:	6808      	ldr	r0, [r1, #0]
 800a230:	062e      	lsls	r6, r5, #24
 800a232:	f100 0304 	add.w	r3, r0, #4
 800a236:	d50a      	bpl.n	800a24e <_printf_i+0xce>
 800a238:	6805      	ldr	r5, [r0, #0]
 800a23a:	600b      	str	r3, [r1, #0]
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	da03      	bge.n	800a248 <_printf_i+0xc8>
 800a240:	232d      	movs	r3, #45	; 0x2d
 800a242:	426d      	negs	r5, r5
 800a244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a248:	485e      	ldr	r0, [pc, #376]	; (800a3c4 <_printf_i+0x244>)
 800a24a:	230a      	movs	r3, #10
 800a24c:	e019      	b.n	800a282 <_printf_i+0x102>
 800a24e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a252:	6805      	ldr	r5, [r0, #0]
 800a254:	600b      	str	r3, [r1, #0]
 800a256:	bf18      	it	ne
 800a258:	b22d      	sxthne	r5, r5
 800a25a:	e7ef      	b.n	800a23c <_printf_i+0xbc>
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	1d18      	adds	r0, r3, #4
 800a262:	6008      	str	r0, [r1, #0]
 800a264:	0628      	lsls	r0, r5, #24
 800a266:	d501      	bpl.n	800a26c <_printf_i+0xec>
 800a268:	681d      	ldr	r5, [r3, #0]
 800a26a:	e002      	b.n	800a272 <_printf_i+0xf2>
 800a26c:	0669      	lsls	r1, r5, #25
 800a26e:	d5fb      	bpl.n	800a268 <_printf_i+0xe8>
 800a270:	881d      	ldrh	r5, [r3, #0]
 800a272:	4854      	ldr	r0, [pc, #336]	; (800a3c4 <_printf_i+0x244>)
 800a274:	2f6f      	cmp	r7, #111	; 0x6f
 800a276:	bf0c      	ite	eq
 800a278:	2308      	moveq	r3, #8
 800a27a:	230a      	movne	r3, #10
 800a27c:	2100      	movs	r1, #0
 800a27e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a282:	6866      	ldr	r6, [r4, #4]
 800a284:	60a6      	str	r6, [r4, #8]
 800a286:	2e00      	cmp	r6, #0
 800a288:	bfa2      	ittt	ge
 800a28a:	6821      	ldrge	r1, [r4, #0]
 800a28c:	f021 0104 	bicge.w	r1, r1, #4
 800a290:	6021      	strge	r1, [r4, #0]
 800a292:	b90d      	cbnz	r5, 800a298 <_printf_i+0x118>
 800a294:	2e00      	cmp	r6, #0
 800a296:	d04d      	beq.n	800a334 <_printf_i+0x1b4>
 800a298:	4616      	mov	r6, r2
 800a29a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a29e:	fb03 5711 	mls	r7, r3, r1, r5
 800a2a2:	5dc7      	ldrb	r7, [r0, r7]
 800a2a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2a8:	462f      	mov	r7, r5
 800a2aa:	42bb      	cmp	r3, r7
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	d9f4      	bls.n	800a29a <_printf_i+0x11a>
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d10b      	bne.n	800a2cc <_printf_i+0x14c>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	07df      	lsls	r7, r3, #31
 800a2b8:	d508      	bpl.n	800a2cc <_printf_i+0x14c>
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	6861      	ldr	r1, [r4, #4]
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	bfde      	ittt	le
 800a2c2:	2330      	movle	r3, #48	; 0x30
 800a2c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2cc:	1b92      	subs	r2, r2, r6
 800a2ce:	6122      	str	r2, [r4, #16]
 800a2d0:	f8cd a000 	str.w	sl, [sp]
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	aa03      	add	r2, sp, #12
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4640      	mov	r0, r8
 800a2dc:	f7ff fee2 	bl	800a0a4 <_printf_common>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d14c      	bne.n	800a37e <_printf_i+0x1fe>
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	b004      	add	sp, #16
 800a2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ee:	4835      	ldr	r0, [pc, #212]	; (800a3c4 <_printf_i+0x244>)
 800a2f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	680e      	ldr	r6, [r1, #0]
 800a2f8:	061f      	lsls	r7, r3, #24
 800a2fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2fe:	600e      	str	r6, [r1, #0]
 800a300:	d514      	bpl.n	800a32c <_printf_i+0x1ac>
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	bf44      	itt	mi
 800a306:	f043 0320 	orrmi.w	r3, r3, #32
 800a30a:	6023      	strmi	r3, [r4, #0]
 800a30c:	b91d      	cbnz	r5, 800a316 <_printf_i+0x196>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f023 0320 	bic.w	r3, r3, #32
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	2310      	movs	r3, #16
 800a318:	e7b0      	b.n	800a27c <_printf_i+0xfc>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	f043 0320 	orr.w	r3, r3, #32
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	2378      	movs	r3, #120	; 0x78
 800a324:	4828      	ldr	r0, [pc, #160]	; (800a3c8 <_printf_i+0x248>)
 800a326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a32a:	e7e3      	b.n	800a2f4 <_printf_i+0x174>
 800a32c:	065e      	lsls	r6, r3, #25
 800a32e:	bf48      	it	mi
 800a330:	b2ad      	uxthmi	r5, r5
 800a332:	e7e6      	b.n	800a302 <_printf_i+0x182>
 800a334:	4616      	mov	r6, r2
 800a336:	e7bb      	b.n	800a2b0 <_printf_i+0x130>
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	6826      	ldr	r6, [r4, #0]
 800a33c:	6960      	ldr	r0, [r4, #20]
 800a33e:	1d1d      	adds	r5, r3, #4
 800a340:	600d      	str	r5, [r1, #0]
 800a342:	0635      	lsls	r5, r6, #24
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	d501      	bpl.n	800a34c <_printf_i+0x1cc>
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	e002      	b.n	800a352 <_printf_i+0x1d2>
 800a34c:	0671      	lsls	r1, r6, #25
 800a34e:	d5fb      	bpl.n	800a348 <_printf_i+0x1c8>
 800a350:	8018      	strh	r0, [r3, #0]
 800a352:	2300      	movs	r3, #0
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	4616      	mov	r6, r2
 800a358:	e7ba      	b.n	800a2d0 <_printf_i+0x150>
 800a35a:	680b      	ldr	r3, [r1, #0]
 800a35c:	1d1a      	adds	r2, r3, #4
 800a35e:	600a      	str	r2, [r1, #0]
 800a360:	681e      	ldr	r6, [r3, #0]
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	2100      	movs	r1, #0
 800a366:	4630      	mov	r0, r6
 800a368:	f7f5 ff4a 	bl	8000200 <memchr>
 800a36c:	b108      	cbz	r0, 800a372 <_printf_i+0x1f2>
 800a36e:	1b80      	subs	r0, r0, r6
 800a370:	6060      	str	r0, [r4, #4]
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	6123      	str	r3, [r4, #16]
 800a376:	2300      	movs	r3, #0
 800a378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a37c:	e7a8      	b.n	800a2d0 <_printf_i+0x150>
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	4632      	mov	r2, r6
 800a382:	4649      	mov	r1, r9
 800a384:	4640      	mov	r0, r8
 800a386:	47d0      	blx	sl
 800a388:	3001      	adds	r0, #1
 800a38a:	d0ab      	beq.n	800a2e4 <_printf_i+0x164>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	079b      	lsls	r3, r3, #30
 800a390:	d413      	bmi.n	800a3ba <_printf_i+0x23a>
 800a392:	68e0      	ldr	r0, [r4, #12]
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	4298      	cmp	r0, r3
 800a398:	bfb8      	it	lt
 800a39a:	4618      	movlt	r0, r3
 800a39c:	e7a4      	b.n	800a2e8 <_printf_i+0x168>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	47d0      	blx	sl
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d09b      	beq.n	800a2e4 <_printf_i+0x164>
 800a3ac:	3501      	adds	r5, #1
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	9903      	ldr	r1, [sp, #12]
 800a3b2:	1a5b      	subs	r3, r3, r1
 800a3b4:	42ab      	cmp	r3, r5
 800a3b6:	dcf2      	bgt.n	800a39e <_printf_i+0x21e>
 800a3b8:	e7eb      	b.n	800a392 <_printf_i+0x212>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	f104 0619 	add.w	r6, r4, #25
 800a3c0:	e7f5      	b.n	800a3ae <_printf_i+0x22e>
 800a3c2:	bf00      	nop
 800a3c4:	0800a7f1 	.word	0x0800a7f1
 800a3c8:	0800a802 	.word	0x0800a802

0800a3cc <_putc_r>:
 800a3cc:	b570      	push	{r4, r5, r6, lr}
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	b118      	cbz	r0, 800a3de <_putc_r+0x12>
 800a3d6:	6983      	ldr	r3, [r0, #24]
 800a3d8:	b90b      	cbnz	r3, 800a3de <_putc_r+0x12>
 800a3da:	f7ff f927 	bl	800962c <__sinit>
 800a3de:	4b1c      	ldr	r3, [pc, #112]	; (800a450 <_putc_r+0x84>)
 800a3e0:	429c      	cmp	r4, r3
 800a3e2:	d124      	bne.n	800a42e <_putc_r+0x62>
 800a3e4:	6874      	ldr	r4, [r6, #4]
 800a3e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3e8:	07d8      	lsls	r0, r3, #31
 800a3ea:	d405      	bmi.n	800a3f8 <_putc_r+0x2c>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	0599      	lsls	r1, r3, #22
 800a3f0:	d402      	bmi.n	800a3f8 <_putc_r+0x2c>
 800a3f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f4:	f7ff f9dd 	bl	80097b2 <__retarget_lock_acquire_recursive>
 800a3f8:	68a3      	ldr	r3, [r4, #8]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	60a3      	str	r3, [r4, #8]
 800a400:	da05      	bge.n	800a40e <_putc_r+0x42>
 800a402:	69a2      	ldr	r2, [r4, #24]
 800a404:	4293      	cmp	r3, r2
 800a406:	db1c      	blt.n	800a442 <_putc_r+0x76>
 800a408:	b2eb      	uxtb	r3, r5
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	d019      	beq.n	800a442 <_putc_r+0x76>
 800a40e:	6823      	ldr	r3, [r4, #0]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	701d      	strb	r5, [r3, #0]
 800a416:	b2ed      	uxtb	r5, r5
 800a418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a41a:	07da      	lsls	r2, r3, #31
 800a41c:	d405      	bmi.n	800a42a <_putc_r+0x5e>
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	059b      	lsls	r3, r3, #22
 800a422:	d402      	bmi.n	800a42a <_putc_r+0x5e>
 800a424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a426:	f7ff f9c5 	bl	80097b4 <__retarget_lock_release_recursive>
 800a42a:	4628      	mov	r0, r5
 800a42c:	bd70      	pop	{r4, r5, r6, pc}
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <_putc_r+0x88>)
 800a430:	429c      	cmp	r4, r3
 800a432:	d101      	bne.n	800a438 <_putc_r+0x6c>
 800a434:	68b4      	ldr	r4, [r6, #8]
 800a436:	e7d6      	b.n	800a3e6 <_putc_r+0x1a>
 800a438:	4b07      	ldr	r3, [pc, #28]	; (800a458 <_putc_r+0x8c>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	bf08      	it	eq
 800a43e:	68f4      	ldreq	r4, [r6, #12]
 800a440:	e7d1      	b.n	800a3e6 <_putc_r+0x1a>
 800a442:	4629      	mov	r1, r5
 800a444:	4622      	mov	r2, r4
 800a446:	4630      	mov	r0, r6
 800a448:	f7ff fb6e 	bl	8009b28 <__swbuf_r>
 800a44c:	4605      	mov	r5, r0
 800a44e:	e7e3      	b.n	800a418 <_putc_r+0x4c>
 800a450:	0800a79c 	.word	0x0800a79c
 800a454:	0800a7bc 	.word	0x0800a7bc
 800a458:	0800a77c 	.word	0x0800a77c

0800a45c <_read_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4d07      	ldr	r5, [pc, #28]	; (800a47c <_read_r+0x20>)
 800a460:	4604      	mov	r4, r0
 800a462:	4608      	mov	r0, r1
 800a464:	4611      	mov	r1, r2
 800a466:	2200      	movs	r2, #0
 800a468:	602a      	str	r2, [r5, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f7f7 fe58 	bl	8002120 <_read>
 800a470:	1c43      	adds	r3, r0, #1
 800a472:	d102      	bne.n	800a47a <_read_r+0x1e>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	b103      	cbz	r3, 800a47a <_read_r+0x1e>
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	20000900 	.word	0x20000900

0800a480 <_fstat_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d07      	ldr	r5, [pc, #28]	; (800a4a0 <_fstat_r+0x20>)
 800a484:	2300      	movs	r3, #0
 800a486:	4604      	mov	r4, r0
 800a488:	4608      	mov	r0, r1
 800a48a:	4611      	mov	r1, r2
 800a48c:	602b      	str	r3, [r5, #0]
 800a48e:	f7f7 fe8c 	bl	80021aa <_fstat>
 800a492:	1c43      	adds	r3, r0, #1
 800a494:	d102      	bne.n	800a49c <_fstat_r+0x1c>
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	b103      	cbz	r3, 800a49c <_fstat_r+0x1c>
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	bd38      	pop	{r3, r4, r5, pc}
 800a49e:	bf00      	nop
 800a4a0:	20000900 	.word	0x20000900

0800a4a4 <_isatty_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_isatty_r+0x1c>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f7f7 fe8b 	bl	80021ca <_isatty>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_isatty_r+0x1a>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_isatty_r+0x1a>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000900 	.word	0x20000900

0800a4c4 <_init>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr

0800a4d0 <_fini>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	bf00      	nop
 800a4d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d6:	bc08      	pop	{r3}
 800a4d8:	469e      	mov	lr, r3
 800a4da:	4770      	bx	lr
